{
  "name": "ocireg",
  "slug": "stackloklabs__ocireg-mcp",
  "description": "An MCP (Model Context Protocol) server that provides tools for querying OCI registries and image references.",
  "readme": "# OCI Registry MCP Server\n\nAn MCP (Model Context Protocol) server that provides tools for querying OCI\nregistries and image references.\n\n## Overview\n\nThis project implements an SSE-based MCP server that allows LLM-powered\napplications to interact with OCI registries. It provides tools for retrieving\ninformation about container images, listing tags, and more.\n\n## Features\n\n- Get information about OCI images\n- List tags for repositories\n- Get image manifests\n- Get image configs\n\n## MCP Tools\n\nThe server provides the following MCP tools:\n\n### get_image_info\n\nGet information about an OCI image.\n\n**Input:**\n\n- `image_ref`: The image reference (e.g., docker.io/library/alpine:latest)\n\n**Output:**\n\n- Image information including digest, size, architecture, OS, creation date, and\n  number of layers\n\n### list_tags\n\nList tags for a repository.\n\n**Input:**\n\n- `repository`: The repository name (e.g., docker.io/library/alpine)\n\n**Output:**\n\n- List of tags for the repository\n\n### get_image_manifest\n\nGet the manifest for an OCI image.\n\n**Input:**\n\n- `image_ref`: The image reference (e.g., docker.io/library/alpine:latest)\n\n**Output:**\n\n- The image manifest\n\n### get_image_config\n\nGet the config for an OCI image.\n\n**Input:**\n\n- `image_ref`: The image reference (e.g., docker.io/library/alpine:latest)\n\n**Output:**\n\n- The image config\n\n## Usage\n\n### Running with ToolHive (Recommended)\n\nThe easiest way to run the OCI Registry MCP server is using\n[ToolHive](https://github.com/stacklok/toolhive), which provides secure,\ncontainerized deployment of MCP servers:\n\n```bash\n# Install ToolHive (if not already installed)\n# See: https://docs.stacklok.com/toolhive/guides-cli/install\n\n# Register a supported client so ToolHive can auto-configure your environment\nthv client setup\n# Run the OCI Registry MCP server (packaged as 'oci-registry' in ToolHive)\nthv run oci-registry\n\n# List running servers\nthv list\n\n# Get detailed information about the server\nthv registry info oci-registry\n```\n\nThe server will be available to your MCP-compatible clients and can query OCI\nregistries for image information.\n\n#### Authentication with ToolHive\n\nIf you need to access private registries, you can provide authentication\ncredentials using ToolHive's secret management:\n\n```bash\n# For bearer token authentication\nthv secret set oci-token\n# Enter your bearer token when prompted\n\nthv run --secret oci-token,target=OCI_TOKEN oci-registry\n\n# For username/password authentication\nthv secret set oci-username\nthv secret set oci-password\n# Enter your credentials when prompted\n\nthv run --secret oci-username,target=OCI_USERNAME --secret oci-password,target=OCI_PASSWORD oci-registry\n```\n\n## Development\n\n### Prerequisites\n\n- Go 1.21 or later\n- Access to OCI registries\n\n### Authentication\n\nThe server supports the following authentication methods for accessing private\nOCI registries:\n\n1. **Bearer Token**: Set the following environment variable:\n\n   - `OCI_TOKEN`: Bearer token for registry authentication\n\n2. **Username and Password**: Set the following environment variables:\n\n   - `OCI_USERNAME`: Username for registry authentication\n   - `OCI_PASSWORD`: Password for registry authentication\n\n3. **Docker Config**: If no token or username/password is provided, the server\n   will use the default Docker keychain, which reads credentials from\n   `~/.docker/config.json`.\n\nExamples:\n\n```bash\n# Bearer token authentication\nexport OCI_TOKEN=mytoken\n\n# Username/password authentication\nexport OCI_USERNAME=myuser\nexport OCI_PASSWORD=mypassword\n```\n\n### Port Configuration\n\nThe server can be configured to listen on a specific port using either:\n\n1. **Environment Variable**:\n\n   - `MCP_PORT`: The port number to listen on (must be between 0 and 65535)\n   - If not set or invalid, defaults to port 8080\n\n2. **Command-line Flag**:\n   - `-port`: Overrides the environment variable setting (must be between 0\n     and 65535)\n   - If invalid port provided it defaults to port 8080\n   - Example: `./ocireg-mcp -port 9090`\n\n### Testing\n\n```bash\ngo test ./...\n```\n\n### Linting\n\n```bash\ngolangci-lint run\n```\n\n## Contributing\n\nWe welcome contributions to this MCP server! If you'd like to contribute, please\nreview the [CONTRIBUTING guide](./CONTRIBUTING.md) for details on how to get\nstarted.\n\nIf you run into a bug or have a feature request, please\n[open an issue](https://github.com/StacklokLabs/ocireg-mcp/issues) in the\nrepository or join us in the `#mcp-servers` channel on our\n[community Discord server](https://discord.gg/stacklok).\n\n## License\n\nThis project is licensed under the Apache v2 License - see the LICENSE file for\ndetails.\n",
  "category": null,
  "qualityScore": 82,
  "githubUrl": "https://github.com/StacklokLabs/ocireg-mcp",
  "programmingLanguage": "Go",
  "gitHubOrg": "StacklokLabs",
  "gitHubRepo": "ocireg-mcp",
  "repositoryPath": null,
  "gh_stars": 9,
  "gh_contributors": 8,
  "gh_issues": 3,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "dfc858001d589cd6ebea8422c10e53d2b3c477f9",
  "last_scraped_at": "2025-07-29T19:07:42.974Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}