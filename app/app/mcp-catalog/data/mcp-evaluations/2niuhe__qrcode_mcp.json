{
  "name": "qrcode_",
  "slug": "2niuhe__qrcode_mcp",
  "description": "mcp tool to generate qrcode",
  "readme": "# QR Code Generation MCP Server\n\nA QR code generation MCP server implemented using FastMCP, supporting text-to-QR code conversion with base64 encoding output.\n\n<a href=\"https://glama.ai/mcp/servers/@2niuhe/qrcode_mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@2niuhe/qrcode_mcp/badge\" />\n</a>\n\n## Features\n\n- Support for any text to QR code conversion (including Chinese characters)\n- Customizable colors and styles\n- Base64 encoding\n- Support for STDIO, HTTP, and SSE transport modes\n\n## Installation\n\n```bash\nuv sync\n# or\npip install qrcode Pillow mcp\n```\n\n## Usage\n\n### 0. Docker Usage\n\n#### Build Image\n```bash\ndocker build -t qrcode-mcp .\n```\n\n#### Run Container\n```bash\n# Default SSE mode\ndocker run -p 8008:8008 qrcode-mcp\n\n# HTTP mode\ndocker run -p 8008:8008 -e TRANSPORT_MODE=http qrcode-mcp\n\n# STDIO mode (for testing)\ndocker run -e TRANSPORT_MODE=stdio qrcode-mcp\n\n# Custom host and port\ndocker run -p 9000:9000 -e TRANSPORT_MODE=http -e HOST=0.0.0.0 -e PORT=9000 qrcode-mcp\n```\n\n#### Environment Variables\n- `TRANSPORT_MODE`: Transport mode (`sse`, `http`, `stdio`), default: `sse`\n- `HOST`: Host address to bind, default: `0.0.0.0`\n- `PORT`: Port to bind, default: `8008`\n\n#### Docker Compose\n```yaml\nversion: '3.8'\nservices:\n  qrcode-mcp:\n    build: .\n    ports:\n      - \"8008:8008\"\n    environment:\n      - TRANSPORT_MODE=sse\n      - HOST=0.0.0.0\n      - PORT=8008\n```\n\n### 1. MCP Server Mode\n\n#### Start Server\n```bash\n# STDIO mode (for Claude Desktop)\npython qrcode_mcp_server.py\n\n# HTTP mode\npython qrcode_mcp_server.py --http --host 127.0.0.1 --port 8008\n\n# SSE mode (Server-Sent Events) Deprecated\npython qrcode_mcp_server.py --sse --host 127.0.0.1 --port 8008\n```\n\n#### Configure Claude Desktop\nAdd to `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n**STDIO Mode (Local Use):**\n```json\n{\n  \"mcpServers\": {\n    \"qrcode-mcp\": {\n      \"command\": \"python\",\n      \"args\": [\"/ABSOLUTE/PATH/TO/qrcode_mcp/qrcode_mcp_server.py\"],\n      \"cwd\": \"/ABSOLUTE/PATH/TO/qrcode_mcp\"\n    }\n  }\n}\n```\n\n**HTTP Mode (Network Deployment):**\n```json\n{\n  \"mcpServers\": {\n    \"qrcode-mcp\": {\n      \"transport\": \"http\",\n      \"url\": \"http://127.0.0.1:8008/mcp/\"\n    }\n  }\n}\n```\n\n**SSE Mode (Server-Sent Events):**\n```json\n{\n  \"mcpServers\": {\n    \"qrcode-mcp\": {\n      \"serverUrl\": \"http://127.0.0.1:8008/sse\"\n    }\n  }\n}\n```\n\n### 2. Direct Python API Usage\n\n```python\nfrom qrcode_utils import text_to_qr_base64\n\n# Basic usage\nbase64_result = text_to_qr_base64(\"Hello, World!\")\n\n# Custom styling\nbase64_result = text_to_qr_base64(\n    \"Custom QR Code\",\n    box_size=15,\n    fill_color=\"darkblue\",\n    back_color=\"lightgray\"\n)\n```\n\n## MCP Tools\n\n### `generate_qr_code`\nGenerate QR code and return base64 encoding.\n\n**Parameters:**\n- `text` (required): Text content to convert\n- `box_size` (optional): Pixel size of each box, default 10\n- `border` (optional): Number of border boxes, default 4\n- `fill_color` (optional): Foreground color, default \"black\"\n- `back_color` (optional): Background color, default \"white\"\n- `return_data_url` (optional): Whether to return Data URL format, default false\n\n## Testing\n\n```bash\npython test_mcp_client.py\n```\n\n## License\n\nMIT License ",
  "category": null,
  "qualityScore": 68,
  "githubUrl": "https://github.com/2niuhe/qrcode_mcp",
  "programmingLanguage": "Python",
  "gitHubOrg": "2niuhe",
  "gitHubRepo": "qrcode_mcp",
  "repositoryPath": null,
  "gh_stars": 6,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "77708edcca558524d651bc2ead8a9cd453ec5aac",
  "last_scraped_at": "2025-07-31T20:49:02.764Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}