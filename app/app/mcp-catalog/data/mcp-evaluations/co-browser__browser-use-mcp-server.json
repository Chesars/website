{
  "name": "browser use",
  "slug": "co-browser__browser-use-mcp-server",
  "description": "Browse the web, directly from Cursor etc.",
  "readme": "# browser-use-mcp-server\n\n<div align=\"center\">\n\n[![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/cobrowser.svg?style=social&label=Follow%20%40cobrowser)](https://x.com/cobrowser)\n[![Discord](https://img.shields.io/discord/1351569878116470928?logo=discord&logoColor=white&label=discord&color=white)](https://discord.gg/gw9UpFUhyY)\n[![PyPI version](https://badge.fury.io/py/browser-use-mcp-server.svg)](https://badge.fury.io/py/browser-use-mcp-server)\n\n**An MCP server that enables AI agents to control web browsers using\n[browser-use](https://github.com/browser-use/browser-use).**\n\n> **🌐 Want to Vibe Browse the Web?** Open-source AI-powered web browser - [**Vibe Browser**](https://github.com/co-browser/vibe).\n>\n> **🔗 Managing multiple MCP servers?** Simplify your development workflow with [agent-browser](https://github.com/co-browser/agent-browser)\n\n</div>\n\n## Prerequisites\n\n- [uv](https://github.com/astral-sh/uv) - Fast Python package manager\n- [Playwright](https://playwright.dev/) - Browser automation\n- [mcp-proxy](https://github.com/sparfenyuk/mcp-proxy) - Required for stdio mode\n\n```bash\n# Install prerequisites\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv tool install mcp-proxy\nuv tool update-shell\n```\n\n## Environment\n\nCreate a `.env` file:\n\n```bash\nOPENAI_API_KEY=your-api-key\nCHROME_PATH=optional/path/to/chrome\nPATIENT=false  # Set to true if API calls should wait for task completion\n```\n\n## Installation\n\n```bash\n# Install dependencies\nuv sync\nuv pip install playwright\nuv run playwright install --with-deps --no-shell chromium\n```\n\n## Usage\n\n### SSE Mode\n\n```bash\n# Run directly from source\nuv run server --port 8000\n```\n\n### stdio Mode\n\n```bash\n# 1. Build and install globally\nuv build\nuv tool uninstall browser-use-mcp-server 2>/dev/null || true\nuv tool install dist/browser_use_mcp_server-*.whl\n\n# 2. Run with stdio transport\nbrowser-use-mcp-server run server --port 8000 --stdio --proxy-port 9000\n```\n\n## Client Configuration\n\n### SSE Mode Client Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\"\n    }\n  }\n}\n```\n\n### stdio Mode Client Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-server\": {\n      \"command\": \"browser-use-mcp-server\",\n      \"args\": [\n        \"run\",\n        \"server\",\n        \"--port\",\n        \"8000\",\n        \"--stdio\",\n        \"--proxy-port\",\n        \"9000\"\n      ],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Config Locations\n\n| Client           | Configuration Path                                                |\n| ---------------- | ----------------------------------------------------------------- |\n| Cursor           | `./.cursor/mcp.json`                                              |\n| Windsurf         | `~/.codeium/windsurf/mcp_config.json`                             |\n| Claude (Mac)     | `~/Library/Application Support/Claude/claude_desktop_config.json` |\n| Claude (Windows) | `%APPDATA%\\Claude\\claude_desktop_config.json`                     |\n\n## Features\n\n- [x] **Browser Automation**: Control browsers through AI agents\n- [x] **Dual Transport**: Support for both SSE and stdio protocols\n- [x] **VNC Streaming**: Watch browser automation in real-time\n- [x] **Async Tasks**: Execute browser operations asynchronously\n\n## Local Development\n\nTo develop and test the package locally:\n\n1. Build a distributable wheel:\n\n   ```bash\n   # From the project root directory\n   uv build\n   ```\n\n2. Install it as a global tool:\n\n   ```bash\n   uv tool uninstall browser-use-mcp-server 2>/dev/null || true\n   uv tool install dist/browser_use_mcp_server-*.whl\n   ```\n\n3. Run from any directory:\n\n   ```bash\n   # Set your OpenAI API key for the current session\n   export OPENAI_API_KEY=your-api-key-here\n\n   # Or provide it inline for a one-time run\n   OPENAI_API_KEY=your-api-key-here browser-use-mcp-server run server --port 8000 --stdio --proxy-port 9000\n   ```\n\n4. After making changes, rebuild and reinstall:\n   ```bash\n   uv build\n   uv tool uninstall browser-use-mcp-server\n   uv tool install dist/browser_use_mcp_server-*.whl\n   ```\n\n## Docker\n\nUsing Docker provides a consistent and isolated environment for running the server.\n\n```bash\n# Build the Docker image\ndocker build -t browser-use-mcp-server .\n\n# Run the container with the default VNC password (\"browser-use\")\n# --rm ensures the container is automatically removed when it stops\n# -p 8000:8000 maps the server port\n# -p 5900:5900 maps the VNC port\ndocker run --rm -p8000:8000 -p5900:5900 browser-use-mcp-server\n\n# Run with a custom VNC password read from a file\n# Create a file (e.g., vnc_password.txt) containing only your desired password\necho \"your-secure-password\" > vnc_password.txt\n# Mount the password file as a secret inside the container\ndocker run --rm -p8000:8000 -p5900:5900 \\\n  -v $(pwd)/vnc_password.txt:/run/secrets/vnc_password:ro \\\n  browser-use-mcp-server\n```\n\n*Note: The `:ro` flag in the volume mount (`-v`) makes the password file read-only inside the container for added security.*\n\n### VNC Viewer\n\n```bash\n# Browser-based viewer\ngit clone https://github.com/novnc/noVNC\ncd noVNC\n./utils/novnc_proxy --vnc localhost:5900\n```\n\nDefault password: `browser-use` (unless overridden using the custom password method)\n\n<div align=\"center\">\n  <img width=\"428\" alt=\"VNC Screenshot\" src=\"https://github.com/user-attachments/assets/45bc5bee-418d-4182-94f5-db84b4fc0b3a\" />\n  <br><br>\n  <img width=\"428\" alt=\"VNC Screenshot\" src=\"https://github.com/user-attachments/assets/7db53f41-fc00-4e48-8892-f7108096f9c4\" />\n</div>\n\n## Example\n\nTry asking your AI:\n\n```text\nopen https://news.ycombinator.com and return the top ranked article\n```\n\n## Support\n\nFor issues or inquiries: [cobrowser.xyz](https://cobrowser.xyz)\n\n## Star History\n\n<div align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date&theme=dark\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date\" />\n    <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date\" />\n  </picture>\n</div>\n",
  "category": "Browser Automation",
  "qualityScore": 90,
  "githubUrl": "https://github.com/co-browser/browser-use-mcp-server",
  "programmingLanguage": "Python",
  "gitHubOrg": "co-browser",
  "gitHubRepo": "browser-use-mcp-server",
  "repositoryPath": null,
  "gh_stars": 664,
  "gh_contributors": 5,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "a9864a400979e6e80fac9bff3e38adf3fa4e64cb",
  "last_scraped_at": "2025-08-01T13:16:21.992Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}