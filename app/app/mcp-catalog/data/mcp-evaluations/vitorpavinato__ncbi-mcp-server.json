{
  "name": "ncbi",
  "slug": "vitorpavinato__ncbi-mcp-server",
  "description": "MCP server from vitorpavinato/ncbi-mcp-server",
  "readme": "# NCBI Literature Search MCP Server\n\nA Model Context Protocol (MCP) server for searching NCBI databases, designed for researchers across all life sciences and biomedical fields. This server provides seamless access to PubMed's vast collection of 35+ million scientific articles through natural language queries, enabling AI assistants to help with literature reviews, research discovery, and scientific analysis.\n\n## Features\n\nðŸ”¬ **Comprehensive Search**: Search PubMed's 35+ million articles across all biological disciplines\nðŸ“Š **Advanced Queries**: Support for complex searches with boolean operators, field tags, and filters  \nðŸ§¬ **Life Sciences Research**: Covers all biological and biomedical fields including genetics, ecology, medicine, and biotechnology\nðŸ’» **Computational Biology**: Perfect for finding bioinformatics methods, algorithms, and computational tools\nðŸ”¬ **Research Applications**: Literature reviews, hypothesis generation, method discovery, and staying current with scientific advances\nðŸ“š **Full Article Details**: Get abstracts, author lists, MeSH terms, DOIs, and publication information\nðŸ”— **Related Articles**: Discover relevant research through NCBI's relationship algorithms\nðŸ“– **MeSH Integration**: Search and utilize Medical Subject Headings for precise terminology\n\n## Quick Start\n\n### Prerequisites\n- Python 3.8 or higher\n- Poetry (recommended) - [Install Poetry](https://python-poetry.org/docs/#installation)\n\n### Setup (5 minutes)\n\n1. **Create and initialize project**\n   ```bash\n   mkdir ncbi-mcp-server && cd ncbi-mcp-server\n   poetry init\n   ```\n   During init, add dependencies: `mcp`, `httpx`, `typing-extensions`\n\n2. **Create project structure**\n   ```bash\n   mkdir -p src/ncbi_mcp_server\n   # Save server.py code as src/ncbi_mcp_server/server.py\n   ```\n\n3. **Install dependencies**\n   ```bash\n   poetry install\n   ```\n\n4. **Test the server**\n   ```bash\n   poetry run python src/ncbi_mcp_server/server.py\n   ```\n\n5. **Configure Claude Desktop**\n   \n   Edit your Claude Desktop config file:\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n   - **Linux**: `~/.config/claude/claude_desktop_config.json`\n\n   Add this configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"ncbi-literature\": {\n         \"command\": \"poetry\",\n         \"args\": [\"run\", \"python\", \"src/ncbi_mcp_server/server.py\"],\n         \"cwd\": \"/FULL/PATH/TO/YOUR/ncbi-mcp-server\"\n       }\n     }\n   }\n   ```\n\n6. **Restart Claude Desktop** and start searching!\n\n### Alternative Setup Methods\n\n<details>\n<summary>Click to expand alternative installation methods</summary>\n\n#### **Conda Environment**\n```bash\nconda env create -f environment.yml\nconda activate ncbi-mcp\npython server.py\n```\n\n#### **Standard pip + venv**\n```bash\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\npip install -r requirements.txt\npython server.py\n```\n</details>\n\n## Usage Examples\n\n### For Evolutionary Biology Research\n\n**Search for phylogenetic studies:**\n```\n\"Search for recent phylogenetic analysis papers on mammalian evolution\"\nâ†’ Uses: search_pubmed with query \"phylogenetic analysis[ti] AND mammalian[ti] AND evolution\"\n```\n\n**Find computational phylogenetics methods:**\n```\n\"Find papers about maximum likelihood methods for phylogenetic reconstruction\"\nâ†’ Uses: search_pubmed with query \"maximum likelihood[ti] AND phylogenetic reconstruction\"\n```\n\n**Search by specific organism:**\n```\n\"Find recent papers on Drosophila comparative genomics\"\nâ†’ Uses: search_pubmed with query \"Drosophila[ti] AND comparative genomics[ti]\"\n```\n\n### For Computational Biology Research\n\n**Algorithm and method papers:**\n```\n\"Search for machine learning applications in genomics from the last 2 years\"\nâ†’ Uses: search_pubmed with date_range=\"730\" and query \"machine learning AND genomics\"\n```\n\n**Software and database papers:**\n```\n\"Find papers about new bioinformatics tools for sequence analysis\"\nâ†’ Uses: search_pubmed with query \"bioinformatics[ti] AND software[ti] AND sequence analysis\"\n```\n\n### Advanced Search Examples\n\n**Multi-criteria search:**\n```\n\"Find review articles about CRISPR applications in evolutionary studies published in Nature or Science\"\nâ†’ Uses: advanced_search with terms=[\"CRISPR\", \"evolution\"], publication_types=[\"Review\"], journals=[\"Nature\", \"Science\"]\n```\n\n**Author-specific searches:**\n```\n\"Find recent papers by researchers working on ancient DNA and phylogenomics\"\nâ†’ Uses: search_pubmed with query \"ancient DNA[ti] AND phylogenomics[ti]\"\n```\n\n## Tool Reference\n\n### `search_pubmed`\nPrimary search tool for PubMed database\n- **query**: Search terms (supports field tags like `[ti]` for title, `[au]` for author, `[mh]` for MeSH terms)\n- **max_results**: Number of results (1-100, default: 20)\n- **sort**: Sort by \"relevance\", \"pub_date\", \"author\", or \"journal\"\n- **date_range**: Limit to recent articles (\"30\", \"90\", \"365\", \"1095\" days)\n\n**Examples:**\n- `\"CRISPR[ti] AND evolution\"` - CRISPR in title AND evolution anywhere\n- `\"phylogenetic analysis[mh]\"` - Using MeSH term for phylogenetic analysis\n- `\"computational biology AND machine learning\"` - Boolean search\n\n### `get_article_details`\nFetch complete information for specific articles\n- **pmids**: List of PubMed IDs (up to 50)\n\nReturns full abstracts, author lists, MeSH terms, DOI, publication details\n\n### `search_mesh_terms`\nFind standardized Medical Subject Headings\n- **term**: Term to search in MeSH database\n\nHelps discover related concepts and improve search precision\n\n### `get_related_articles`\nDiscover articles related to a specific paper\n- **pmid**: PubMed ID of reference article\n- **max_results**: Number of related articles (1-50, default: 10)\n\nPerfect for literature reviews and finding relevant research\n\n### `advanced_search`\nComplex searches with multiple criteria\n- **terms**: List of search terms to combine\n- **operator**: \"AND\", \"OR\", or \"NOT\" to combine terms\n- **authors**: List of author names\n- **journals**: List of journal names\n- **publication_types**: \"Research Article\", \"Review\", \"Meta-Analysis\", etc.\n- **date_from/date_to**: Date range in YYYY/MM/DD format\n- **max_results**: Number of results (1-100, default: 20)\n\n## Analytics & Performance Monitoring\n\nThe NCBI MCP Server includes comprehensive analytics to help you understand your research patterns and optimize performance.\n\n### Analytics Tools\n\n#### `get_analytics_summary`\nGet comprehensive analytics overview\n```\n\"Show me my research analytics summary\"\n```\nReturns:\n- Total requests and uptime\n- Operation breakdown (searches, fetches, etc.)\n- Cache performance metrics\n- Recent activity and error rates\n- System health indicators\n\n#### `get_detailed_metrics`\nDetailed performance metrics for specific time periods\n```\n\"Get detailed metrics for the last 24 hours\"\n```\n- **hours**: Time period to analyze (default: 24)\n- Operation-specific performance data\n- Timeline analysis with hourly breakdowns\n- Error rates and response times per operation\n\n#### `reset_analytics`\nReset analytics data (use with caution)\n```\n\"Reset all analytics data\"\n```\n**Note**: This permanently clears all collected metrics.\n\n### What's Tracked\n\n**Usage Patterns:**\n- Search queries and frequency\n- Most used operations\n- Unique vs. repeated queries\n- Peak usage periods\n\n**Performance Metrics:**\n- Response times for each operation\n- Cache hit/miss rates\n- Error rates and types\n- Rate limiting efficiency\n\n**Research Insights:**\n- Popular search terms and patterns\n- Research workflow analysis\n- Literature access patterns\n- Most accessed journals and topics\n\n## Deployment\n\n### Quick Start\n\n1. **Configure credentials:**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your NCBI email and API key\n   ```\n\n2. **Choose deployment method:**\n   ```bash\n   # Local development\n   ./deploy.sh local\n   \n   # Docker deployment\n   ./deploy.sh docker\n   \n   # Production deployment\n   ./deploy.sh production\n   ```\n\n### Deployment Options\n\n#### 1. Local Development\nPerfect for development and testing:\n```bash\npoetry install\npoetry run python -m src.ncbi_mcp_server.server\n```\n\n#### 2. Docker Deployment\nRecommended for most users with two options:\n\n**Full setup with Redis (recommended):**\n```bash\n# Copy and configure environment\ncp .env.example .env\n# Edit .env with your NCBI email and API key\n\n# Start all services\ndocker-compose up -d\n```\n\n**Simple setup without Redis:**\n```bash\n# For basic usage without Redis dependencies\ncp .env.example .env\n# Edit .env with your NCBI email\n\ndocker-compose -f docker-compose.simple.yml up -d\n```\n\n**Full setup includes:**\n- NCBI MCP Server container\n- Redis cache for performance\n- Redis Commander UI (http://localhost:8081)\n\n**Simple setup includes:**\n- NCBI MCP Server container only\n- In-memory caching (no persistence)\n\n#### 3. Production Deployment\nFor production environments:\n```bash\n# Configure production settings\ncp .env.production .env\n# Edit with production values\n\n# Deploy\n./deploy.sh production\n```\n\n### Monitoring\n\n**Docker logs:**\n```bash\ndocker-compose logs -f ncbi-mcp-server\n```\n\n**Cache monitoring:**\n- Redis Commander: http://localhost:8081\n- Cache stats via MCP tool: `cache_stats()`\n\n**Health checks:**\n```bash\n# Test server health\ncurl http://localhost:8000/health\n\n# Test via MCP\npython -c \"from src.ncbi_mcp_server.server import cache_stats; import asyncio; print(asyncio.run(cache_stats()))\"\n```\n\n## Configuration\n\n### NCBI API Key (Optional but Recommended)\nFor higher rate limits and better performance:\n\n1. **Register at NCBI**: https://www.ncbi.nlm.nih.gov/account/\n2. **Get API key**: https://www.ncbi.nlm.nih.gov/account/settings/\n3. **Add to server code** in `src/ncbi_mcp_server/server.py`:\n\n```python\n# Replace the line: ncbi_client = NCBIClient()\n# With:\nncbi_client = NCBIClient(\n    email=\"your.email@university.edu\",\n    api_key=\"your_api_key_here\"\n)\n```\n\n### Rate Limits\n- **Without API key**: 3 requests/second\n- **With API key**: 10 requests/second  \n- **With API key + email**: Higher limits for bulk requests\n\n## Development Workflow\n\n### Poetry Commands\n```bash\npoetry shell              # Activate virtual environment\npoetry add package        # Add new dependency\npoetry remove package     # Remove dependency\npoetry update            # Update all dependencies\npoetry run python ...    # Run commands in environment\npoetry build             # Create distribution packages\n```\n\n### Code Quality (if you added dev dependencies)\n```bash\npoetry add --group dev black mypy pytest isort flake8\npoetry run black .       # Format code\npoetry run mypy .        # Type checking  \npoetry run pytest       # Run tests\npoetry run isort .       # Sort imports\n```\n\n### Sharing with Colleagues\n```bash\n# They just need:\ngit clone your-repo\ncd ncbi-mcp-server  \npoetry install\n# Everything works identically!\n```\n\n## Field Tags for Advanced Searches\n\nPubMed supports many field tags for precise searching:\n\n- `[ti]` - Title\n- `[tiab]` - Title and Abstract  \n- `[au]` - Author\n- `[mh]` - MeSH Terms\n- `[journal]` - Journal Name\n- `[pdat]` - Publication Date\n- `[pt]` - Publication Type\n- `[lang]` - Language\n- `[sb]` - Subset (e.g., medline, pubmed)\n\n**Example Advanced Queries:**\n```\n\"machine learning\"[ti] AND \"phylogen*\"[tiab] AND \"2020\"[pdat]:\"2024\"[pdat]\nevolutionary[mh] AND computational[ti] AND (genomics[tiab] OR proteomics[tiab])\n\"ancient DNA\"[ti] AND (paleogenomics[mh] OR phylogenomics[tiab])\n```\n\n## Research Workflow Examples\n\n### Literature Review Workflow\n1. **Start broad**: `search_pubmed(\"computational phylogenetics\")`\n2. **Refine with MeSH**: `search_mesh_terms(\"phylogenetics\")` \n3. **Find key papers**: Use publication dates and journal filters\n4. **Explore connections**: `get_related_articles(pmid=\"key_paper_id\")`\n5. **Deep dive**: `get_article_details(pmids=[\"12345\", \"67890\"])`\n\n### Staying Current\n1. **Recent methods**: `search_pubmed(\"new methods\", date_range=\"90\")`\n2. **Follow key authors**: `search_pubmed(\"author_name[au]\", sort=\"pub_date\")`\n3. **Track specific topics**: `advanced_search` with your research keywords\n\n### Method Discovery\n1. **Algorithm papers**: `search_pubmed(\"algorithm[ti] AND your_field\")`\n2. **Software tools**: `search_pubmed(\"software[ti] OR tool[ti] AND bioinformatics\")`\n3. **Benchmarking**: `search_pubmed(\"comparison[ti] OR benchmark[ti]\")`\n\n## Troubleshooting\n\n### Common Issues\n\n**Server won't start:**\n- Check Python version (3.8+ required)\n- Install dependencies: `pip install -r requirements.txt`\n- Verify file permissions\n\n**No search results:**\n- Check query syntax (use proper field tags)\n- Try broader search terms\n- Verify internet connection\n\n**Rate limit errors:**\n- Add delays between requests\n- Get NCBI API key for higher limits\n- Consider searching fewer results per query\n\n**XML parsing errors:**\n- Usually temporary NCBI server issues\n- Retry after a few seconds\n- Check NCBI status: https://www.ncbi.nlm.nih.gov/\n\n### Getting Help\n\n- **NCBI E-utilities documentation**: https://www.ncbi.nlm.nih.gov/books/NBK25499/\n- **PubMed search tips**: https://pubmed.ncbi.nlm.nih.gov/help/\n- **MeSH database**: https://www.ncbi.nlm.nih.gov/mesh/\n\n## Contributing\n\nThis MCP server is designed to grow with the research community. Ideas for enhancement:\n\n- **Additional databases**: PMC, BioRxiv, databases beyond NCBI\n- **Citation analysis**: Track paper impact and citation networks  \n- **Export formats**: BibTeX, EndNote, RIS for reference managers\n- **Saved searches**: Persistent search profiles and alerts\n- **Full-text integration**: When available through PMC\n\n## License\n\nThis project is open source. Feel free to modify and distribute according to your institution's policies.\n\n---\n\n**Perfect for researchers in:**\n- Evolutionary Biology & Phylogenetics\n- Computational Biology & Bioinformatics  \n- Molecular Evolution & Population Genetics\n- Comparative Genomics & Proteomics\n- Systems Biology & Network Analysis\n- Biostatistics & Mathematical Biology\n- Ancient DNA & Paleogenomics\n- Conservation Genetics & Ecology\n\nStart exploring the vast world of biological literature with powerful, precise searches!",
  "category": null,
  "qualityScore": 68,
  "githubUrl": "https://github.com/vitorpavinato/ncbi-mcp-server",
  "programmingLanguage": "Python",
  "gitHubOrg": "vitorpavinato",
  "gitHubRepo": "ncbi-mcp-server",
  "repositoryPath": null,
  "gh_stars": 1,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "7cf3817ba06f21a234479fb085e6245a05da761b",
  "last_scraped_at": "2025-07-31T20:48:58.202Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}