{
  "name": "adls",
  "slug": "erikhoward__adls-mcp-server",
  "description": "Microsoft Azure Data Lake Storage MCP Server",
  "readme": "# ADLS2 MCP Server üöÄ\n\nA Model Context Protocol (MCP) server implementation for Azure Data Lake Storage Gen2. This service provides a standardized interface for interacting with ADLS2 storage, enabling file operations through MCP tools.\n\n[![License](https://img.shields.io/github/license/erikhoward/adls-mcp-server)](https://opensource.org/licenses/MIT) [![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/) [![uv](https://img.shields.io/badge/uv-package%20manager-blueviolet)](https://docs.astral.sh/uv/) [![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://github.com/modelcontextprotocol/spec)\n\n## Setup üõ†Ô∏è\n\n### Installation üì¶\n\nRequires Python 3.13 or higher.\n\nInstall the package using `uv`:\n\n```bash\nuv pip install adls2-mcp-server\n```\n\n### MCP Configuration ‚öôÔ∏è\n\n### Claude Desktop Configuration\n\n1 - Edit Claude Desktop Configuration:\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"adls2-mcp-server\",\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\nThe following is a table of available environment configuration variables:\n\n| Variable | Description | Default |\n| --- | --- | --- |\n| `LOG_LEVEL` | Logging level | `INFO` |\n| `UPLOAD_ROOT` | Root directory for file uploads | `./uploads` |\n| `DOWNLOAD_ROOT` | Root directory for file downloads | `./downloads` |\n| `AZURE_STORAGE_ACCOUNT_NAME` | Azure ADLS2 storage account name | `None` |\n| `AZURE_STORAGE_ACCOUNT_KEY` | Azure ADLS2 storage account key (optional) | `None` |\n| `READ_ONLY_MODE` | Whether the server should operate in read-only mode | `true` |\n\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n2 - Restart Claude Desktop.\n\n### Available Tools üîß\n\n#### Filesystem (container) Operations\n\n- `list_filesystems` - List all filesystems in the storage account\n- `create_filesystem` - Create a new filesystem\n- `delete_filesystem` - Delete an existing filesystem\n\n#### File Operations\n\n- `upload_file` - Upload a file to ADLS2\n- `download_file` - Download a file from ADLS2\n- `file_exists` - Check if a file exists\n- `rename_file` - Rename/move a file\n- `get_file_properties` - Get file properties\n- `get_file_metadata` - Get file metadata\n- `set_file_metadata` - Set file metadata\n- `set_file_metadata_json` - Set multiple metadata key-value pairs using JSON\n\n#### Directory Operations\n\n- `create_directory` - Create a new directory\n- `delete_directory` - Delete a directory\n- `rename_directory` - Rename/move a directory\n- `directory_exists` - Check if a directory exists\n- `directory_get_paths` - Get all paths under the specified directory\n\n## Development üíª\n\n### Local Development Setup\n\n1 - Clone the repository:\n\n```bash\ngit clone https://github.com/erikhoward/adls2-mcp-server.git\ncd adls2-mcp-server\n```\n\n2 - Create and activate virtual environment:\n\nLinux/macOS:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nWindows:\n\n```bash\n.venv\\Scripts\\activate\n```\n\n3 - Install dependencies:\n\n```bash\npip install -e \".[dev]\"\n```\n\n4 - Copy and configure environment variables:\n\n```bash\ncp .env.example .env\n```\n\nEdit .env with your settings.\n\n```bash\nAZURE_STORAGE_ACCOUNT_NAME=your_azure_adls2_storage_account_name\nAZURE_STORAGE_ACCOUNT_KEY=your_azure_adls2_storage_key (optional)\nDOWNLOAD_ROOT=/path/to/download/folder\nUPLOAD_ROOT=/path/to/upload/folder\nREAD_ONLY_MODE=True\nLOG_LEVEL=INFO\n```\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n5 - Claude Desktop Configuration\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/adls2-mcp-server/repo\",\n                \"run\",\n                \"adls2-mcp-server\"\n            ],\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\n6 - Restart Claude Desktop.\n\n## Contributions ü§ù\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m '‚ú® Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License ‚öñÔ∏è\n\nLicensed under MIT - see [LICENSE.md](LICENSE) file.\n\n**This is not an official Microsoft product.**\n",
  "category": null,
  "qualityScore": 80,
  "githubUrl": "https://github.com/erikhoward/adls-mcp-server",
  "programmingLanguage": "Python",
  "gitHubOrg": "erikhoward",
  "gitHubRepo": "adls-mcp-server",
  "repositoryPath": null,
  "gh_stars": 4,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "6bec230a039f5bafc6c5be1a7bfd961aed91a83c",
  "last_scraped_at": "2025-08-01T13:16:25.233Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}