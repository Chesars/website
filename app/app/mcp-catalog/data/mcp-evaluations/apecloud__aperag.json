{
  "name": "ApeRAG",
  "slug": "apecloud__aperag",
  "description": "ApeRAG: Best choice for building your own Knowledge Graph and for Context Engineering",
  "readme": "# ApeRAG\n\n![HarryPotterKG.png](docs%2Fimages%2FHarryPotterKG.png)\n\nApeRAG is a production-ready RAG (Retrieval-Augmented Generation) platform that combines Graph RAG, vector search, and full-text search. Build sophisticated AI applications with hybrid retrieval, multimodal document processing, and enterprise-grade management features.\n\nApeRAG is the best choice for building your own Knowledge Graph and for Context Engineering.\n\n[阅读中文文档](README-zh.md)\n\n- [Quick Start](#quick-start)\n- [Key Features](#key-features)\n- [Kubernetes Deployment (Recommended for Production)](#kubernetes-deployment-recommended-for-production)\n- [Development](./docs/development-guide.md)\n- [Build Docker Image](./docs/build-docker-image.md)\n- [Acknowledgments](#acknowledgments)\n- [License](#license)\n\n## Quick Start\n\n> Before installing ApeRAG, make sure your machine meets the following minimum system requirements:\n>\n> - CPU >= 2 Core\n> - RAM >= 4 GiB\n> - Docker & Docker Compose\n\nThe easiest way to start ApeRAG is through Docker Compose. Before running the following commands, make sure that [Docker](https://docs.docker.com/get-docker/) and [Docker Compose](https://docs.docker.com/compose/install/) are installed on your machine:\n\n```bash\ngit clone https://github.com/apecloud/ApeRAG.git\ncd ApeRAG\ncp envs/env.template .env\ncp frontend/deploy/env.local.template frontend/.env\ndocker-compose up -d --pull always\n```\n\nAfter running, you can access ApeRAG in your browser at:\n- **Web Interface**: http://localhost:3000/web/\n- **API Documentation**: http://localhost:8000/docs\n\n#### MCP (Model Context Protocol) Support\n\nApeRAG supports [MCP (Model Context Protocol)](https://modelcontextprotocol.io/) integration, allowing AI assistants to interact with your knowledge base directly. After starting the services, configure your MCP client with:\n\n```json\n{\n  \"mcpServers\": {\n    \"aperag-mcp\": {\n      \"url\": \"http://localhost:8000/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n**Important**: Replace `http://localhost:8000` with your actual ApeRAG API URL and `your-api-key-here` with a valid API key from your ApeRAG settings.\n\nThe MCP server provides:\n- **Collection browsing**: List and explore your knowledge collections\n- **Hybrid search**: Search using vector, full-text, and graph methods\n- **Intelligent querying**: Ask natural language questions about your documents\n\n#### Enhanced Document Parsing\n\nFor enhanced document parsing capabilities, ApeRAG supports an **advanced document parsing service** powered by MinerU, which provides superior parsing for complex documents, tables, and formulas. \n\n<details>\n<summary><strong>Enhanced Document Parsing Commands</strong></summary>\n\n```bash\n# Enable advanced document parsing service\nDOCRAY_HOST=http://aperag-docray:8639 docker compose --profile docray up -d\n\n# Enable advanced parsing with GPU acceleration \nDOCRAY_HOST=http://aperag-docray-gpu:8639 docker compose --profile docray-gpu up -d\n```\n\nOr use the Makefile shortcuts (requires [GNU Make](https://www.gnu.org/software/make/)):\n```bash\n# Enable advanced document parsing service\nmake compose-up WITH_DOCRAY=1\n\n# Enable advanced parsing with GPU acceleration (recommended)\nmake compose-up WITH_DOCRAY=1 WITH_GPU=1\n```\n\n</details>\n\n#### Development & Contributing\n\nFor developers interested in source code development, advanced configurations, or contributing to ApeRAG, please refer to our [Development Guide](./docs/development-guide.md) for detailed setup instructions.\n\n## Key Features\n\n**1. Hybrid Retrieval Engine**:\nCombines Graph RAG, vector search, and full-text search for comprehensive document understanding and retrieval.\n\n**2. Graph RAG with LightRAG**:\nEnhanced version of LightRAG for advanced graph-based knowledge extraction, enabling deep relational and contextual queries.\n\n**3. MinerU Integration**:\nAdvanced document parsing service powered by MinerU technology, providing superior parsing for complex documents, tables, formulas, and scientific content with optional GPU acceleration.\n\n**4. Production-Grade Deployment**:\nFull Kubernetes support with Helm charts and KubeBlocks integration for simplified deployment of production-grade databases (PostgreSQL, Redis, Qdrant, Elasticsearch, Neo4j).\n\n**5. Multimodal Document Processing**:\nSupports various document formats (PDF, DOCX, etc.) with intelligent content extraction and structure recognition.\n\n**6. Enterprise Management**:\nBuilt-in audit logging, LLM model management, graph visualization, and comprehensive document management interface.\n\n**7. MCP Integration**:\nFull support for Model Context Protocol (MCP), enabling seamless integration with AI assistants and tools for direct knowledge base access and intelligent querying.\n\n**8. Developer Friendly**:\nFastAPI backend, React frontend, async task processing with Celery, extensive testing, and comprehensive development guides for easy contribution and customization.\n\n## Kubernetes Deployment (Recommended for Production)\n\n> **Enterprise-grade deployment with high availability and scalability**\n\nDeploy ApeRAG to Kubernetes using our provided Helm chart. This approach offers high availability, scalability, and production-grade management capabilities.\n\n### Prerequisites\n\n*   [Kubernetes cluster](https://kubernetes.io/docs/setup/) (v1.20+)\n*   [`kubectl`](https://kubernetes.io/docs/tasks/tools/) configured and connected to your cluster\n*   [Helm v3+](https://helm.sh/docs/intro/install/) installed\n\n### Clone the Repository\n\nFirst, clone the ApeRAG repository to get the deployment files:\n\n```bash\ngit clone https://github.com/apecloud/ApeRAG.git\ncd ApeRAG\n```\n\n### Step 1: Deploy Database Services\n\nApeRAG requires PostgreSQL, Redis, Qdrant, and Elasticsearch. You have two options:\n\n**Option A: Use existing databases** - If you already have these databases running in your cluster, edit `deploy/aperag/values.yaml` to configure your database connection details, then skip to Step 2.\n\n**Option B: Deploy databases with KubeBlocks** - Use our automated database deployment (database connections are pre-configured):\n\n```bash\n# Navigate to database deployment scripts\ncd deploy/databases/\n\n# (Optional) Review configuration - defaults work for most cases\n# edit 00-config.sh\n\n# Install KubeBlocks and deploy databases\nbash ./01-prepare.sh          # Installs KubeBlocks\nbash ./02-install-database.sh # Deploys PostgreSQL, Redis, Qdrant, Elasticsearch\n\n# Monitor database deployment\nkubectl get pods -n default\n\n# Return to project root for Step 2\ncd ../../\n```\n\nWait for all database pods to be in `Running` status before proceeding.\n\n### Step 2: Deploy ApeRAG Application\n\n```bash\n# If you deployed databases with KubeBlocks in Step 1, database connections are pre-configured\n# If you're using existing databases, edit deploy/aperag/values.yaml with your connection details\n\n# Deploy ApeRAG\nhelm install aperag ./deploy/aperag --namespace default --create-namespace\n\n# Monitor ApeRAG deployment\nkubectl get pods -n default -l app.kubernetes.io/instance=aperag\n```\n\n### Configuration Options\n\n**Resource Requirements**: By default, includes [`doc-ray`](https://github.com/apecloud/doc-ray) service (requires 4+ CPU cores, 8GB+ RAM). To disable: set `docray.enabled: false` in `values.yaml`.\n\n**Advanced Settings**: Review `values.yaml` for additional configuration options including images, resources, and Ingress settings.\n\n### Access Your Deployment\n\nOnce deployed, access ApeRAG using port forwarding:\n\n```bash\n# Forward ports for quick access\nkubectl port-forward svc/aperag-frontend 3000:3000 -n default\nkubectl port-forward svc/aperag-api 8000:8000 -n default\n\n# Access in browser\n# Web Interface: http://localhost:3000\n# API Documentation: http://localhost:8000/docs\n```\n\nFor production environments, configure Ingress in `values.yaml` for external access.\n\n### Troubleshooting\n\n**Database Issues**: See `deploy/databases/README.md` for KubeBlocks management, credentials, and uninstall procedures.\n\n**Pod Status**: Check pod logs for any deployment issues:\n```bash\nkubectl logs -f deployment/aperag-api -n default\nkubectl logs -f deployment/aperag-frontend -n default\n```\n\n## Acknowledgments\n\nApeRAG integrates and builds upon several excellent open-source projects:\n\n### LightRAG\nThe graph-based knowledge retrieval capabilities in ApeRAG are powered by a deeply modified version of [LightRAG](https://github.com/HKUDS/LightRAG):\n- **Paper**: \"LightRAG: Simple and Fast Retrieval-Augmented Generation\" ([arXiv:2410.05779](https://arxiv.org/abs/2410.05779))\n- **Authors**: Zirui Guo, Lianghao Xia, Yanhua Yu, Tu Ao, Chao Huang\n- **License**: MIT License\n\nWe have extensively modified LightRAG to support production-grade concurrent processing, distributed task queues (Celery/Prefect), and stateless operations. See our [LightRAG modifications changelog](./aperag/graph/changelog.md) for details.\n\n## License\n\nApeRAG is licensed under the Apache License 2.0. See the [LICENSE](./LICENSE) file for details.",
  "category": null,
  "qualityScore": 88,
  "githubUrl": "https://github.com/apecloud/ApeRAG",
  "programmingLanguage": "Python",
  "gitHubOrg": "apecloud",
  "gitHubRepo": "ApeRAG",
  "repositoryPath": null,
  "gh_stars": 57,
  "gh_contributors": 17,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "485a8f56886130a861fdf631414a93ffea796f4b",
  "last_scraped_at": "2025-07-31T20:48:52.410Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}