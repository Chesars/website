{
  "name": "jupiter",
  "slug": "kukapay__jupiter-mcp",
  "description": "An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.",
  "readme": "# Jupiter MCP Server\n\nAn MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API. \n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- Fetch swap orders from Jupiter's Ultra API, combining DEX routing and RFQ (Request for Quote) for optimal pricing.\n- Execute swaps via Jupiter's Ultra API, handling slippage, priority fees, and transaction landing.\n\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher (for native `fetch` support).\n- **Solana Wallet**: A private key (base58-encoded) for signing transactions.\n- **RPC Endpoint**: Access to a Solana RPC node (e.g., `https://api.mainnet-beta.solana.com`).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/jupiter-mcp.git\n   cd jupiter-mcp\n   ```\n\n2. **Install Dependencies**:\n   Ensure you have the MCP Server package installed along with other required dependencies:\n   ```bash\n   npm install\n   ```\n\n3. **Client Configuration**:\n\n```json\n{\n  \"mcpServers\": {\n    \"Jupiter-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/jupiter-mcp/server/index.js\"],\n      \"env\": {\n        \"SOLANA_RPC_URL\": \"solana rpc url you can access\",\n        \"PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### Ultra API Tools\n- **`get-ultra-order`**:\n  - **Description**: Fetches a swap order from Jupiter's Ultra API, leveraging both DEX routing and RFQ for optimal pricing.\n  - **Inputs**: \n    - `inputMint`: Input token mint address (e.g., SOL or token pubkey).\n    - `outputMint`: Output token mint address (e.g., USDC or token pubkey).\n    - `amount`: Input amount as a string (e.g., \"1.23\").\n    - `slippageBps`: Slippage tolerance in basis points (e.g., 50 for 0.5%). \n  - **Output**: JSON with `requestId`, `transaction` (base64-encoded), `inputMint`, `outputMint`, `inAmount`, `outAmount`, `price`.\n\n- **`execute-ultra-order`**:\n  - **Description**: Requests Jupiter to execute the swap transaction on behalf of the wallet owner, handling slippage, priority fees, and transaction landing.\n  - **Inputs**: \n    - `requestId`: Unique identifier from `get-ultra-order`.\n    - `transaction`: Base64-encoded transaction from `get-ultra-order`.\n  - **Output**: JSON with `status`, `transactionId`, `slot`, `inputAmountResult`, `outputAmountResult`, `swapEvents`.\n\n## Example Interaction\n\nBelow are examples of interacting with the server using natural language prompts and expected responses:\n\n### Fetching a Swap Order\n- **Prompt**: \"Get a swap order to trade 1.23 SOL for USDC.\"\n- **Input**: \n  - Tool: `get-ultra-order`\n  - Arguments: \n    - `inputMint`: \"So11111111111111111111111111111111111111112\" (SOL)\n    - `outputMint`: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" (USDC)\n    - `amount`: \"1.23\"\n    - `slippageBps`: 50\n- **Response**:\n  ```\n  {\n    \"requestId\": \"a770110b-82c9-46c8-ba61-09d955b27503\",\n    \"transaction\": \"AQAAAA...base64-encoded-transaction...==\",\n    \"inputMint\": \"So11111111111111111111111111111111111111112\",\n    \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"inAmount\": \"1230000000\",\n    \"outAmount\": \"19950000\",\n    \"price\": 0.01621951219512195\n  }\n  ```\n\n### Executing a Swap\n- **Prompt**: \"Execute the swap order with request ID 'a770110b-82c9-46c8-ba61-09d955b27503' using the transaction provided.\"\n- **Input**: \n  - Tool: `execute-ultra-order`\n  - Arguments: \n    - `requestId`: \"a770110b-82c9-46c8-ba61-09d955b27503\"\n    - `transaction`: \"AQAAAA...base64-encoded-transaction...==\"\n- **Response**:\n  ```\n  {\n    \"status\": \"Success\",\n    \"transactionId\": \"5x...solana-transaction-signature...\",\n    \"slot\": 299283763,\n    \"inputAmountResult\": \"1230000000\",\n    \"outputAmountResult\": \"19950000\",\n    \"swapEvents\": [\n      {\n        \"type\": \"swap\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"inAmount\": \"1230000000\",\n        \"outAmount\": \"19950000\"\n      }\n    ]\n  }\n  ```\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n\n",
  "category": null,
  "qualityScore": 70,
  "githubUrl": "https://github.com/kukapay/jupiter-mcp",
  "programmingLanguage": "JavaScript",
  "gitHubOrg": "kukapay",
  "gitHubRepo": "jupiter-mcp",
  "repositoryPath": null,
  "gh_stars": 19,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "13643a3fb8966a9f3538bb5e20671a73bc1065d0",
  "last_scraped_at": "2025-07-31T20:48:49.394Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}