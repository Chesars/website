{
  "name": "mcp",
  "slug": "twelvedata__mcp",
  "description": "Twelve Data MCP (Model Context Protocol) Server provides seamless, real-time access to financial market data via WebSocket, enabling reliable streaming of price quotes, market metrics, and events directly into your applications.",
  "readme": "\n# Twelve Data MCP Server\n\n## Overview\n\nThe Twelve Data MCP Server provides a seamless integration with the Twelve Data API to access financial market data. It enables retrieval of historical time series, real-time quotes, and instrument metadata for stocks, forex pairs, and cryptocurrencies.\n\n> Note: This server is currently in early-stage development; features and tools may evolve alongside updates to the Twelve Data API.\n\n## Obtaining Your API Key\n\nTo use Twelve Data MCP Server, you must first obtain an API key from Twelve Data:\n\n1. Visit [Twelve Data Sign Up](https://twelvedata.com/register?utm_source=github&utm_medium=repository&utm_campaign=mcp_repo).\n2. Create an account or log in if you already have one.\n3. Navigate to your Dashboard and copy your API key.\n\nImportant: Access to specific endpoints or markets may vary depending on your Twelve Data subscription plan.\n\n## U-tool\nu-tool is an AI-powered universal router for the Twelve Data API that transforms how you access financial data. Instead of navigating 100+ individual endpoints and complex documentation, simply describe what you need in plain English.\n\nHow it works:\nüß† Natural Language Processing: Understands your request in conversational English\nüîç Smart Routing: Uses vector search to find the most relevant endpoints from Twelve Data's entire API catalog\nüéØ Intelligent Selection: Leverages OpenAI GPT-4o to choose the optimal method and generate correct parameters\n‚ö° Automatic Execution: Calls the appropriate endpoint and returns formatted results\n\nWhat you can ask:\nüìà \"Show me Apple stock performance this week\"\nüìä \"Calculate RSI for Bitcoin with 14-day period\" \nüí∞ \"Get Tesla's financial ratios and balance sheet\"\nüåç \"Compare EUR/USD exchange rates over 6 months\"\nüè¶ \"Find top-performing tech ETFs\"\n\nSupported data categories:\n- Market data & quotes ‚Ä¢ Technical indicators (100+)\n- Fundamental data & financials ‚Ä¢ Currencies & crypto\n- Mutual funds & ETFs ‚Ä¢ Economic calendars & events\n\nOne tool, entire Twelve Data ecosystem. No API documentation required.\n\n## Installation\n\n### Using **UV** (recommended)\n\nDirectly run without local installation using [`uvx`](https://docs.astral.sh/uv/guides/tools/):\n\n```bash\nuvx mcp-server-twelve-data --help\n```\n\n### Using **pip**\n\nInstall the server via pip:\n\n```bash\npip install mcp-server-twelve-data\npython -m mcp_server_twelve_data --help\n```\n\n## Configuration\n\n### Claude Desktop integration\n\nAdd one of the following snippets to your `claude_desktop_config.json`:\n(1) local stdio server configured with utool\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-u\", \"YOUR_OPEN_AI_APIKEY\"]\n    }\n  }\n}\n```\n\n(2) local stdio server only with 10 the most popular endpoints\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-n\", \"10\"]\n    }\n  }\n}\n```\n\n(3) twelve data remote mcp server\n\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata-remote\": {\n      \"command\": \"npx\",\n      \"args\":    [\n        \"mcp-remote\", \"https://mcp.twelvedata.com/mcp\",\n        \"--header\",\n        \"Authorization:${AUTH_HEADER}\",\n        \"--header\",\n        \"X-OpenAPI-Key:${OPENAI_API_KEY}\"\n      ],\n      \"env\": {\n        \"AUTH_HEADER\": \"apikey YOUR_TWELVE_DATA_API_KEY\",\n        \"OPENAI_API_KEY\": \"YOUR_OPENAI_API_KEY\"\n      }\n    }\n  }\n}\n```\n\nSee how easy it is to connect Claude Desktop to Twelve Data MCP Server:\n\n![Example usage with Claude Desktop](./example.gif)\n\n### VS Code integration\n\n#### Automatic setup (with UV)\n\n[![Install with UV in VS Code](https://img.shields.io/badge/VS_Code-UV-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=twelvedata&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22mcp-server-twelve-data%22%2C%22-k%22%2C%22YOUR_TWELVE_DATA_API_KEY%22%2C%22-u%22%2C%22YOUR_OPENAI_API_KEY%22%5D%7D)\n\n#### Manual setup\n\nFor manual configuration, add to your **User Settings (JSON)**:\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"twelvedata\": {\n          \"command\": \"uvx\",\n          \"args\": [\n            \"mcp-server-twelve-data\",\n            \"-k\", \"YOUR_TWELVE_DATA_API_KEY\",\n            \"-u\", \"YOUR_OPENAI_API_KEY\"\n          ]\n        }\n    }\n  }\n}\n```\n\n## Debugging\n\nUse the MCP Inspector for troubleshooting:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-twelve-data@latest -k YOUR_TWELVE_DATA_API_KEY\n```\n\n## Development guide\n\n1. **Local testing:** Utilize the MCP Inspector as described in **Debugging**.\n2. **Claude Desktop:**: Update `claude_desktop_config.json` to reference local source paths.\n\n## Docker usage\n\nBuild and run the server using Docker:\n\n```bash\ndocker build -t mcp-server-twelve-data .\n\ndocker run --rm mcp-server-twelve-data \\\n  -k YOUR_TWELVE_DATA_API_KEY \\\n  -u YOUR_OPENAI_API_KEY \\\n  -t streamable-http\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](../../LICENSE) file for details.\n",
  "category": null,
  "qualityScore": 72,
  "githubUrl": "https://github.com/twelvedata/mcp",
  "programmingLanguage": "Python",
  "gitHubOrg": "twelvedata",
  "gitHubRepo": "mcp",
  "repositoryPath": null,
  "gh_stars": 18,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "a74555c37c6954185d19df2a83bb66e826cd13a8",
  "last_scraped_at": "2025-07-31T20:48:50.782Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}