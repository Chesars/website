{
  "name": "opgg",
  "slug": "opgginc__opgg-mcp",
  "description": "MCP server from opgginc/opgg-mcp",
  "readme": "# OP.GG MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@opgginc/opgg-mcp)](https://smithery.ai/server/@opgginc/opgg-mcp)\n\nThe OP.GG MCP Server is a Model Context Protocol implementation that seamlessly connects OP.GG data with AI agents and platforms. This server enables AI agents to retrieve various OP.GG data via function calling.\n\n![opgg-mcp-lol-leaderboard](https://github.com/user-attachments/assets/e89a77e7-0b83-4e20-a660-b16aa2d03fe2)\n![opgg-mcp-esports](https://github.com/user-attachments/assets/4e134577-57b6-4369-bb71-b72f1bebcdd8)\n\n## Overview\n\nThis MCP server provides AI agents with access to OP.GG data through a standardized interface. It offers a simple way to connect to our remote server (https://mcp-api.op.gg/mcp), allowing for easy installation and immediate access to OP.GG data in a format that's easily consumable by AI models and agent frameworks.\n\n## Features\n\nThe OP.GG MCP Server currently supports the following tools:\n\n### League of Legends\n- **lol-champion-leader-board**: Get ranking board data for League of Legends champions.\n- **lol-champion-analysis**: Provides analysis data for League of Legends champions (counter and ban/pick data available in the \"weakCounters\" field).\n- **lol-champion-meta-data**: Retrieves meta data for a specific champion, including statistics and performance metrics.\n- **lol-champion-skin-sale**: Retrieves information about champion skins that are currently on sale.\n- **lol-summoner-search**: Search for League of Legends summoner information and stats.\n- **lol-champion-positions-data**: Retrieves position statistics data for League of Legends champions, including win rates and pick rates by position.\n- **lol-summoner-game-history**: Retrieve recent game history for a League of Legends summoner.\n- **lol-summoner-renewal**: Refresh and update League of Legends summoner match history and stats.\n\n### Esports (League of Legends)\n- **esports-lol-schedules**: Get upcoming LoL match schedules.\n- **esports-lol-team-standings**: Get team standings for a LoL league.\n\n### Teamfight Tactics (TFT)\n- **tft-meta-trend-deck-list**: TFT deck list tool for retrieving current meta decks.\n- **tft-meta-item-combinations**: TFT tool for retrieving information about item combinations and recipes.\n- **tft-champion-item-build**: TFT tool for retrieving champion item build information.\n- **tft-recommend-champion-for-item**: TFT tool for retrieving champion recommendations for a specific item.\n- **tft-play-style-comment**: This tool provides comments on the playstyle of TFT champions.\n\n### Valorant\n- **valorant-meta-maps**: Valorant map meta data.\n- **valorant-meta-characters**: Valorant character meta data.\n- **valorant-leaderboard**: Fetch Valorant leaderboard by region.\n- **valorant-agents-composition-with-map**: Retrieve agent composition data for a Valorant map.\n- **valorant-characters-statistics**: Retrieve character statistics data for Valorant, optionally filtered by map.\n- **valorant-player-match-history**: Retrieve match history for a Valorant player using their game name and tag line.\n\n## Usage\n\nThe OP.GG MCP Server can be used with any MCP-compatible client. The following content explains installation methods using Claude Desktop as an example.\n\n### Direct Connection via StreamableHttp\n\nIf you want to connect directly to our StreamableHttp endpoint, you can use the `supergateway` package. This provides a simple way to connect to our remote server without having to install the full OP.GG MCP Server.\n\nAdd the following to your `claude_desktop_config.json` file:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"supergateway\",\n        \"--streamableHttp\",\n        \"https://mcp-api.op.gg/mcp\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"supergateway\",\n        \"--streamableHttp\",\n        \"https://mcp-api.op.gg/mcp\"\n      ]\n    }\n  }\n}\n```\n\nThis configuration will use the `supergateway` package to establish a direct connection to our StreamableHttp endpoint, providing you with immediate access to all OP.GG data tools.\n\n### Installing via Smithery\n\nTo install OP.GG MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@opgginc/opgg-mcp):\n\n```bash\n$ npx -y @smithery/cli@latest install @opgginc/opgg-mcp --client claude --key {SMITHERY_API_KEY}\n```\n\n### Adding to MCP Configuration\n\nTo add this server to your Claude Desktop MCP configuration, add the following entry to your `claude_desktop_config.json` file:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@opgginc/opgg-mcp\",\n        \"--key\",\n        \"{SMITHERY_API_KEY}\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@opgginc/opgg-mcp\",\n        \"--key\",\n        \"{SMITHERY_API_KEY}\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding the configuration, restart Claude Desktop for the changes to take effect.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Related Links\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [OP.GG](https://op.gg)\n",
  "category": null,
  "qualityScore": 77,
  "githubUrl": "https://github.com/opgginc/opgg-mcp",
  "programmingLanguage": "TypeScript",
  "gitHubOrg": "opgginc",
  "gitHubRepo": "opgg-mcp",
  "repositoryPath": null,
  "gh_stars": 25,
  "gh_contributors": 3,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "78b9a74e2351e5f52dfc89f171e7d4d86daa672b",
  "last_scraped_at": "2025-07-31T20:48:50.797Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}