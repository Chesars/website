{
  "name": "bruno",
  "slug": "hungthai1401__bruno-mcp",
  "description": "MCP Server for running Bruno Collections",
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/hungthai1401-bruno-mcp-badge.png)](https://mseep.ai/app/hungthai1401-bruno-mcp)\n\n# Bruno MCP Server\n<a href=\"https://glama.ai/mcp/servers/@hungthai1401/bruno-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@hungthai1401/bruno-mcp/badge\" alt=\"Bruno MCP server\" />\n</a>\n\n[![smithery badge](https://smithery.ai/badge/@hungthai1401/bruno-mcp)](https://smithery.ai/server/@hungthai1401/bruno-mcp)\n\nAn MCP (Model Context Protocol) server that enables running Bruno collections. This server allows LLMs to execute API tests using Bruno and get detailed results through a standardized interface.\n\n## Features\n\n* Run Bruno collections using the Bruno CLI\n* Support for environment files\n* Support for environment variables\n* Detailed test results including:\n  * Overall success/failure status\n  * Test summary (total, passed, failed)\n  * Detailed failure information\n  * Execution timings\n\n## Installation\n\n### Installing via Smithery\n\nTo install Bruno MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@hungthai1401/bruno-mcp):\n\n```bash\nnpx -y @smithery/cli install @hungthai1401/bruno-mcp --client claude\n```\n\n### Manual Installation\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Configuration\n\nAdd the server to your Claude desktop configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"bruno-runner\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"bruno-mcp\"],\n    }\n  }\n}\n```\n\n## Available Tools\n\n### run-collection\n\nRuns a Bruno collection and returns the test results.\n\n**Parameters:**\n\n* `collection` (required): Path to the Bruno collection\n* `environment` (optional): Path to environment file\n* `variables` (optional): Environment variables as key-value pairs\n\n**Example Response:**\n\n```json\n{\n  \"success\": true,\n  \"summary\": {\n    \"total\": 5,\n    \"failed\": 0,\n    \"passed\": 5\n  },\n  \"failures\": [],\n  \"timings\": {\n    \"started\": \"2024-03-14T10:00:00.000Z\",\n    \"completed\": \"2024-03-14T10:00:01.000Z\",\n    \"duration\": 1000\n  }\n}\n```\n\n### Example Usage in Claude\n\nYou can use the server in Claude by asking it to run a Bruno collection:\n\n\"Run the Bruno collection at /path/to/collection.bru and tell me if all tests passed\"\n\nClaude will:\n1. Use the run-collection tool\n2. Analyze the test results\n3. Provide a human-friendly summary of the execution\n\n## Development\n\n### Project Structure\n\n```\nsrc/\n  ├── index.ts           # Entry point\n  ├── server.ts          # MCP Server implementation\n  ├── runner.ts          # Bruno runner implementation\n  └── types.ts           # Type definitions\n```\n\n### Running Tests\n\n```bash\n# Run tests\nnpm test\n\n# Run tests with coverage\nnpm test:coverage\n```\n\n### Building\n\n```bash\n# Build the project\nnpm run build\n\n# Clean build artifacts\nnpm run clean\n```\n\n## License\n\nMIT ",
  "category": null,
  "qualityScore": 74,
  "githubUrl": "https://github.com/hungthai1401/bruno-mcp",
  "programmingLanguage": "JavaScript",
  "gitHubOrg": "hungthai1401",
  "gitHubRepo": "bruno-mcp",
  "repositoryPath": null,
  "gh_stars": 25,
  "gh_contributors": 4,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "397efc44af6f53559971e6545d312dd1ed369e43",
  "last_scraped_at": "2025-07-29T19:16:46.128Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}