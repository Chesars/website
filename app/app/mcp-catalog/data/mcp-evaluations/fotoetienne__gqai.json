{
  "name": "gqai",
  "slug": "fotoetienne__gqai",
  "description": "Turn any GraphQL endpoint into a set of MCP tools",
  "readme": "# gqai\n*graphql ‚Üí ai*\n\n**gqai** is a lightweight proxy that exposes GraphQL operations as\n[Model Context Protocol (MCP)](https://platform.openai.com/docs/guides/function-calling) tools for AI like\nClaude, Cursor, and ChatGPT.  \nDefine tools using regular GraphQL queries/mutations against your GraphQL backend, and gqai automatically\ngenerates an MCP server for you.\n\nüîå Powered by your GraphQL backend  \n‚öôÔ∏è Driven by `.graphqlrc.yml` + plain `.graphql` files  \n\n---\n\n## ‚ú® Features\n\n- üß∞ Define tools using GraphQL operations\n- üóÇ Automatically discover operations from `.graphqlrc.yml`\n- üßæ Tool metadata compatible with OpenAI function calling / MCP\n\n---\n\n## üõ†Ô∏è Installation\n\n```bash\ngo install github.com/fotoetienne/gqai@latest\n```\n\n\n## üöÄ Quick Start\n1. Create a .graphqlrc.yml:\n\n```yaml\nschema: https://graphql.org/graphql/\ndocuments: .\n```\n\nThis file tells gqai where to find your GraphQL schema and operations.\n\n*Note: The `schema` parameter tells gqai where to execute the operations. This must be a live server rather than a static schema file*\n\n2. Add a GraphQL operation\n\n`get_all_films.graphql`:\n```graphql\n# Get all Star Wars films\nquery get_all_films {\n  allFilms {\n    films {\n      title\n      episodeID\n    }\n  }\n}\n```\n\n3. Add gqai to your `mcp.json` file:\n\n```\n  \"gqai\": {\n    \"command\": \"gqai\",\n    \"args\": [\n      \"run\",\n      \"--config\"\n      \".graphqlrc.yml\"\n    ]\n  }\n```\n\nThat's it! Your AI model can now call the `get_all_films` tool.\n\n## Usage\n### Configuration\n#### GraphQL Config\nThe [graphql config](https://the-guild.dev/graphql/config/docs/user/schema)\nfile is a YAML file that defines the GraphQL endpoint and the operations\nyou want to expose as tools. It should be named `.graphqlrc.yml` and placed in the root of your project.\n\n```yaml\nschema: https://graphql.org/graphql/\ndocuments: operations\n```\n\nThe `schema` field specifies the GraphQL endpoint, and the `documents` field specifies the directory where your GraphQL operations are located.\n\nIn this example, the `operations` directory contains all the GraphQL operations you want to expose as tools.\nOperations are defined in `.graphql` files, and gqai will automatically discover them.\n\n##### Headers\nYou can also specify headers to be sent with each request to the GraphQL endpoint. This is useful for authentication or other custom headers.\n\n```yaml\nschema:\n  - https://graphql.org/graphql/:\n      headers:\n        Authorization: Bearer YOUR_TOKEN\n        X-Custom-Header: CustomValue\ndocuments: .\n```\n\n##### Using Environment Variables in Headers\nYou can reference environment variables in header values using the `${VARNAME}` syntax. For example:\n\n```yaml\nschema:\n  - https://graphql.org/graphql/:\n      headers:\n        Authorization: Bearer ${MY_AUTH_TOKEN}\ndocuments: .\n```\n\nYou can also provide a default value using the `${VARNAME:-default}` syntax:\n\n```yaml\nschema:\n  - https://graphql.org/graphql/:\n      headers:\n        Authorization: Bearer ${MY_AUTH_TOKEN:-default-token}\ndocuments: .\n```\n\nWhen gqai loads the config, it will substitute `${MY_AUTH_TOKEN}` with the value of the `MY_AUTH_TOKEN` environment variable, or use `default-token` if the variable is not set. This allows you to keep secrets out of your config files.\n\nIf the environment variable is not set and no default is provided, the value will be left as-is.\n\n##### Using Environment Variables in Config\nYou can use environment variables in any part of your `.graphqlrc.yml` config: schema URLs, document paths, include/exclude globs, and header values. Use `${VARNAME}` or `${VARNAME:-default}` syntax:\n\n```yaml\nschema:\n  - ${MY_SCHEMA_URL:-https://default/graphql}:\n      headers:\n        Authorization: Bearer ${MY_AUTH_TOKEN}\ndocuments:\n  - ${MY_DOCS_PATH:-operations/**/*.graphql}\ninclude: ${MY_INCLUDE:-operations/include.graphql}\nexclude: ${MY_EXCLUDE:-operations/exclude.graphql}\n```\n\ngqai will substitute these with the value of the environment variable, or use the default if not set. This keeps secrets and environment-specific paths out of your config files.\n\n#### MCP Configuration\n##### Claude Desktop\nTo use gqai with Claude Desktop, you need to add the following configuration to your `mcp.json` file:\n\n```json\n{\n  \"gqai\": {\n    \"command\": \"gqai\",\n    \"args\": [\n      \"run\",\n      \"--config\",\n      \".graphqlrc.yml\"\n    ]\n  }\n}\n```\n\n\n### üß™ CLI Testing\n#### Call a tool via CLI to test:\n\n```bash\ngqai tools/call get_all_films\n```\n\nThis will execute the `get_all_films` tool and print the result.\n\n```shell\n{\n  \"data\": {\n    \"allFilms\": {\n      \"films\": [\n        {\n          \"id\": 4,\n          \"title\": \"A New Hope\"\n        },\n        {\n          \"id\": 5,\n          \"title\": \"The Empire Strikes Back\"\n        },\n        {\n          \"id\": 6,\n          \"title\": \"Return of the Jedi\"\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n#### Call a tool with arguments:\n\nCreate a GraphQL operation that takes arguments, and these will be the tool inputs:\n\n`get_film_by_id.graphql`:\n```graphql\nquery get_film_by_id($id: ID!) {\n  film(filmID: $id) {\n    episodeID\n    title\n    director\n    releaseDate\n  }\n}\n```\n\nCall the tool with arguments:\n\n```bash\ngqai tools/call get_film_by_id '{\"id\": \"1\"}'\n```\n\nThis will execute the `get_film_by_id` tool with the provided arguments.\n\n```shell\n{\n  \"data\": {\n    \"film\": {\n      \"episodeID\": 1,\n      \"title\": \"A New Hope\",\n      \"director\": \"George Lucas\",\n      \"releaseDate\": \"1977-05-25\"\n    }\n  }\n}\n```\n\n## Development\n\n### Prerequisites\n- Go 1.20+\n\n### Build\n```bash\ngo build -o gqai main.go\n```\n\n### Test\n```bash\ngo test ./...\n```\n\n### Format\n```bash\ngo fmt ./...\n```\n\n### Run MCP server\n```bash\n./gqai run --config .graphqlrc.yml\n```\n\n### Run CLI\n```bash\n./gqai tools/call get_all_films\n```\n\n\n## About GQAI\n\n### ü§ñ Why gqai?\ngqai makes it easy to turn your GraphQL backend into a model-ready tool layer ‚Äî no code, no extra infra. Just define your operations and let AI call them.\n\n### üìú License\nMIT ‚Äî fork it, build on it, all the things.\n\n### üëã Author\nMade with ‚ù§Ô∏è and ü§ñvibes by Stephen Spalding && `<your-name-here>`\n",
  "category": null,
  "qualityScore": 70,
  "githubUrl": "https://github.com/fotoetienne/gqai",
  "programmingLanguage": "Go",
  "gitHubOrg": "fotoetienne",
  "gitHubRepo": "gqai",
  "repositoryPath": null,
  "gh_stars": 19,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "b096b6951cb6da9641e8ed2facd9b38b90703ca1",
  "last_scraped_at": "2025-07-31T20:49:04.489Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}