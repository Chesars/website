{
  "name": "nixos",
  "slug": "utensils__mcp-nixos",
  "description": "MCP-NixOS - Model Context Protocol Server for NixOS resources",
  "readme": "# MCP-NixOS - Because Your AI Assistant Shouldn't Hallucinate About Packages\n\n[![CI](https://github.com/utensils/mcp-nixos/actions/workflows/ci.yml/badge.svg)](https://github.com/utensils/mcp-nixos/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/utensils/mcp-nixos/graph/badge.svg?token=kdcbgvq4Bh)](https://codecov.io/gh/utensils/mcp-nixos)\n[![PyPI](https://img.shields.io/pypi/v/mcp-nixos.svg)](https://pypi.org/project/mcp-nixos/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/mcp-nixos.svg)](https://pypi.org/project/mcp-nixos/)\n[![smithery badge](https://smithery.ai/badge/@utensils/mcp-nixos)](https://smithery.ai/server/@utensils/mcp-nixos)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/99cc55fb-a5c5-4473-b315-45a6961b2e8c)\n\n> **üéâ REFACTORED**: Version 1.0.0 represents a complete rewrite that drastically simplified everything. We removed all the complex caching, abstractions, and \"enterprise\" patterns. Because sometimes less is more, and more is just showing off.\n\n## Quick Start (Because You Want to Use It NOW)\n\n**üö® No Nix/NixOS Required!** This tool works on any system - Windows, macOS, Linux. You're just querying web APIs.\n\n### Option 1: Using uvx (Recommended for most users)\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=nixos&config=eyJjb21tYW5kIjoidXZ4IG1jcC1uaXhvcyJ9)\n```json\n{\n  \"mcpServers\": {\n    \"nixos\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-nixos\"]\n    }\n  }\n}\n```\n\n### Option 2: Using Nix (For Nix users)\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=nixos&config=eyJjb21tYW5kIjoibml4IHJ1biBnaXRodWI6dXRlbnNpbHMvbWNwLW5peG9zIC0tIn0%3D)\n```json\n{\n  \"mcpServers\": {\n    \"nixos\": {\n      \"command\": \"nix\",\n      \"args\": [\"run\", \"github:utensils/mcp-nixos\", \"--\"]\n    }\n  }\n}\n```\n\nThat's it. Your AI assistant now has access to real NixOS data instead of making things up. You're welcome.\n\n## What Is This Thing?\n\nMCP-NixOS is a Model Context Protocol server that gives your AI assistant accurate, real-time information about:\n- **NixOS packages** (130K+ packages that actually exist)\n- **Configuration options** (22K+ ways to break your system)\n- **Home Manager settings** (4K+ options for the power users)\n- **nix-darwin configurations** (1K+ macOS settings Apple doesn't want you to touch)\n- **Package version history** via [NixHub.io](https://www.nixhub.io) (Find that ancient Ruby 2.6 with commit hashes)\n\n## The Tools You Actually Care About\n\n### üîç NixOS Tools\n- `nixos_search(query, type, channel)` - Search packages, options, or programs\n- `nixos_info(name, type, channel)` - Get detailed info about packages/options\n- `nixos_stats(channel)` - Package and option counts\n- `nixos_channels()` - List all available channels\n- `nixos_flakes_search(query)` - Search community flakes\n- `nixos_flakes_stats()` - Flake ecosystem statistics\n\n### üì¶ Version History Tools (NEW!)\n- `nixhub_package_versions(package, limit)` - Get version history with commit hashes\n- `nixhub_find_version(package, version)` - Smart search for specific versions\n\n### üè† Home Manager Tools\n- `home_manager_search(query)` - Search user config options\n- `home_manager_info(name)` - Get option details (with suggestions!)\n- `home_manager_stats()` - See what's available\n- `home_manager_list_options()` - Browse all 131 categories\n- `home_manager_options_by_prefix(prefix)` - Explore options by prefix\n\n### üçé Darwin Tools\n- `darwin_search(query)` - Search macOS options\n- `darwin_info(name)` - Get option details\n- `darwin_stats()` - macOS configuration statistics\n- `darwin_list_options()` - Browse all 21 categories\n- `darwin_options_by_prefix(prefix)` - Explore macOS options\n\n## Installation Options\n\n**Remember: You DON'T need Nix/NixOS installed!** This tool runs anywhere Python runs.\n\n### For Regular Humans (Windows/Mac/Linux)\n```bash\n# Run directly with uvx (no installation needed)\nuvx mcp-nixos\n\n# Or install globally\npip install mcp-nixos\nuv pip install mcp-nixos\n```\n\n### For Nix Users (You Know Who You Are)\n```bash\n# Run without installing\nnix run github:utensils/mcp-nixos\n\n# Install to profile\nnix profile install github:utensils/mcp-nixos\n```\n\n## Features Worth Mentioning\n\n### üöÄ Version 1.0.0: The Great Simplification\n- **Drastically less code** - Removed thousands of lines of complexity\n- **100% functionality** - Everything still works\n- **0% cache corruption** - Because we removed the cache entirely\n- **Stateless operation** - No files to clean up\n- **Direct API access** - No abstraction nonsense\n\n### üìä What You Get\n- **Real-time data** - Always current, never stale\n- **Plain text output** - Human and AI readable\n- **Smart suggestions** - Helps when you typo option names\n- **Cross-platform** - Works on Linux, macOS, and yes, even Windows\n- **No configuration** - It just works‚Ñ¢\n\n### üéØ Key Improvements\n- **Dynamic channel resolution** - `stable` always points to current stable\n- **Enhanced error messages** - Actually helpful when things go wrong\n- **Deduped flake results** - No more duplicate spam\n- **Version-aware searches** - Find that old Ruby version you need\n- **Category browsing** - Explore options systematically\n\n## For Developers (The Brave Ones)\n\n### With Nix (The Blessed Path)\n```bash\nnix develop\nmenu  # Shows all available commands\n\n# Common tasks\nrun        # Start the server\nrun-tests  # Run all tests\nlint       # Format and check code\ntypecheck  # Check types\n```\n\n### Without Nix (The Path of Pain)\n```bash\npip install -e \".[dev]\"\npytest tests/\nblack mcp_nixos/\nflake8 mcp_nixos/\n```\n\n### Testing Philosophy\n- **367 tests** that actually test things\n- **Real API calls** because mocks are for cowards\n- **Plain text validation** ensuring no XML leaks through\n- **Cross-platform tests** because Windows users deserve pain too\n\n## Environment Variables\n\nJust one. We're minimalists now:\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `ELASTICSEARCH_URL` | NixOS API endpoint | https://search.nixos.org/backend |\n\n\n## Acknowledgments\n\nThis project queries data from several amazing services:\n- **[NixHub.io](https://www.nixhub.io)** - Provides package version history and commit tracking\n- **[search.nixos.org](https://search.nixos.org)** - Official NixOS package and option search\n- **[Jetify](https://www.jetify.com)** - Creators of [Devbox](https://www.jetify.com/devbox) and NixHub\n\n*Note: These services have not endorsed this tool. We're just grateful API consumers.*\n\n## License\n\nMIT - Because sharing is caring, even if the code hurts.\n\n---\n\n_Created by James Brink and maintained by masochists who enjoy Nix._\n\n_Special thanks to the NixOS project for creating an OS that's simultaneously the best and worst thing ever._",
  "category": null,
  "qualityScore": 90,
  "githubUrl": "https://github.com/utensils/mcp-nixos",
  "programmingLanguage": "HTML",
  "gitHubOrg": "utensils",
  "gitHubRepo": "mcp-nixos",
  "repositoryPath": null,
  "gh_stars": 205,
  "gh_contributors": 4,
  "gh_issues": 12,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "5d52692805ead25c9ccc5e575006b3ed8b3eb07b",
  "last_scraped_at": "2025-07-29T19:19:02.893Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}