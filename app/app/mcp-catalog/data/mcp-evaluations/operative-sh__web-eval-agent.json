{
  "name": "web eval agent",
  "slug": "operative-sh__web-eval-agent",
  "description": "An MCP server that autonomously evaluates web applications. ",
  "readme": "# 🚀 operative.sh web-eval-agent MCP Server\n\n> *Let the coding agent debug itself, you've got better things to do.*\n\n![Demo](./demo.gif)\n\n\n\n## 🔥 Supercharge Your Debugging\n\n[operative.sh](https://www.operative.sh/mcp)'s MCP Server launches a browser-use powered agent to autonomously execute and debug web apps directly in your code editor.\n\n## ⚡ Features\n\n- 🌐 **Navigate your webapp** using BrowserUse (2x faster with operative backend)\n- 📊 **Capture network traffic** - requests are intelligently filtered and returned into the context window\n- 🚨 **Collect console errors** - captures logs & errors\n- 🤖 **Autonomous debugging** - the Cursor agent calls the web QA agent mcp server to test if the code it wrote works as epected end-to-end.\n\n## 🧰 MCP Tool Reference\n\n| Tool | Purpose |\n|------|---------|\n| `web_eval_agent` | 🤖 Automated UX evaluator that drives the browser, captures screenshots, console & network logs, and returns a rich UX report. |\n| `setup_browser_state` | 🔒 Opens an interactive (non-headless) browser so you can sign in once; the saved cookies/local-storage are reused by subsequent `web_eval_agent` runs. |\n\n**Key arguments**\n\n* `web_eval_agent`\n  * `url` **(required)** – address of the running app (e.g. `http://localhost:3000`)\n  * `task` **(required)** – natural-language description of what to test (\"run through the signup flow and note any UX issues\")\n  * `headless_browser` *(optional, default `false`)* – set to `true` to hide the browser window\n\n* `setup_browser_state`\n  * `url` *(optional)* – page to open first (handy to land directly on a login screen)\n\nYou can trigger these tools straight from your IDE chat, for example:\n\n```bash\nEvaluate my app at http://localhost:3000 – run web_eval_agent with the task \"Try the full signup flow and report UX issues\".\n```\n\n## 🏁 Quick Start (macOS/Linux)\n\n1. Pre-requisites (typically not needed):\n - brew: `/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"`\n - npm: (`brew install npm`)\n - jq: `brew install jq` \n2. Run the installer after [getting an api key (free)](https://www.operative.sh/mcp)\n   - Installs [playwright](https://github.com/microsoft/playwright) \n   - [Installs uv](https://astral.sh/)\n   - Inserts JSON into your code editor (Cursor/Cline/Windsurf) for you! \n```bash\ncurl -LSf https://operative.sh/install.sh -o install.sh && bash install.sh && rm install.sh\n```\n3. Visit your favorite IDE and restart to apply the changes\n4. Send a prompt in chat mode to call the web eval agent tool! e.g. \n```bash\nTest my app on http://localhost:3000. Use web-eval-agent.\n```\n\n## 🛠️ Manual Installation\n1. Get your API key at operative.sh/mcp\n2. [Install uv](https://docs.astral.sh/uv/#highlights)\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Source environment variables after installing UV\n\nMac\n```\nsource ~/.zshrc\n```\n\nLinux \n```\nsource ~/.bashrc \n```\n4. Install playwright:\n\n```bash\nnpm install -g chromium playwright && uvx --with playwright playwright install --with-deps\n```\n5. Add below JSON to your relevant code editor with api key \n6. Restart your code editor\n   \n## 🔃 Updating \n- `uv cache clean`\n- refresh MCP server \n\n```json \n    \"web-eval-agent\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--refresh-package\",\n        \"webEvalAgent\",\n        \"--from\",\n        \"git+https://github.com/Operative-Sh/web-eval-agent.git\",\n        \"webEvalAgent\"\n      ],\n      \"env\": {\n        \"OPERATIVE_API_KEY\": \"<YOUR_KEY>\"\n      }\n    }\n```\n## [Operative Discord Server](https://discord.gg/ryjCnf9myb)\n\n## 🛠️ Manual Installation (Mac + Cursor/Cline/Windsurf) \n1. Get your API key at operative.sh/mcp\n2. [Install uv](https://docs.astral.sh/uv/#highlights)\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh)\n```\n3. Install playwright:\n```bash\nnpm install -g chromium playwright && uvx --with playwright playwright install --with-deps\n```\n4. Add below JSON to your relevant code editor with api key \n5. Restart your code editor\n\n## Manual Installation (Windows + Cursor/Cline/Windsurf)  \n\nWe're refining this, please open an issue if you have any issues! \n1. Do all this in your code editor terminal \n2. `curl -LSf https://operative.sh/install.sh -o install.sh && bash install.sh && rm install.sh`\n3. Get your API key at operative.sh/mcp\n4. Install uv `(curl -LsSf https://astral.sh/uv/install.sh | sh)`\n5. `uvx --from git+https://github.com/Operative-Sh/web-eval-agent.git playwright install`\n6. Restart code editor \n\n\n## 🚨 Issues \n- Updates aren't being received in code editors, update or reinstall for latest version: Run `uv cache clean` for latest \n- Any issues feel free to open an Issue on this repo or in the discord!\n- 5/5 - static apps without changes weren't screencasting, fixed! `uv clean` + restart to get fix\n\n## Changelog \n- 4/29 - Agent overlay update - pause/play/stop agent run in the browser\n\n## 📋 Example MCP Server Output Report\n\n```text\n📊 Web Evaluation Report for http://localhost:5173 complete!\n📝 Task: Test the API-key deletion flow by navigating to the API Keys section, deleting a key, and judging the UX.\n\n🔍 Agent Steps\n  📍 1. Navigate → http://localhost:5173\n  📍 2. Click     \"Login\"        (button index 2)\n  📍 3. Click     \"API Keys\"     (button index 4)\n  📍 4. Click     \"Create Key\"   (button index 9)\n  📍 5. Type      \"Test API Key\" (input index 2)\n  📍 6. Click     \"Done\"         (button index 3)\n  📍 7. Click     \"Delete\"       (button index 10)\n  📍 8. Click     \"Delete\"       (confirm index 3)\n🏁 Flow tested successfully – UX felt smooth and intuitive.\n\n🖥️ Console Logs (10)\n  1. [debug] [vite] connecting…\n  2. [debug] [vite] connected.\n  3. [info]  Download the React DevTools …\n     …\n\n🌐 Network Requests (10)\n  1. GET /src/pages/SleepingMasks.tsx                   304\n  2. GET /src/pages/MCPRegistryRegistry.tsx             304\n     …\n\n⏱️ Chronological Timeline\n  01:16:23.293 🖥️ Console [debug] [vite] connecting…\n  01:16:23.303 🖥️ Console [debug] [vite] connected.\n  01:16:23.312 ➡️ GET /src/pages/SleepingMasks.tsx\n  01:16:23.318 ⬅️ 304 /src/pages/SleepingMasks.tsx\n     …\n  01:17:45.038 🤖 🏁 Flow finished – deletion verified\n  01:17:47.038 🤖 📋 Conclusion repeated above\n👁️  See the \"Operative Control Center\" dashboard for live logs.\n```\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Operative-Sh/web-eval-agent&type=Date)](https://www.star-history.com/#Operative-Sh/web-eval-agent&Date)\n\n\n---\n\nBuilt with <3 @ [operative.sh](https://www.operative.sh)\n",
  "category": null,
  "qualityScore": 87,
  "githubUrl": "https://github.com/Operative-Sh/web-eval-agent",
  "programmingLanguage": "Python",
  "gitHubOrg": "Operative-Sh",
  "gitHubRepo": "web-eval-agent",
  "repositoryPath": null,
  "gh_stars": 1133,
  "gh_contributors": 4,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "8e2622906de536e01a0b1ba9ae564964163bc6ac",
  "last_scraped_at": "2025-08-01T13:16:22.907Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}