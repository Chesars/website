{
  "name": "quarkus  s",
  "slug": "quarkiverse__quarkus-mcp-servers__jdbc",
  "description": "Model Context Protocol Servers in Quarkus",
  "readme": "# Model Context Protocol Server for JDBC\n\nThis Model Context Protocol(MCP) server enables Large Language Models (LLMs) to inspect, query, create and modify database content given just a Java Database Connectivity (JDBC) url.\n\nSupported databases include PostgresSQL, Oracle, MariaDB, Sqlite and [many more](#supported-jdbc-variants).\n\n![](images/jdbc-demo.png)\n\n[![](images/jdbc-trends-demo.png)](https://youtu.be/E6IJvQZ3MCI)\n\nSee video [here](https://youtu.be/E6IJvQZ3MCI).\n\n## General Usage \n\n1. Install [jbang](https://www.jbang.dev/download/)\n2. Configure your MCP Client to run the server (see [Claude Desktop Config](#claude-desktop-config) below)\n\nBelow are examples of command lines to use for configuring the server.\n\nStart with an empty database (in-memory h2 database):\n\n```shell\njbang jdbc@quarkiverse/quarkus-mcp-servers\n```\n\nA live database (any common JDBC compatible database):\n\n```shell\njbang jdbc@quarkiverse/quarkus-mcp-servers [jdbc_url]\n```\n\nFor example, to connect to a already running Oracle database:\n\n```shell\njbang jdbc@quarkiverse/quarkus-mcp-servers jdbc:oracle:thin:@localhost:1521:orcl\n```\n\nYou can also specify a user and password separately, here for a PostgreSQL database:\n\n```shell\njbang jdbc@quarkiverse/quarkus-mcp-servers jdbc:postgresql://localhost:5432/sakila -u sakila -p p_ssW0rd\n```\n\n## Downloadable databases\n\nJBang can download files from the web and feed them directly to databases like h2 and sqlite.\n\nThat is done using the %{url} syntax.\n\nFollowing is an example of how to connect to a Chinook database in SQLite, downloading the `Chinook_Sqlite.sqlite` file from github.\n\n```shell\njbang jdbc@quarkiverse/quarkus-mcp-servers jdbc:sqlite:%{https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite}\n```\n\nThere are interesting examples of sample data available online you can use to explore data.\n\nBelow are a non-exhaustive list of databases and example JDBC urls that are known to work with this server as-is (no additional configuration required).\n\n### Example databases \n\n**Chinook**\n\nSample music store data including artists, albums, tracks, invoices etc.\n```\njdbc:sqlite:%{https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite}\n```\n\n**Northwind**\n\nClassic Microsoft sample database with customers, orders, products etc.\n\n```\njdbc:sqlite:%{https://github.com/jpwhite3/northwind-SQLite3/raw/refs/heads/main/dist/northwind.db}\n```\n\n**Netflix Movies**\n\nSample movie data based on Netflix catalog\n```\njdbc:sqlite:%{https://github.com/lerocha/netflixdb/releases/download/v1.0.0/netflixdb.sqlite}\n```\n\n## Supported JDBC variants\n\n| Database | Dependency |\n|----------|------------|\n| [MariaDB](https://mariadb.com/kb/en/mariadb-connector-j/) | org.mariadb.jdbc:mariadb-java-client:RELEASE |\n| [MySQL](https://dev.mysql.com/doc/connector-j/8.0/en/) | mysql:mysql-connector-java:RELEASE |\n| [PostgreSQL](https://jdbc.postgresql.org/documentation/head/connect.html) | org.postgresql:postgresql:RELEASE |\n| [Oracle](https://docs.oracle.com/en/database/oracle/oracle-database/19/jjdbc/JDBC-driver-connection-url-syntax.html) | com.oracle.database.jdbc:ojdbc10:RELEASE |\n| [SQL Server](https://docs.microsoft.com/en-us/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server?view=sql-server-ver15) | com.microsoft.sqlserver:mssql-jdbc:RELEASE |\n| [SAP DB](https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.02/en-US/109397c2206a4ab2a5386d494f4cf75e.html) | com.sapcloud.db.jdbc:ngdbc:RELEASE |\n| [Informix](https://www.ibm.com/docs/en/informix-servers/14.10?topic=SSGU8G_14.1.0/com.ibm.jdbc_pg.doc/ids_jdbc_501.htm) | com.ibm.informix:jdbc:RELEASE |\n| [Firebird](https://www.firebirdsql.org/file/documentation/drivers_documentation/java/3.0.7/firebird-classic-server.html) | org.firebirdsql.jdbc:jaybird:RELEASE |\n| [hsqldb](https://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html) | org.hsqldb:hsqldb:RELEASE |\n| [h2](https://www.h2database.com/html/features.html#database_url) | com.h2database:h2:RELEASE |\n| [Apache Derby](https://db.apache.org/derby/docs/10.8/devguide/cdevdvlp17453.html) | org.apache.derby:derby:RELEASE |\n| SQLite | org.xerial:sqlite-jdbc:RELEASE |\n\n## Components\n\nBelow are the MCP components provided by this server.\n\n### Tools \n\n* **read_query** - do a SELECT query on the database\n* **write_query** - do a INSERT, UPDATE, DELETE query on the database\n* **create_table** - create a table in the database\n* **list_tables** - list all tables in the database\n* **describe_table** - describe a table\n\n### Prompts\n\n* **jdbc_demo** - example prompt to get started exploring the server (similar to the one in sqllite MCP)\n\n## Claude Desktop Config and [mcp-cli](https://github.com/chrishayuk/mcp-cli)\n\nAdd this to your `claude_desktop_config.json` or `server_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"jdbc\": {\n      \"command\": \"jbang\",\n      \"args\": [\n        \"jdbc@quarkiverse/quarkus-mcp-servers\",\n        \"[jdbc_url]\"\n      ]\n    }\n  }\n}\n```\n\n### Troubleshooting\n\n**jbang not found**\n* Make sure you have `jbang` installed and available in your PATH\n* Alternatively, use full path to jbang executable (e.g. `/Users/username/.jbang/jbang`)\n\n**Get more logging**\n\nTo get more detailed logging you can add the following parameters to the jbang command line:\n\n```shell\n-Dquarkus.log.file.enable=true -Dquarkus.log.file.path=${user.home}/mcp-server-jdbc.log\n```\n\nExample:\n\n```shell\njbang -Dquarkus.log.file.enable=true -Dquarkus.log.file.path=${user.home}/mcp-jdbc.log jdbc@quarkiverse/quarkus-mcp-servers jdbc:h2:mem:testdb\n```\n\n## Native Image/Executable\n\nAlthough the server can be compiled to a native executable, it is not recommended as then it is not possible to dynamically load the relevant JDBC driver.\n\nYou can however compile a server that targets a specific JDBC driver, but that is for now\nleft up as an exercise to the reader. If you are interested in this, please open issue or PR.\n\n### How was this made?\n\nThe MCP server uses Quarkus, the Supersonic Subatomic Java Framework and its Model Context Protocol support.\n\nIf you want to learn more about Quarkus MCP Server support, please see this [blog post](https://quarkus.io/blog/mcp-server/) \nand the Quarkus MCP Server [extension documentation](https://docs.quarkiverse.io/quarkus-mcp-server/dev/).\n\nTo launch the server and handle the magic setup of JDBC urls it uses [jbang](https://jbang.dev/) to\nsetup Java and run the .jar as transparent as possible. Very similar to how `uvx`, `pipx`, `npmx` and others works; just for Java. ",
  "category": null,
  "qualityScore": 88,
  "githubUrl": "https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc",
  "programmingLanguage": "Java",
  "gitHubOrg": "quarkiverse",
  "gitHubRepo": "quarkus-mcp-servers",
  "repositoryPath": "jdbc",
  "gh_stars": 159,
  "gh_contributors": 9,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "d2c1caad14f71ba3995394ff2ae1e2971bad7125",
  "last_scraped_at": "2025-08-01T13:16:43.841Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}