{
  "name": "opslevel",
  "slug": "opslevel__opslevel-mcp",
  "description": "Model Context Protocol (MCP) server for OpsLevel",
  "readme": "<p align=\"center\">\n    <a href=\"https://github.com/OpsLevel/opslevel-mcp/blob/main/LICENSE\">\n        <img src=\"https://img.shields.io/github/license/OpsLevel/opslevel-mcp.svg\" alt=\"License\" /></a>\n    <a href=\"https://GitHub.com/OpsLevel/opslevel-mcp/releases/\">\n        <img src=\"https://img.shields.io/github/v/release/OpsLevel/opslevel-mcp\" alt=\"Release\" /></a>\n    <a href=\"https://masterminds.github.io/stability/active.html\">\n        <img src=\"https://masterminds.github.io/stability/active.svg\" alt=\"Stability: Active\" /></a>\n    <a href=\"https://github.com/OpsLevel/opslevel-mcp/graphs/contributors\">\n        <img src=\"https://img.shields.io/github/contributors/OpsLevel/opslevel-mcp\" alt=\"Contributors\" /></a>\n    <a href=\"https://github.com/OpsLevel/opslevel-mcp/pulse\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/OpsLevel/opslevel-mcp\" alt=\"Activity\" /></a>\n    <a href=\"https://github.com/OpsLevel/opslevel-mcp/releases\">\n        <img src=\"https://img.shields.io/github/downloads/OpsLevel/opslevel-mcp/total\" alt=\"Downloads\" /></a>\n    <a href=\"https://app.opslevel.com/services/opslevel_mcp/maturity-report\">\n        <img src=\"https://img.shields.io/endpoint?style=flat&url=https%3A%2F%2Fapp.opslevel.com%2Fapi%2Fservice_level%2Fdlmj6PlFjehv6iLE6IQtEGXi_uz3LF9rA5nxb35wiY8\" alt=\"Overall\" /></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://glama.ai/mcp/servers/@OpsLevel/opslevel-mcp\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@OpsLevel/opslevel-mcp/badge\" />\n  </a>\n</p>\n\n\n# OpsLevel MCP Server\n\nThis MCP ([Model Context Protocol](https://modelcontextprotocol.io/introduction)) server provides AIs with tools to interact with your OpsLevel account.\n\n![mcp_image](https://github.com/user-attachments/assets/dd936eef-80c2-42a5-8d04-9ca9c2de8e76)\n\n# Features\n\nCurrently, the MCP server only uses read-only access to your OpsLevel account and can read data from the following resources:\n\n- Actions\n- Campaigns\n- Checks\n- Components\n- Documentation (API & Tech Docs)\n- Domains\n- Filters\n- Infrastructure\n- Repositories\n- Systems\n- Teams\n- Users\n\n# Setup\n\n1. Install the MCP Server\n   1. Homebrew - `brew install opslevel/tap/opslevel-mcp`\n   2. Docker - `docker pull public.ecr.aws/opslevel/mcp:latest`  \n      You can also used a pinned version [check out the gallery for the available tags](https://gallery.ecr.aws/opslevel/mcp) \n   3. Manual - Visit our [GitHub releases page](https://github.com/OpsLevel/opslevel-mcp/releases) and download the binary for your operating system.\n2. You will need an [API Token](https://app.opslevel.com/api_tokens) to authorize the MCP Server to talk to your account via an environment variable.\n3. Setup MCP configuration for the AI tool of your choice.\n\n## Claude\n\n[Claude Desktop](https://modelcontextprotocol.io/quickstart/user)\n\n1. Edit the file at the specified path based on the Claude Desktop docs\n   1. Mac OS - `${HOME}/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   2. Windows - `%APPDATA%\\Claude\\claude_desktop_config.json`\n2. Start (or restart) Claude Desktop\n\n```json\n{\n    \"mcpServers\": {\n        \"opslevel\": {\n            \"command\": \"opslevel-mcp\",\n            \"env\": {\n                \"OPSLEVEL_API_TOKEN\": \"XXXXXXX\"\n            }\n        }\n    }\n}\n```\n\n## VS Code\n\n[VS Code User Settings](https://code.visualstudio.com/docs/copilot/chat/mcp-servers#_finding-mcp-servers)\n\n1. Open the Settings menu (Command + Comma) and select the correct tab atop the page for your use case\n   1. Workspace - configures the server in the context of your workspace\n   2. User - configures the server in the context of your user\n2. Select Features → Chat\n3. Ensure that \"Mcp\" is Enabled\n   1. You may need to have your Github administrator enable \"preview\" features in the CoPilot settings for the organization.\n4. Click \"Edit in settings.json\" under \"Mcp > Discovery\" to have the below config\n   1. Can also edit the file directly\n      1. (Mac OS)  `${HOME}/Library/Application\\\\ Support/Code/User/settings.json`\n5. Start (or restart) VS Code\n\n```json\n{\n    \"chat.agent.enabled\": true,\n    \"chat.mcp.discovery.enabled\": true,\n    \"mcp\": {\n        \"inputs\": [\n          {\n            \"type\": \"promptString\",\n            \"id\": \"opslevel_token\",\n            \"description\": \"OpsLevel API Token\",\n            \"password\": true\n          }\n        ],\n        \"servers\": {\n            \"opslevel\": {\n                \"type\": \"stdio\",\n                \"command\": \"opslevel-mcp\",\n                \"env\": {\n                    \"OPSLEVEL_API_TOKEN\": \"${input:opslevel_token}\"\n                }\n            }\n        }\n    }\n}\n```\n\n## Cursor\n\n[Cursor Docs](https://docs.cursor.com/context/model-context-protocol)\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.png)](cursor://anysphere.cursor-deeplink/mcp/install?name=opslevel&config=eyJjb21tYW5kIjoib3BzbGV2ZWwtbWNwIiwiZW52Ijp7Ik9QU0xFVkVMX0FQSV9UT0tFTiI6IlhYWFhYWCJ9fQ==)\n\n1. Open the Cursor menu and select Settings → Cursor Settings → MCP\n2. Click \"Add new global MCP server\"\n3. Add the config below\n\n```json\n{\n  \"mcpServers\": {\n    \"opslevel\": {\n      \"command\": \"opslevel-mcp\",  \n      \"env\": {\n        \"OPSLEVEL_API_TOKEN\": \"XXXXXX\"\n      }\n    }\n  }\n}\n```\n\n## Warp\n\n[Warp](https://www.warp.dev/)\n\n1. Access your MCP settings under Settings > AI > Manage MCP Servers. Warp provides [instructions for other ways to access this list.](https://docs.warp.dev/knowledge-and-collaboration/mcp#how-to-access-mcp-server-settings)\n2. Press the add button\n3. Add the config below\n\n```json\n{\n  \"opslevel\": {\n    \"command\": \"opslevel-mcp\",\n    \"args\": [],\n    \"env\": {\n      \"OPSLEVEL_API_TOKEN\": \"XXXXXX\"\n    },\n    \"start_on_launch\": true\n  }\n}\n```\n\n## Windsurf\n\n[Windsurf](https://windsurf.com/editor)\n\n1. Navigate to Windsurf - Settings > Advanced Settings\n2. Scroll down to the Cascade section and you will find the option to add a new server\n3. Edit the [mpc_config.json](https://docs.windsurf.com/windsurf/mcp#mcp-config-json) with the below configuration\n4. Restart Windsurf\n\n```json\n{\n  \"mcpServers\": {\n    \"opslevel\": {\n      \"command\": \"opslevel-mcp\",  \n      \"env\": {\n        \"OPSLEVEL_API_TOKEN\": \"XXXXXX\"\n      }\n    }\n  }\n}\n```\n\n### Docker\n\nIf you didn't install the binary directly and instead pulled the docker image you'll need to adjust the above MCP configurations to support running the server via docker\n\n```\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"OPSLEVEL_API_TOKEN\",\n          \"public.ecr.aws/opslevel/mcp:latest\"\n        ],\n```\n",
  "category": null,
  "qualityScore": 82,
  "githubUrl": "https://github.com/opslevel/opslevel-mcp",
  "programmingLanguage": "Go",
  "gitHubOrg": "opslevel",
  "gitHubRepo": "opslevel-mcp",
  "repositoryPath": null,
  "gh_stars": 6,
  "gh_contributors": 9,
  "gh_issues": 3,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "d6a63fc22b109251620e2431763858f2ffd7dfc3",
  "last_scraped_at": "2025-07-29T19:18:02.992Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}