{
  "name": "graphql",
  "slug": "blurrah__mcp-graphql",
  "description": "Model Context Protocol server for GraphQL",
  "readme": "# mcp-graphql\n\n[![smithery badge](https://smithery.ai/badge/mcp-graphql)](https://smithery.ai/server/mcp-graphql)\n\nA Model Context Protocol server that enables LLMs to interact with GraphQL APIs. This implementation provides schema introspection and query execution capabilities, allowing models to discover and use GraphQL APIs dynamically.\n\n<a href=\"https://glama.ai/mcp/servers/4zwa4l8utf\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/4zwa4l8utf/badge\" alt=\"mcp-graphql MCP server\" /></a>\n\n## Usage\n\nRun `mcp-graphql` with the correct endpoint, it will automatically try to introspect your queries.\n\n### Environment Variables (Breaking change in 1.0.0)\n\n> **Note:** As of version 1.0.0, command line arguments have been replaced with environment variables.\n\n| Environment Variable | Description | Default |\n|----------|-------------|---------|\n| `ENDPOINT` | GraphQL endpoint URL | `http://localhost:4000/graphql` |\n| `HEADERS` | JSON string containing headers for requests | `{}` |\n| `ALLOW_MUTATIONS` | Enable mutation operations (disabled by default) | `false` |\n| `NAME` | Name of the MCP server | `mcp-graphql` |\n| `SCHEMA` | Path to a local GraphQL schema file or URL (optional) | - |\n\n### Examples\n\n```bash\n# Basic usage with a local GraphQL server\nENDPOINT=http://localhost:3000/graphql npx mcp-graphql\n\n# Using with custom headers\nENDPOINT=https://api.example.com/graphql HEADERS='{\"Authorization\":\"Bearer token123\"}' npx mcp-graphql\n\n# Enable mutation operations\nENDPOINT=http://localhost:3000/graphql ALLOW_MUTATIONS=true npx mcp-graphql\n\n# Using a local schema file instead of introspection\nENDPOINT=http://localhost:3000/graphql SCHEMA=./schema.graphql npx mcp-graphql\n\n# Using a schema file hosted at a URL\nENDPOINT=http://localhost:3000/graphql SCHEMA=https://example.com/schema.graphql npx mcp-graphql\n```\n\n## Resources\n\n- **graphql-schema**: The server exposes the GraphQL schema as a resource that clients can access. This is either the local schema file, a schema file hosted at a URL, or based on an introspection query.\n\n## Available Tools\n\nThe server provides two main tools:\n\n1. **introspect-schema**: This tool retrieves the GraphQL schema. Use this first if you don't have access to the schema as a resource.\nThis uses either the local schema file, a schema file hosted at a URL, or an introspection query.\n\n2. **query-graphql**: Execute GraphQL queries against the endpoint. By default, mutations are disabled unless `ALLOW_MUTATIONS` is set to `true`.\n\n## Installation\n\n### Installing via Smithery\n\nTo install GraphQL MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-graphql):\n\n```bash\nnpx -y @smithery/cli install mcp-graphql --client claude\n```\n\n### Installing Manually\n\nIt can be manually installed to Claude:\n```json\n{\n    \"mcpServers\": {\n        \"mcp-graphql\": {\n            \"command\": \"npx\",\n            \"args\": [\"mcp-graphql\"],\n            \"env\": {\n                \"ENDPOINT\": \"http://localhost:3000/graphql\"\n            }\n        }\n    }\n}\n```\n\n## Security Considerations\n\nMutations are disabled by default as a security measure to prevent an LLM from modifying your database or service data. Consider carefully before enabling mutations in production environments.\n\n## Customize for your own server\n\nThis is a very generic implementation where it allows for complete introspection and for your users to do whatever (including mutations). If you need a more specific implementation I'd suggest to just create your own MCP and lock down tool calling for clients to only input specific query fields and/or variables. You can use this as a reference.\n",
  "category": null,
  "qualityScore": 88,
  "githubUrl": "https://github.com/blurrah/mcp-graphql",
  "programmingLanguage": "TypeScript",
  "gitHubOrg": "blurrah",
  "gitHubRepo": "mcp-graphql",
  "repositoryPath": null,
  "gh_stars": 241,
  "gh_contributors": 7,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "4a50e9783cd241782d2ab5500d1e48bed027e59b",
  "last_scraped_at": "2025-07-31T20:49:04.413Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}