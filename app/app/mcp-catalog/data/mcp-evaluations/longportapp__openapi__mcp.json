{
  "name": "openapi",
  "slug": "longportapp__openapi__mcp",
  "description": "LongPort OpenAPI SDK Base.",
  "readme": "# LongPort MCP\n\nA [MCP](https://modelcontextprotocol.io/introduction) server implementation for [LongPort OpenAPI](https://open.longportapp.com), provides real-time stock market data, provides AI access analysis and trading capabilities through MCP.\n\n## Features\n\n- Trading - Create, amend, cancel orders, query todayâ€™s/past orders and transaction details, etc.\n- Quotes - Real-time quotes, acquisition of historical quotes, etc.\n- Portfolio - Real-time query of the account assets, positions, funds\n\n## Installation\n\n### macOS or Linux\n\nRun script to install:\n\n```bash\ncurl -sSL https://raw.githubusercontent.com/longportapp/openapi/refs/heads/main/mcp/install | bash\n```\n\n### Windows\n\nDownload the latest binary from the [Releases](https://github.com/longportapp/openapi/releases/tag/longport-mcp-0.1.0) page.\n\n## Example Prompts\n\nOnce you done server setup, and connected, you can talk with AI:\n\n- What's the current price of AAPL and TSLA stock?\n- How has Tesla performed over the past month?\n- Show me the current values of major market indices.\n- What's the stock price history for TSLA, AAPL over the last year?\n- Compare the performance of TSLA, AAPL and NVDA over the past 3 months.\n- Generate a portfolio performance chart for my holding stocks, and return me with data table and pie chart (Just return result no code).\n- Check the price of the stocks I hold today, and if they fall/rise by more than 3%, sell(If fall, buy if rise) 1/3 at the market price.\n\n## Usage\n\n### Use in Cursor\n\nTo configure LongPort MCP in Cursor:\n\n- Open Cursor Settings\n- Go to Features > MCP Servers\n- Click `+ Add New MCP Server`\n- Enter the following:\n  - Name: `longport-mcp` (or your preferred name)\n  - Type: `command`\n  - Command: `env LONGPORT_APP_KEY=your-app-key LONGPORT_APP_SECRET=your-app-secret LONGPORT_ACCESS_TOKEN=your-access-token longport-mcp`\n\nIf you are using Windows, replace command with `cmd /c \"set LONGPORT_APP_KEY=your-app-key && set LONGPORT_APP_SECRET=your-app-secret && set LONGPORT_ACCESS_TOKEN=your-access-token && longport-mcp\"`\n\nOr use this config:\n\n```json\n{\n  \"mcpServers\": {\n    \"longport-mcp\": {\n      \"command\": \"/usr/local/bin/longport-mcp\",\n      \"env\": {\n        \"LONGPORT_APP_KEY\": \"your-app-key\",\n        \"LONGPORT_APP_SECRET\": \"your-app-secret\",\n        \"LONGPORT_ACCESS_TOKEN\": \"your-access-token\"\n      }\n    }\n  }\n}\n```\n\n### Use in Cherry Studio\n\nTo configure LongPort MCP in Cherry Studio:\n\n- Go to Settings > MCP Servers\n- Click `+ Add Server`\n- Enter the following:\n  - Name: `longport-mcp` (or your preferred name)\n  - Type: `STDIO`\n  - Command: `env LONGPORT_APP_KEY=your-app-key LONGPORT_APP_SECRET=your-app-secret LONGPORT_ACCESS_TOKEN=your-access-token longport-mcp`\n\nIf you are using Windows, replace command with `cmd /c \"set LONGPORT_APP_KEY=your-app-key && set LONGPORT_APP_SECRET=your-app-secret && set LONGPORT_ACCESS_TOKEN=your-access-token && longport-mcp\"`\n\n## Running as a SSE server\n\n```bash\nenv LONGPORT_APP_KEY=your-app-key LONGPORT_APP_SECRET=your-app-secret LONGPORT_ACCESS_TOKEN=your-access-token longport-mcp --sse\n```\n\nDefault bind address is `127.0.0.1:8000`, you can change it by using the `--bind` flag:\n\n```bash\nlongport-mcp --sse --bind 127.0.0.1:3000\n```\n\n## Configuration\n\n### Readonly mode\n\nTo run the server in read-only mode, set the flag `--readonly`:\n\n```bash\nlongport-mcp --readonly\n```\n\nThis will prevent the server from submitting orders to the exchange.\n\n### Enable logging\n\nTo enable logging, set the flag `--log-dir` to the directory where you want to store the logs:\n\n```bash\nlongport-mcp --log-dir /path/to/log/dir\n```\n",
  "category": null,
  "qualityScore": 90,
  "githubUrl": "https://github.com/longportapp/openapi/tree/main/mcp",
  "programmingLanguage": "Rust",
  "gitHubOrg": "longportapp",
  "gitHubRepo": "openapi",
  "repositoryPath": "mcp",
  "gh_stars": 268,
  "gh_contributors": 13,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "965e8ee85f42fdf578a892382a8ace623bc3a44f",
  "last_scraped_at": "2025-07-31T20:48:49.864Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}