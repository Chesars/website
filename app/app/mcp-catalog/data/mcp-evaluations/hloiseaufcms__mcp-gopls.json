{
  "name": "gopls",
  "slug": "hloiseaufcms__mcp-gopls",
  "description": "MCP server from hloiseaufcms/mcp-gopls",
  "readme": "# MCP LSP Go\n\nA Model Context Protocol (MCP) server that allows AI assistants like Claude to interact with Go's Language Server Protocol (LSP) and benefit from advanced Go code analysis features.\n\n## Overview\n\nThis MCP server helps AI assistants to:\n\n- Use LSP to analyze Go code\n- Navigate to definitions and find references\n- Check code diagnostics\n- Get hover information for symbols\n- Get completion suggestions\n\n## Architecture\n\nThis project uses the [mark3labs/mcp-go](https://github.com/mark3labs/mcp-go) library to implement the Model Context Protocol. The MCP integration enables seamless communication between AI assistants and Go tools.\n\nThe server communicates with [gopls](https://github.com/golang/tools/tree/master/gopls), the official language server for Go, via the Language Server Protocol (LSP).\n\n## Features\n\n- **LSP Integration**: Connection to Go's Language Server Protocol for code analysis\n- **Code Navigation**: Finding definitions and references in the code\n- **Code Quality**: Getting diagnostics and errors\n- **Advanced Information**: Hover information and completion suggestions\n\n## Project Structure\n\n```bash\n.\n├── cmd\n│   └── mcp-gopls        # Application entry point\n├── pkg\n│   ├── lsp             # LSP client to communicate with gopls\n│   │   ├── client      # LSP client implementation\n│   │   └── protocol    # LSP protocol types and features\n│   ├── server          # MCP server\n│   └── tools           # MCP tools exposing LSP features\n```\n\n## Installation\n\n```bash\ngo install github.com/hloiseaufcms/mcp-gopls/cmd/mcp-gopls@latest\n```\n\n## Add to Cursor\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gopls\": {\n      \"command\": \"mcp-gopls\"\n    }\n  }\n} \n```\n\n## MCP Tools\n\nThe MCP server provides the following tools:\n\n| Tool | Description |\n|-------|-------------|\n| `go_to_definition` | Navigate to the definition of a symbol |\n| `find_references` | Find all references to a symbol |\n| `check_diagnostics` | Get diagnostics for a file |\n| `get_hover_info` | Get detailed information about a symbol |\n| `get_completion` | Get completion suggestions at a position |\n| `analyze_coverage` | Analyze test coverage for Go code |\n\n## Usage Example\n\nUsing the server with AI assistants that support MCP:\n\n```Markdown\n# Ask the AI to get information about the code\nCan you find the definition of the `ServeStdio` function in this project?\n\n# Ask for diagnostics\nAre there any errors in my main.go file?\n\n# Ask for information about a symbol\nWhat does the Context.WithTimeout function do in Go?\n```\n\n## Development\n\n```bash\ngit clone https://github.com/hloiseaufcms/mcp-gopls.git\ncd mcp-gopls\ngo mod tidy\ngo build -o mcp-gopls cmd/mcp-gopls/main.go\n./mcp-gopls\n```\n\n## Prerequisites\n\n- Go 1.21 or higher\n- gopls installed (`go install golang.org/x/tools/gopls@latest`)\n\n## Integration with Ollama\n\nThis MCP server can be used with any tool that supports the MCP protocol. For Ollama integration:\n\n1. Make sure Ollama is running\n2. The MCP server runs independently and communicates through stdin/stdout\n3. Configure your client to use the MCP server as a tool provider\n\n## License\n\nApache License 2.0",
  "category": null,
  "qualityScore": 72,
  "githubUrl": "https://github.com/hloiseaufcms/mcp-gopls",
  "programmingLanguage": "Go",
  "gitHubOrg": "hloiseaufcms",
  "gitHubRepo": "mcp-gopls",
  "repositoryPath": null,
  "gh_stars": 37,
  "gh_contributors": 2,
  "gh_issues": 2,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "2587313f195c6410c8f7ceb858a83d71298ebcfb",
  "last_scraped_at": "2025-07-29T19:16:43.770Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}