{
  "name": "godoc",
  "slug": "yikakia__godoc-mcp-server",
  "description": "A mcp server provide infomation from pkg.go.dev. For all golang programmers",
  "readme": "# godoc-mcp-server\n\nsearch golang packages and their docs from pkg.go.dev, provide the infomation to llm as mcp server\n\n## Install\n\nYou can download the compiled binary from the [releases page](https://github.com/yikakia/godoc-mcp-server/releases/tag/latest).\n\nOr you can install it from source, compile it by yourself:\n\n```shell\ngo install github.com/yikakia/godoc-mcp-server/cmd/godoc-mcp-server@latest\n```\n\n## Usage\n\njust use your client to request. it servers on stdio\n\n## Todo\n\n- localCache\n  - [x] use a local cache to avoid search every time(From reddit user)\n- searchPackage\n  - [x] imported by how many packages\n- getPackageInfo\n  - [ ] get examples\n- release\n  - [x] use github actions to release for multiple platforms \n\n## Develop Experience\nThe description is very important, when describing the param should tell the client how \nto use one tool's output and change the format to match another tool's input.\n\nFor example, the output of `searchPackage` contains subpackage's name, but do not contain\nthe package's name. So if want the llm to use `getPackageInfo` to get the subpackage's info,\nI wrote the description for param `packageName` about how to use it to work with `searchPackage`:\n\n> package name for search. if use searchPackages before, and user want to get the \nsubpackage info. you should plus them for example, when user query mcp, and it return \npackageName: github.com/mark3labs/mcp-go/mcp and subpackage client, then if user want \nto get the client package info, you should set the packageName to \ngithub.com/mark3labs/mcp-go/mcp/client rather than client\n\n\nWhen using this detail description, the llm will tell you some subpackage's name after \nsearch. You can just tell it which package you want to get info, or which package and the \nsubpackage's name, it will combine them and call `getPackageInfo` to get the info.\n\n\nSo maybe we should make the description configurable by user, to make the tool more useful\nand efficiency.\n\n## Library Usage\n\nThe exported Go API of this module should currently be considered unstable, and subject to \nbreaking changes. In the future, we may offer stability; please file an issue if there is \na use case where this would be valuable.\n\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer \nto [MIT](./LICENSE) for the full terms.\n",
  "category": null,
  "qualityScore": 80,
  "githubUrl": "https://github.com/yikakia/godoc-mcp-server",
  "programmingLanguage": "Go",
  "gitHubOrg": "yikakia",
  "gitHubRepo": "godoc-mcp-server",
  "repositoryPath": null,
  "gh_stars": 20,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "fc5313be8414ca38f541f2f324e9db164e64b65d",
  "last_scraped_at": "2025-08-01T13:16:58.450Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}