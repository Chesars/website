{
  "name": "trieve",
  "slug": "devflowinc__trieve__clients__mcp-server",
  "description": "All-in-one platform for search, recommendations, RAG, and analytics offered via API",
  "readme": "# trieve-mcp-server\n\n[![smithery badge](https://smithery.ai/badge/trieve-mcp-server)](https://smithery.ai/server/trieve-mcp-server)\n\nA Model Context Protocol (MCP) server that provides agentic tools for interacting with the Trieve API. This server enables AI agents to search and interact with Trieve datasets through a standardized interface.\n\n## Features\n\n- Search across Trieve datasets using semantic search\n- List and access dataset information\n- Support for both environment variables and command-line arguments\n- Built with TypeScript for type safety and better developer experience\n\n## Installation\n\n### Installing via Smithery\n\nTo install Trieve for Claude Desktop automatically via [Smithery](https://smithery.ai/server/trieve-mcp-server):\n\n```bash\nnpx -y @smithery/cli install trieve-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install trieve-mcp-server\n```\n\n## Configuration\n\nCopy the `.env.dist` file to `.env` and fill in your Trieve credentials:\n\n```bash\ncp .env.dist .env\n```\n\nRequired environment variables:\n- `TRIEVE_API_KEY`: Your Trieve API key from dashboard.trieve.ai\n- `TRIEVE_ORGANIZATION_ID`: Your Trieve organization ID from dashboard.trieve.ai\n\nOptional environment variables:\n- `TRIEVE_DATASET_ID`: Specific dataset ID to use (if not provided via CLI)\n\nCommand-line arguments (override environment variables):\n```bash\ntrieve-mcp-server --api-key <your-api-key> --org-id <your-org-id> [--dataset-id <dataset-id>]\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\ntrieve-mcp-server\n```\n\n### Available Tools\n\n#### search\nSearch through a specified Trieve dataset.\n\nParameters:\n- `query` (string): The search query\n- `datasetId` (string): ID of the dataset to search in\n- `searchType` (string, optional): \"semantic\" (default), \"fulltext\", \"hybrid\", or \"bm25\"\n- `filters` (object, optional): Advanced filtering options\n- `highlightOptions` (object, optional): Customize result highlighting\n- `page` (number, optional): Page number, default 1\n- `pageSize` (number, optional): Results per page, default 10\n\nExample:\n```json\n{\n  \"query\": \"example search query\",\n  \"datasetId\": \"your-dataset-id\",\n  \"searchType\": \"semantic\",\n  \"page\": 1,\n  \"pageSize\": 10\n}\n```\n\n### Available Resources\n\nThe server exposes Trieve datasets as resources with the following URI format:\n- `trieve://datasets/{dataset-id}`\n\n## Usage with Claude Desktop\n\nThe Trieve MCP Server supports MCP integration with [Claude Desktop](https://modelcontextprotocol.io/quickstart/user). Place the following in your Claude Desktop's `claude_desktop_config.json`.\n\n```json\n{\n  \"mcpServers\": {\n    \"trieve-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"trieve-mcp-server@latest\"],\n      \"env\": {\n        \"TRIEVE_API_KEY\": \"$TRIEVE_API_KEY\",\n        \"TRIEVE_ORGANIZATION_ID\": \"$TRIEVE_ORGANIZATION_ID\",\n        \"TRIEVE_DATASET_ID\": \"$TRIEVE_DATASET_ID\"\n      }\n    }\n  }\n}\n```\n\nNote: Instead of environment variables, `--api-key`, `--org-id`, and `--dataset-id` can be used as command-line arguments.\n\nOnce Claude Desktop starts, attachments will be available that correspond to the [datasets available to the Trieve organization](https://docs.trieve.ai/guides/create-organizations-and-dataset). These can be used to select a dataset. After that, begin chatting with Claude and ask for information about the dataset. Claude will use search as needed in order to filter and break down queries, and may make multiple queries depending on your task.\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Copy `.env.dist` to `.env` and configure your credentials\n4. Build the project:\n```bash\nnpm run build\n```\n\n### Scripts\n\n- `npm run build`: Build the TypeScript project\n- `npm run watch`: Watch for changes and rebuild\n- `npm run test`: Run tests\n- `npm run inspector`: Run the MCP inspector for debugging\n\n## License\n\nMIT\n",
  "category": null,
  "qualityScore": 94,
  "githubUrl": "https://github.com/devflowinc/trieve/tree/main/clients/mcp-server",
  "programmingLanguage": "Rust",
  "gitHubOrg": "devflowinc",
  "gitHubRepo": "trieve",
  "repositoryPath": "clients/mcp-server",
  "gh_stars": 2398,
  "gh_contributors": 30,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "1c2f75381fb9e3fa5dd3bc546b106c7c865d2904",
  "last_scraped_at": "2025-07-31T20:48:55.857Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}