{
  "name": "winx code agent",
  "slug": "gabrielmaialva33__winx-code-agent",
  "description": "✨ A high-performance code agent written in Rust, combining the best features of WCGW for maximum efficiency and semantic capabilities. 🦀",
  "readme": "<table style=\"width:100%\" align=\"center\" border=\"0\">\n  <tr>\n    <td width=\"40%\" align=\"center\"><img src=\".github/assets/fairy.png\" alt=\"Winx\" width=\"300\"></td>\n    <td><h1>✨ Ｗｉｎｘ Ａｇｅｎｔ ✨</h1></td>\n  </tr>\n</table>\n\n<p align=\"center\">\n  <strong>🦀 A high-performance Rust implementation of WCGW for code agents 🦀</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/language-Rust-orange?style=flat&logo=rust\" alt=\"Language\" />\n  <img src=\"https://img.shields.io/badge/license-MIT-blue?style=flat&logo=appveyor\" alt=\"License\" />\n  <img src=\"https://img.shields.io/github/languages/count/gabrielmaialva33/winx-code-agent?style=flat&logo=appveyor\" alt=\"GitHub language count\" >\n  <img src=\"https://img.shields.io/github/repo-size/gabrielmaialva33/winx-code-agent?style=flat&logo=appveyor\" alt=\"Repository size\" >\n  <a href=\"https://github.com/gabrielmaialva33/winx-code-agent/commits/main\">\n    <img src=\"https://img.shields.io/github/last-commit/gabrielmaialva33/winx-code-agent?style=flat&logo=appveyor\" alt=\"Last Commit\" >\n  </a>\n  <img src=\"https://img.shields.io/badge/made%20by-Maia-15c3d6?style=flat&logo=appveyor\" alt=\"Made by Maia\" >\n</p>\n\n---\n\n## 📖 Overview\n\nWinx is a Rust reimplementation of [WCGW](https://github.com/rusiaaman/wcgw), providing shell execution and file\nmanagement capabilities for LLM code agents. Designed for high performance and reliability, Winx integrates with Claude\nand other LLMs via the Model Context Protocol (MCP).\n\n## 🌟 Features\n\n- ⚡ **High Performance**: Implemented in Rust for maximum efficiency\n- 📁 **Advanced File Operations**:\n    - 📖 Read files with line range support\n    - ✏️ Write new files with syntax validation\n    - 🔍 Edit existing files with intelligent search/replace\n    - 🔄 Smart file caching with change detection\n    - 📏 Line-level granular read tracking\n- 🖥️ **Command Execution**:\n    - 🚀 Run shell commands with status tracking\n    - 📟 Interactive shell with persistent session\n    - ⌨️ Full input/output control via PTY\n    - 🏃‍♂️ Background process execution\n- 🔀 **Operational Modes**:\n    - 🔓 `wcgw`: Complete access to all features\n    - 🔎 `architect`: Read-only mode for planning and analysis\n    - 🔒 `code_writer`: Restricted access for controlled modifications\n- 📊 **Project Management**:\n    - 📝 Repository structure analysis\n    - 💾 Context saving and task resumption\n- 🖼️ **Media Support**: Read images and encode as base64\n- 🧩 **MCP Protocol**: Seamless integration with Claude and other LLMs\n\n---\n\n## 🖇️ Installation & Setup\n\n### Prerequisites\n\n- Rust 1.70 or higher\n- Tokio runtime\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/gabrielmaialva33/winx-code-agent.git && cd winx\n```\n\n### 2. Build the Project\n\n```bash\n# For development\ncargo build\n\n# For production\ncargo build --release\n```\n\n### 3. Run the Agent\n\n```bash\n# Using cargo\ncargo run\n\n# Or directly\n./target/release/winx-code-agent\n```\n\n---\n\n## 🔧 Integration with Claude\n\nWinx is designed to work seamlessly with Claude via the MCP interface:\n\n1. **Edit Claude's Configuration**\n   ```json\n   // In claude_desktop_config.json (Mac: ~/Library/Application Support/Claude/claude_desktop_config.json)\n   {\n     \"mcpServers\": {\n       \"winx\": {\n         \"command\": \"/path/to/winx-code-agent\",\n         \"args\": [],\n         \"env\": {\n           \"RUST_LOG\": \"info\"\n         }\n       }\n     }\n   }\n   ```\n\n2. **Restart Claude** after configuration to see the Winx MCP integration icon.\n\n3. **Start using the tools** through Claude's interface.\n\n---\n\n## 🛠️ Available Tools\n\n### 🚀 initialize\n\nAlways call this first to set up your workspace environment.\n\n```\ninitialize(\n  type=\"first_call\",\n  any_workspace_path=\"/path/to/project\",\n  mode_name=\"wcgw\"\n)\n```\n\n### 🖥️ bash_command\n\nExecute shell commands with persistent shell state and full interactive capabilities.\n\n```\n# Execute commands\nbash_command(\n  action_json={\"command\": \"ls -la\"},\n  chat_id=\"i1234\"\n)\n\n# Check command status\nbash_command(\n  action_json={\"status_check\": true},\n  chat_id=\"i1234\"\n)\n\n# Send input to running commands\nbash_command(\n  action_json={\"send_text\": \"y\"},\n  chat_id=\"i1234\"\n)\n\n# Send special keys (Ctrl+C, arrow keys, etc.)\nbash_command(\n  action_json={\"send_specials\": [\"Enter\", \"CtrlC\"]},\n  chat_id=\"i1234\"\n)\n```\n\n### 📁 File Operations\n\n- **read_files**: Read file content with line range support\n  ```\n  read_files(\n    file_paths=[\"/path/to/file.rs\"],\n    show_line_numbers_reason=null\n  )\n  ```\n\n- **file_write_or_edit**: Write or edit files\n  ```\n  file_write_or_edit(\n    file_path=\"/path/to/file.rs\",\n    percentage_to_change=100,\n    file_content_or_search_replace_blocks=\"content...\",\n    chat_id=\"i1234\"\n  )\n  ```\n\n- **read_image**: Process image files as base64\n  ```\n  read_image(\n    file_path=\"/path/to/image.png\"\n  )\n  ```\n\n### 💾 context_save\n\nSave task context for later resumption.\n\n```\ncontext_save(\n  id=\"task_name\",\n  project_root_path=\"/path/to/project\",\n  description=\"Task description\",\n  relevant_file_globs=[\"**/*.rs\"]\n)\n```\n\n---\n\n## 👨‍💻 Usage Workflow\n\n1. **Initialize the workspace**\n   ```\n   initialize(type=\"first_call\", any_workspace_path=\"/path/to/your/project\")\n   ```\n\n2. **Explore the codebase**\n   ```\n   bash_command(action_json={\"command\": \"find . -type f -name '*.rs' | sort\"}, chat_id=\"i1234\")\n   ```\n\n3. **Read key files**\n   ```\n   read_files(file_paths=[\"/path/to/important_file.rs\"])\n   ```\n\n4. **Make changes**\n   ```\n   file_write_or_edit(file_path=\"/path/to/file.rs\", percentage_to_change=30, \n   file_content_or_search_replace_blocks=\"<<<<<<< SEARCH\\nold code\\n=======\\nnew code\\n>>>>>>> REPLACE\", \n   chat_id=\"i1234\")\n   ```\n\n5. **Run tests**\n   ```\n   bash_command(action_json={\"command\": \"cargo test\"}, chat_id=\"i1234\")\n   ```\n\n6. **Save context for later**\n   ```\n   context_save(id=\"my_task\", project_root_path=\"/path/to/project\", \n   description=\"Implementation of feature X\", relevant_file_globs=[\"src/**/*.rs\"])\n   ```\n\n---\n\n## 🏷 Need Support or Assistance?\n\nIf you need help or have any questions about Winx, feel free to reach out via the following channels:\n\n- [GitHub Issues](https://github.com/gabrielmaialva33/winx-code-agent/issues/new?assignees=&labels=question&title=support%3A+):\n  Open a support issue on GitHub.\n- Email: gabrielmaialva33@gmail.com\n\n---\n\n## 🙏 Special Thanks\n\nA huge thank you to [rusiaaman](https://github.com/rusiaaman) for the inspiring work\non [WCGW](https://github.com/rusiaaman/wcgw), which served as the primary inspiration for this project. Winx\nreimplements WCGW's features in Rust for enhanced performance and reliability.\n\n---\n\n## 📜 License\n\nMIT\n",
  "category": null,
  "qualityScore": 78,
  "githubUrl": "https://github.com/gabrielmaialva33/winx-code-agent",
  "programmingLanguage": "Rust",
  "gitHubOrg": "gabrielmaialva33",
  "gitHubRepo": "winx-code-agent",
  "repositoryPath": null,
  "gh_stars": 5,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "2427c07d08f493aeffc1650ca2f6a0babe55a812",
  "last_scraped_at": "2025-08-01T13:16:29.700Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}