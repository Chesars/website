{
  "name": "zabbix",
  "slug": "mpeirone__zabbix-mcp-server",
  "description": "🔌 Complete MCP server for Zabbix integration - Connect AI assistants to Zabbix monitoring with 40+ tools for hosts, items, triggers, templates, problems, and more. Features read-only mode and comprehensive API coverage.",
  "readme": "# Zabbix MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n\nA comprehensive Model Context Protocol (MCP) server for Zabbix integration using FastMCP and python-zabbix-utils. This server provides complete access to Zabbix API functionality through MCP-compatible tools.\n\n<a href=\"https://glama.ai/mcp/servers/@mpeirone/zabbix-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mpeirone/zabbix-mcp-server/badge\" alt=\"zabbix-mcp-server MCP server\" />\n</a>\n\n## Features\n\n### 🏠 Host Management\n- `host_get` - Retrieve hosts with advanced filtering\n- `host_create` - Create new hosts with interfaces and templates\n- `host_update` - Update existing host configurations\n- `host_delete` - Remove hosts from monitoring\n\n### 👥 Host Group Management\n- `hostgroup_get` - Retrieve host groups\n- `hostgroup_create` - Create new host groups\n- `hostgroup_update` - Modify existing host groups\n- `hostgroup_delete` - Remove host groups\n\n### 📊 Item Management\n- `item_get` - Retrieve monitoring items with filtering\n- `item_create` - Create new monitoring items\n- `item_update` - Update existing items\n- `item_delete` - Remove monitoring items\n\n### ⚠️ Trigger Management\n- `trigger_get` - Retrieve triggers and alerts\n- `trigger_create` - Create new triggers\n- `trigger_update` - Modify existing triggers\n- `trigger_delete` - Remove triggers\n\n### 📋 Template Management\n- `template_get` - Retrieve monitoring templates\n- `template_create` - Create new templates\n- `template_update` - Update existing templates\n- `template_delete` - Remove templates\n\n### 🚨 Problem & Event Management\n- `problem_get` - Retrieve current problems and issues\n- `event_get` - Get historical events\n- `event_acknowledge` - Acknowledge events and problems\n\n### 📈 Data Retrieval\n- `history_get` - Access historical monitoring data\n- `trend_get` - Retrieve trend data and statistics\n\n### 👤 User Management\n- `user_get` - Retrieve user accounts\n- `user_create` - Create new users\n- `user_update` - Update user information\n- `user_delete` - Remove user accounts\n\n### 🔧 Maintenance Management\n- `maintenance_get` - Retrieve maintenance periods\n- `maintenance_create` - Schedule maintenance windows\n- `maintenance_update` - Modify maintenance periods\n- `maintenance_delete` - Remove maintenance schedules\n\n### 📊 Additional Features\n- `graph_get` - Retrieve graph configurations\n- `discoveryrule_get` - Get discovery rules\n- `itemprototype_get` - Retrieve item prototypes\n- `configuration_export` - Export Zabbix configurations\n- `configuration_import` - Import configurations\n- `apiinfo_version` - Get API version information\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://docs.astral.sh/uv/) package manager\n- Access to a Zabbix server with API enabled\n\n### Quick Start\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/mpeirone/zabbix-mcp-server.git\n   cd zabbix-mcp-server\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   uv sync\n   ```\n\n3. **Configure environment variables:**\n   ```bash\n   cp config/.env.example .env\n   # Edit .env with your Zabbix server details\n   ```\n\n4. **Test the installation:**\n   ```bash\n   uv run python scripts/test_server.py\n   ```\n\n## Configuration\n\n### Required Environment Variables\n\n- `ZABBIX_URL` - Your Zabbix server API endpoint (e.g., `https://zabbix.example.com`)\n\n### Authentication (choose one method)\n\n**Method 1: API Token (Recommended)**\n- `ZABBIX_TOKEN` - Your Zabbix API token\n\n**Method 2: Username/Password**\n- `ZABBIX_USER` - Your Zabbix username\n- `ZABBIX_PASSWORD` - Your Zabbix password\n\n### Optional Configuration\n\n- `READ_ONLY` - Set to `true`, `1`, or `yes` to enable read-only mode (only GET operations allowed)\n\n## Usage\n\n### Running the Server\n\n**With startup script (recommended):**\n```bash\nuv run python scripts/start_server.py\n```\n\n**Direct execution:**\n```bash\nuv run python src/zabbix_mcp_server.py\n```\n\n### Testing\n\n**Run test suite:**\n```bash\nuv run python scripts/test_server.py\n```\n\n### Read-Only Mode\n\nWhen `READ_ONLY=true`, the server will only expose GET operations (retrieve data) and block all create, update, and delete operations. This is useful for:\n\n- 📊 Monitoring dashboards\n- 🔍 Read-only integrations\n- 🔒 Security-conscious environments\n- 🛡️ Preventing accidental modifications\n\n### Example Tool Calls\n\n**Get all hosts:**\n```python\nhost_get()\n```\n\n**Get hosts in specific group:**\n```python\nhost_get(groupids=[\"1\"])\n```\n\n**Create a new host:**\n```python\nhost_create(\n    host=\"server-01\",\n    groups=[{\"groupid\": \"1\"}],\n    interfaces=[{\n        \"type\": 1,\n        \"main\": 1,\n        \"useip\": 1,\n        \"ip\": \"192.168.1.100\",\n        \"dns\": \"\",\n        \"port\": \"10050\"\n    }]\n)\n```\n\n**Get recent problems:**\n```python\nproblem_get(recent=True, limit=10)\n```\n\n**Get history data:**\n```python\nhistory_get(\n    itemids=[\"12345\"],\n    time_from=1640995200,\n    limit=100\n)\n```\n\n## MCP Integration\n\nThis server is designed to work with MCP-compatible clients like Claude Desktop. See [MCP_SETUP.md](MCP_SETUP.md) for detailed integration instructions.\n\n## Docker Support\n\n### Using Docker Compose\n\n1. **Configure environment:**\n   ```bash\n   cp config/.env.example .env\n   # Edit .env with your settings\n   ```\n\n2. **Run with Docker Compose:**\n   ```bash\n   docker compose up -d\n   ```\n\n### Building Docker Image\n\n```bash\ndocker build -t zabbix-mcp-server .\n```\n\n## Development\n\n### Project Structure\n\n```\nzabbix-mcp-server/\n├── src/\n│   └── zabbix_mcp_server.py    # Main server implementation\n├── scripts/\n│   ├── start_server.py         # Startup script with validation\n│   └── test_server.py          # Test script\n├── config/\n│   ├── .env.example           # Environment configuration template\n│   └── mcp.json               # MCP client configuration example\n├── pyproject.toml             # Python project configuration\n├── requirements.txt           # Dependencies\n├── Dockerfile                 # Docker configuration\n├── docker-compose.yml         # Docker Compose setup\n├── README.md                  # This file\n├── MCP_SETUP.md              # MCP integration guide\n├── CONTRIBUTING.md           # Contribution guidelines\n├── CHANGELOG.md              # Version history\n└── LICENSE                   # MIT license\n```\n\n### Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Running Tests\n\n```bash\n# Test server functionality\nuv run python scripts/test_server.py\n\n# Test with Docker\ndocker-compose exec zabbix-mcp python scripts/test_server.py\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling:\n\n- ✅ Authentication errors are clearly reported\n- 🔒 Read-only mode violations are blocked with descriptive messages\n- ✔️ Invalid parameters are validated\n- 🌐 Network and API errors are properly formatted\n- 📝 Detailed logging for troubleshooting\n\n## Security Considerations\n\n- 🔑 Use API tokens instead of username/password when possible\n- 🔒 Enable read-only mode for monitoring-only use cases\n- 🛡️ Secure your environment variables\n- 🔐 Use HTTPS for Zabbix server connections\n- 🔄 Regularly rotate API tokens\n- 📁 Store configuration files securely\n\n## Troubleshooting\n\n### Common Issues\n\n**Connection Failed:**\n- Verify `ZABBIX_URL` is correct and accessible\n- Check authentication credentials\n- Ensure Zabbix API is enabled\n\n**Permission Denied:**\n- Verify user has sufficient Zabbix permissions\n- Check if read-only mode is enabled when trying to modify data\n\n**Tool Not Found:**\n- Ensure all dependencies are installed: `uv sync`\n- Verify Python version compatibility (3.10+)\n\n### Debug Mode\n\nSet environment variable for detailed logging:\n```bash\nexport DEBUG=1\nuv run python scripts/start_server.py\n```\n\n## Dependencies\n\n- [FastMCP](https://github.com/jlowin/fastmcp) - MCP server framework\n- [python-zabbix-utils](https://github.com/zabbix/python-zabbix-utils) - Official Zabbix Python library\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- [Zabbix](https://www.zabbix.com/) for the monitoring platform\n- [Model Context Protocol](https://modelcontextprotocol.io/) for the integration standard\n- [FastMCP](https://github.com/jlowin/fastmcp) for the server framework\n\n## Support\n\n- 📖 [Documentation](README.md)\n- 🐛 [Issue Tracker](https://github.com/mpeirone/zabbix-mcp-server/issues)\n- 💬 [Discussions](https://github.com/mpeirone/zabbix-mcp-server/discussions)\n\n---\n\n**Made with ❤️ for the Zabbix and MCP communities**",
  "category": null,
  "qualityScore": 72,
  "githubUrl": "https://github.com/mpeirone/zabbix-mcp-server",
  "programmingLanguage": "Python",
  "gitHubOrg": "mpeirone",
  "gitHubRepo": "zabbix-mcp-server",
  "repositoryPath": null,
  "gh_stars": 33,
  "gh_contributors": 3,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "56a21e3382370897a74c09ddfd1d472403afd1ed",
  "last_scraped_at": "2025-07-31T20:48:53.676Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}