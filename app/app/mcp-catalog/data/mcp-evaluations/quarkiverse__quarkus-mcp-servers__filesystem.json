{
  "name": "quarkus  s",
  "slug": "quarkiverse__quarkus-mcp-servers__filesystem",
  "description": "Model Context Protocol Servers in Quarkus",
  "readme": "# Model Context Protocol Server for filesystem\n\nThis Model Context Protocol(MCP) server enables Large Language Models (LLMs) to list, read and modify files from the filesystem.\n\n![](images/filesystem-demo.png)\n\n## General Usage \n\n1. Install [jbang](https://www.jbang.dev/download/)\n2. Configure your MCP Client to run the server (see [Claude Desktop Config](#claude-desktop-config) below)\n\nUse the following command to start the server with access to specific paths.\n```shell\njbang filesystem@quarkiverse/quarkus-mcp-servers ~/code/quarkiverse ~/code/jbang \n```\n\n## Claude Desktop Config and [mcp-cli](https://github.com/chrishayuk/mcp-cli)\n\nAdd this to your `claude_desktop_config.json` or `server_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"jbang\",\n      \"args\": [\n        \"filesystem@quarkiverse/quarkus-mcp-servers\",\n        \"[path1]\",\n        \"[path2]\"\n      ]\n    }\n  }\n}\n```\n\n## Native Image/Executable\n\nUsing native image, the startup time is almost instant. \n\nYou can download the native images from the [release page](https://github.com/quarkiverse/quarkus-mcp-servers/releases).\n\nThen use the executable for your platform in your MCP client.\n\nExample for MacOS arm64 (M1, M2, etc.):\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"jbang\",\n      \"args\": [\n        \"mcp-server-filesystem-osx-aarch_64\",\n        \"[path1]\",\n        \"[path2]\"\n      ]\n    }\n  }\n}\n```\n\nYou can of course also rename the executable to something else, like `mcp-server-filesystem` if you want.\n\n### Troubleshooting\n\n**jbang not found**\n* Make sure you have `jbang` installed and available in your PATH\n* Alternatively, use full path to jbang executable (e.g. `/Users/username/.jbang/jbang`)\n\n**Get more logging**\n\nTo get more detailed logging you can add the following parameters to the jbang command line:\n\n```shell\n-Dquarkus.log.file.enable=true -Dquarkus.log.file.path=${user.home}/mcp-server-filesystem.log\n```\n\nExample:\n\n```shell\njbang -Dquarkus.log.file.enable=true -Dquarkus.log.file.path=${user.home}/mcp-server-filesystem.log filesystem@quarkiverse/quarkus-mcp-servers [path1] [path2] ...\n```\n\n### How was this made?\n\nThe MCP server uses Quarkus, the Supersonic Subatomic Java Framework and its Model Context Protocol support.\n\nIf you want to learn more about Quarkus MCP Server support, please see this [blog post](https://quarkus.io/blog/mcp-server/) \nand the Quarkus MCP Server [extension documentation](https://docs.quarkiverse.io/quarkus-mcp-server/dev/).\n\nTo launch the server it uses [jbang](https://jbang.dev/) to\nsetup Java and run the .jar as transparent as possible. Very similar to how `uvx`, `pipx`, `npmx` and others works; just for Java. ",
  "category": null,
  "qualityScore": 88,
  "githubUrl": "https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/filesystem",
  "programmingLanguage": "Java",
  "gitHubOrg": "quarkiverse",
  "gitHubRepo": "quarkus-mcp-servers",
  "repositoryPath": "filesystem",
  "gh_stars": 159,
  "gh_contributors": 9,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "d2c1caad14f71ba3995394ff2ae1e2971bad7125",
  "last_scraped_at": "2025-07-31T20:48:46.913Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}