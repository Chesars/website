{
  "name": "graphql forge",
  "slug": "unitvectory-labs__mcp-graphql-forge",
  "description": "A lightweight, configuration-driven MCP server that exposes curated GraphQL queries as modular tools, enabling intentional API interactions from your agents.",
  "readme": "[![GitHub release](https://img.shields.io/github/release/UnitVectorY-Labs/mcp-graphql-forge.svg)](https://github.com/UnitVectorY-Labs/mcp-graphql-forge/releases/latest) [![License](https://img.shields.io/badge/license-MIT-blue)](https://opensource.org/licenses/MIT) [![Active](https://img.shields.io/badge/Status-Active-green)](https://guide.unitvectorylabs.com/bestpractices/status/#active) [![Go Report Card](https://goreportcard.com/badge/github.com/UnitVectorY-Labs/mcp-graphql-forge)](https://goreportcard.com/report/github.com/UnitVectorY-Labs/mcp-graphql-forge)\n\n# mcp-graphql-forge\n\nA lightweight, configuration-driven MCP server that exposes curated GraphQL queries as modular tools, enabling intentional API interactions from your agents.\n\n## Purpose\n\n`mcp-graphql-forge` lets you turn any GraphQL endpoint into an MCP server whose tools are defined in YAML files that specify the GraphQL queries and their parameters. This allows you to create a modular, secure, and minimal server that can be easily extended without modifying the application code.\n\n## Releases\n\nAll official versions of **mcp-graphql-forge** are published on [GitHub Releases](https://github.com/UnitVectorY-Labs/mcp-graphql-forge/releases). Since this MCP server is written in Go, each release provides pre-compiled executables for macOS, Linux, and Windowsâ€”ready to download and run.\n\nAlternatively, if you have Go installed, you can install **mcp-graphql-forge** directly from source using the following command:\n\n```bash\ngo install github.com/UnitVectorY-Labs/mcp-graphql-forge@latest\n```\n\n## Configuration\n\nThe server is configured using environment variables and YAML files.\n\n### Environment Variables\n\n- `FORGE_CONFIG`: Specifies the path to the folder containing the YAML configuration files (`forge.yaml` and tool definitions). Defaults to the current directory (`.`) if not set.\n- `FORGE_DEBUG`: If set to `true` (case-insensitive), enables detailed debug logging to `stderr`, including the obtained token and the full HTTP request/response for GraphQL calls. Defaults to `false`.\n\n### forge.yaml\n\nThe configuration folder uses a special configuration file `forge.yaml` that specifies the common configuration attributes.\n\nThe following attributes can be specified in the file:\n\n- `name`: The name of the MCP server\n- `url`: The URL of the GraphQL endpoint\n- `token_command`: The command to use to request the Bearer token for the `Authorization` header (optional)\n- `env`: A map of environment variables to pass to the token command (optional)\n- `env_passthrough`: If set to `true`, passes all environment variables used when invoking mcp-graphql-forge to the token command; if used in conjunction with `env`, the variables from `env` will take precedence (optional, defaults to `false`)\n\nAn example configuration would look like:\n\n```yaml\nname: \"ExampleServer\"\nurl: \"https://api.github.com/graphql\"\ntoken_command: \"gh auth token\"\n```\n\n### Tool Configuration\n\nAll other YAML files located in the folder are treated as configuration files. Each YAML file defines a tool for the MCP server.\n\n\nThe following attributes can be specified in the file:\n\n- `name`: The name of the MCP tool\n- `description`: The description of the MCP tool\n- `query`: The GraphQL query to execute\n- `inputs`: The list of inputs defined by the MCP tool and passed into the GraphQL query as variables\n  - `name`: The name of the input\n  - `type`: The parameter type; can be 'string' or 'number'\n  - `description`: The description of the parameter for the MCP tool to use\n  - `required`: Boolean value specifying if the attribute is required\n- `annotations`: MCP annotations that provide hints about the tool's behavior (optional)\n  - `title`: A human-readable title for the tool, useful for UI display (optional)\n  - `readOnlyHint`: If true, indicates the tool does not modify its environment (optional, default: false)\n  - `destructiveHint`: If true, the tool may perform destructive updates (only meaningful when readOnlyHint is false) (optional, default: true)\n  - `idempotentHint`: If true, calling the tool repeatedly with the same arguments has no additional effect (only meaningful when readOnlyHint is false) (optional, default: false)\n  - `openWorldHint`: If true, the tool may interact with an \"open world\" of external entities (optional, default: true)\n\nAn example configuration would look like:\n\n```yaml\nname: \"getUser\"\ndescription: \"Fetch basic information about a user by `login`, including their name, URL, and location.\"\nquery: |\n  query ($login: String!) {\n    user(login: $login) {\n      id\n      name\n      url\n      location\n    }\n  }\ninputs:\n  - name: \"login\"\n    type: \"string\"\n    description: \"The user `login` that uniquely identifies their account.\"\n    required: true\nannotations:\n  title: \"Get User Information\"\n  readOnlyHint: true\n  destructiveHint: false\n  idempotentHint: true\n  openWorldHint: true\n```\n\n### Run in SSE Mode\n\nBy default the server runs in stdio mode, but if you want to run in SSE mode, you can specify the `--sse` command line flag specifying the server name and port (ex: localhost:8080).  This will run with the following endpoints that your MCP client can connect to:\n\n- SSE Endpoint: /mcp/sse\n- Message Endpoint: /mcp/message\n\n## Limitations\n\n- Each instance of `mcp-graphql-forge` can only be used with a single GraphQL server at a single URL.\n- All requests use the same Authorization header in the form of a Bearer token.\n- The GraphQL queries are all exposed as Tools and not as Resources, even if they are not mutations. This is because not all MCP clients currently support Resources.\n",
  "category": null,
  "qualityScore": 80,
  "githubUrl": "https://github.com/UnitVectorY-Labs/mcp-graphql-forge",
  "programmingLanguage": "Go",
  "gitHubOrg": "UnitVectorY-Labs",
  "gitHubRepo": "mcp-graphql-forge",
  "repositoryPath": null,
  "gh_stars": 1,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "a77049e4d059d17415eab3179795359dc38cfbfe",
  "last_scraped_at": "2025-08-01T15:33:29.146Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}