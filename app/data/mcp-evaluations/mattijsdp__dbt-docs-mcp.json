{
  "name": "dbt docs",
  "slug": "mattijsdp__dbt-docs-mcp",
  "description": "MCP (model context protocol) server for interacting with dbt Docs",
  "readme": "[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/ad4aaf73-63ce-42e0-b27c-8541ae1fbab8)\n\n# dbt-docs-mcp\n\nModel Context Protocol (MCP) server for interacting with dbt project metadata, including dbt Docs artifacts (`manifest.json`, `catalog.json`). This server exposes dbt graph information and allows querying node details, model/column lineage, and related metadata.\n\n## Key Functionality\n\nThis server provides tools to:\n\n*   **Search dbt Nodes:**\n    *   Find nodes (models, sources, tests, etc.) by name (`search_dbt_node_names`).\n    *   Locate nodes based on column names (`search_dbt_column_names`).\n    *   Search within the compiled SQL code of nodes (`search_dbt_sql_code`).\n*   **Inspect Nodes:**\n    *   Retrieve detailed attributes for any given node unique ID (`get_dbt_node_attributes`).\n*   **Explore Lineage:**\n    *   Find direct upstream dependencies (predecessors) of a node (`get_dbt_predecessors`).\n    *   Find direct downstream dependents (successors) of a node (`get_dbt_successors`).\n*   **Column-Level Lineage:**\n    *   Trace all upstream sources for a specific column in a model (`get_column_ancestors`).\n    *   Trace all downstream dependents of a specific column in a model (`get_column_descendants`).\n*   **Suggested extensions:**\n    *   Tool that allows executing SQL queries.\n    *   Tool that retrieves table/view/column metadata directly from the database.\n    *   Tool to search knowledge-base.\n\n## Getting Started\n\n1.  **Prerequisites:** Ensure you have Python installed and [uv](https://docs.astral.sh/uv/)\n2.  **Clone the repo:**\n    ```bash\n    git clone <repository-url>\n    cd dbt-docs-mcp\n    ```\n3.  **Optional: parse dbt manifest for column-level lineage:**\n    - Setup the required Python environment, e.g.:\n    ```bash\n    uv sync\n    ```\n    - Use the provided script `scripts/create_manifest_cl.py` and simply provide the path to your dbt manifest, dbt catalog and the desired output paths for your schema and column lineage file:\n    ```bash\n    python scripts/create_manifest_cl.py --manifest-path PATH_TO_YOUR_MANIFEST_FILE --catalog-path PATH_TO_YOUR_CATALOG_FILE --schema-mapping-path DESIRED_OUTPUT_PATH_FOR_SCHEMA_MAPPING --manifest-cl-path DESIRED_OUTPUT_PATH_FOR_MANIFEST_CL\n    ```\n    - Depending on your dbt project size, creating column-lineage can take a while (hours)\n4.  **Run the Server:**\n    - If your desired MCP client (Claude desktop, Cursor, etc.) supports mcp.json it would look as below:\n    ```json\n    {\n        \"mcpServers\": {\n            \"DBT Docs MCP\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"run\",\n                \"--with\",\n                \"networkx,mcp[cli],rapidfuzz,dbt-core,python-decouple,sqlglot,tqdm\",\n                \"mcp\",\n                \"run\",\n                \"/Users/mattijs/repos/dbt-docs-mcp/src/mcp_server.py\"\n            ],\n            \"env\": {\n                \"MANIFEST_PATH\": \"/Users/mattijs/repos/dbt-docs-mcp/inputs/manifest.json\",\n                \"SCHEMA_MAPPING_PATH\": \"/Users/mattijs/repos/dbt-docs-mcp/outputs/schema_mapping.json\",\n                \"MANIFEST_CL_PATH\": \"/Users/mattijs/repos/dbt-docs-mcp/outputs/manifest_column_lineage.json\"\n            }\n            }\n        }\n    }\n    ```\n",
  "category": null,
  "qualityScore": 82,
  "githubUrl": "https://github.com/mattijsdp/dbt-docs-mcp",
  "programmingLanguage": "Python",
  "gitHubOrg": "mattijsdp",
  "gitHubRepo": "dbt-docs-mcp",
  "repositoryPath": null,
  "gh_stars": 12,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "c8137b3f9d54449c6994493656dec96562388225",
  "last_scraped_at": "2025-07-29T19:14:59.920Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}