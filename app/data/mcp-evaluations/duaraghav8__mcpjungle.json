{
  "name": "Jungle",
  "slug": "duaraghav8__mcpjungle",
  "description": "Self-hosted MCP Registry + Gateway for AI agents",
  "readme": "<h1 align=\"center\">\n  :deciduous_tree: MCPJungle :deciduous_tree:\n</h1>\n<p align=\"center\">\n  Self-hosted MCP Server registry for your private AI agents\n</p>\n<p align=\"center\">\n  <a href=\"https://discord.gg/TSrUCTw9\" style=\"text-decoration: none;\">\n    <img src=\"https://img.shields.io/badge/Discord-MCPJungle-5865F2?style=flat-square&logo=discord&logoColor=white\" alt=\"Discord\" style=\"max-width: 100%;\">\n  </a>\n</p>\n\nMCPJungle is a single source-of-truth registry for all [Model Context Protocol](https://modelcontextprotocol.io/introduction) based Servers running in your Organisation.\n\nüßë‚Äçüíª Developers use it to register & manage MCP servers and the tools they provide from a central place.\n\nü§ñ AI Agents use it to discover and consume all these tools from a single MCP Server.\n\n![diagram](./assets/mcpjungle-diagram/mcpjungle-diagram.png)\n\n<p align=\"center\">MCPJungle is the only MCP Server your agents need to connect to!</p>\n\n## Who should use MCPJungle?\n1. Individuals using MCP Clients like Claude & Cursor that need to access multiple MCP servers for tools.\n2. Devs building AI Agents that need to access MCP servers with built-in **security** and **Access Control**.\n3. Organisations wanting to track all their MCP servers from one centralized place. Hosted in their own datacenter üîí\n\n## Installation\n\n> [!WARNING]\n> MCPJungle is **BETA** software.\n>\n> We're actively working to make it production-ready.\n> You can provide your feedback by [starting a discussion](https://github.com/mcpjungle/MCPJungle/discussions) in this repository.\n\nMPCJungle is shipped as a stand-alone binary.\n\nYou can either download it from the [Releases](https://github.com/mcpjungle/MCPJungle/releases) Page or use [Homebrew](https://brew.sh/) to install it:\n\n```bash\n$ brew install mcpjungle/mcpjungle/mcpjungle\n```\n\nVerify your installation by running\n\n```bash\n$ mcpjungle version\n```\n\n> [!IMPORTANT]\n> On MacOS, you will have to use homebrew because the compiled binary is not [Notarized](https://developer.apple.com/documentation/security/notarizing-macos-software-before-distribution) yet.\n\n\n## Usage\n\nMCPJungle has a Client-Server architecture and the binary lets you run both a Server and a Client.\n\n### Server\nFor running the MCPJungle server locally, docker compose is the recommended way:\n```shell\ncurl -O https://raw.githubusercontent.com/mcpjungle/MCPJungle/refs/heads/main/docker-compose.yaml\ndocker-compose up -d\n```\n\nOtherwise, you can run the server directly using the binary:\n```bash\n$ mcpjungle start\n```\n\nThis starts the main registry server responsible for managing all MCP servers. It is accessible on port `8080` by default.\n\nThe server also exposes its own MCP server at `/mcp` for AI Agents to discover and call Tools provided by the registered MCP Servers.\n\nIt relies on a database and by default, creates a SQLite DB in the current working directory.\nAlternatively, you can supply a DSN for a Postgresql database to the server:\n\n```bash\n$ export DATABASE_URL=postgres://admin:root@localhost:5432/mcpjungle_db\n$ mcpjungle start\n```\n\nIf you use docker-compose, the DB is automatically created and managed for you.\n\n### Client\nOnce the server is up, you can use the CLI to interact with it.\n\nLet's say you're already running a MCP server locally at `http://127.0.0.1:8000/mcp` which provides basic math tools like `add`, `subtract`, etc.\n\nYou can register this MCP server with MCPJungle:\n```bash\n$ mcpjungle register --name calculator --description \"Provides some basic math tools\" --url http://127.0.0.1:8000/mcp\n```\n\nIf you used docker-compose to run the server, and you're not on Linux, you will have to use `host.docker.internal` instead of your local loopback address.\n```bash\n$ mcpjungle register --name calculator --description \"Provides some basic math tools\" --url http://host.docker.internal:8000/mcp\n```\n\nThe registry will now start tracking this MCP server and load its tools.\n\n![register a MCP server in MCPJungle](./assets/register-mcp-server.png)\n\n**Note**: MCPJungle currently only supports MCP Servers using the [Streamable HTTP Transport](https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#streamable-http).\n\nAll tools provided by this server are now accessible via MCPJungle:\n\n```bash\n$ mcpjungle list tools\n\n# Check tool usage\n$ mcpjungle usage calculator__multiply\n\n# Call a tool\n$ mcpjungle invoke calculator__multiply --input '{\"a\": 100, \"b\": 50}'\n\n```\n\n![Call a tool via MCPJungle Proxy MCP server](./assets/tool-call.png)\n\n> [!NOTE]\n> A tool in MCPJungle must be referred to by its canonical name which follows the pattern `<mcp-server-name>__<tool-name>`.\n> Server name and tool name are separated by a double underscore `__`.\n>\n> eg- If you register a MCP server `github` which provides a tool called `git_commit`, you can invoke it in MCPJungle using the name `github__git_commit`.\n> \n> Your AI Agent must also use this canonical name to call the tool via MCPJungle.\n\n\nFinally, you can remove a MCP server from the registry:\n```bash\n$ mcpjungle deregister calculator\n```\n\nAfter running this, the registry will stop tracking this server and its tools will no longer be available to use.\n\n### Integration with other MCP Clients\nAssuming that MCPJungle is running on `http://localhost:8080`, use the following configurations to connect to it:\n\n**Cursor**\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"url\": \"http://localhost:8080/mcp\"\n    }\n  }\n}\n```\n\n**Claude**\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8080/mcp\",\n        \"--allow-http\"\n      ]\n    }\n  }\n}\n```\n\n### Enabling/Disabling Tools\nYou can enable or disable a specific tool or all the tools provided by an MCP Server.\n\nIf a tool is disabled, it is not available via the MCPJungle Proxy, so no MCP clients can view or call it.\n\n```bash\n# disable the `get-library-docs` tool provided by the `context7` MCP server\nmcpjungle disable context7__get-library-docs\n\n# re-enable the tool\nmcpjungle enable context7__get-library-docs\n\n# disable all tools provided by the `context7` MCP server\nmcpjungle disable context7\n\n# re-enable all tools of `context7`\nmcpjungle enable context7\n```\n\nA disabled tool is still accessible via mcpjungle's HTTP API, so you can still manage it from the CLI (or any other HTTP client).\n\n> [!NOTE]\n> When a new server is registered in MCPJungle, all its tools are **enabled** by default.\n\n### Authentication\nMCPJungle currently supports authentication if your MCP Server accepts static tokens for auth.\n\nThis is useful when using SaaS-provided MCP Servers like HuggingFace, Stripe, etc. which require your API token for authentication.\n\nYou can supply your token while registering the MCP server:\n```bash\n# If you specify the `--bearer-token` flag, MCPJungle will add the `Authorization: Bearer <token>` header to all requests made to this MCP server.\n$ mcpjungle register --name huggingface --description \"HuggingFace MCP Server\" --url https://huggingface.co/mcp --bearer-token <your-hf-api-token>\n```\n\nSupport for Oauth flow is coming soon!\n\n### Enterprise Features üîí\n\nIf you're running MCPJungle in your organisation, we recommend running the Server in the `production` mode:\n```bash\n# enable enterprise features by running in production mode\n$ mcpjungle start --prod\n\n# you can also specify the server mode as environment variable (valid values are `development` and `production`)\n$ export SERVER_MODE=production\n$ mcpjungle start\n\n# this also works when running the server via docker-compose\n$ SERVER_MODE=production docker-compose up\n```\n\nBy default, mcpjungle server runs in `development` mode which is ideal for individuals running it locally.\n\nIn Production mode, the server enforces stricter security policies and will provide additional features like Authentication, ACLs, observability and more.\n\nAfter starting the server in production mode, you must initialize it by running the following command on your client machine:\n```bash\n$ mcpjungle init-server\n```\n\nThis will create an admin user in the server and store its API access token in your home directory (`~/.mcpjungle.conf`).\n\nYou can then use the mcpjungle cli to make authenticated requests to the server.\n\n#### Access Control\n\nIn `development` mode, all MCP clients have full access to all the MCP servers registered in MCPJungle Proxy.\n\n`production` mode lets you control which MCP clients can access which MCP servers.\n\nSuppose you have registered 2 MCP servers `calculator` and `github` in MCPJungle in production mode.\n\nBy default, no MCP client can access these servers. **You must create an MCP Client in mcpjungle and explicitly allow it to access the MCP servers.**\n\n```bash\n# Create a new MCP client for your Cursor IDE to use. It can access the calculator and github MCP servers\n$ mcpjungle create mcp-client cursor-local --allow \"calculator, github\"\n\nMCP client 'cursor-local' created successfully!\nServers accessible: calculator,github\n\nAccess token: 1YHf2LwE1LXtp5lW_vM-gmdYHlPHdqwnILitBhXE4Aw\nSend this token in the `Authorization: Bearer {token}` HTTP header.\n```\n\nMcpjungle creates an access token for your client.\nConfigure your client or agent to send this token in the `Authorization` header when making requests to the mcpjungle proxy.\n\nFor example, you can add the following configuration in Cursor to connect to MCPJungle:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"url\": \"http://localhost:8080/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer 1YHf2LwE1LXtp5lW_vM-gmdYHlPHdqwnILitBhXE4Aw\"\n      }\n    }\n  }\n}\n```\n\nA client that has access to a particular server this way can view and call all the tools provided by that server.\n\n> [!NOTE]\n> If you don't specify the `--allow` flag, the MCP client will not be able to access any MCP servers.\n\n## Contributing üíª\n\nIf you're interested in contributing to MCPJungle, see [Developer Docs](./docs/developer.md).\n",
  "category": null,
  "qualityScore": 81,
  "githubUrl": "https://github.com/duaraghav8/MCPJungle",
  "programmingLanguage": "Go",
  "gitHubOrg": "duaraghav8",
  "gitHubRepo": "MCPJungle",
  "repositoryPath": null,
  "gh_stars": 209,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "102ddbe844bd6d8d1f44ba1516447afac0226f98",
  "last_scraped_at": "2025-07-29T19:03:50.771Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}