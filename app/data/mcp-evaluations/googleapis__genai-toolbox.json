{
  "name": "genai toolbox",
  "slug": "googleapis__genai-toolbox",
  "description": "MCP Toolbox for Databases is an open source MCP server for databases.",
  "readme": "![logo](./logo.png)\n\n# MCP Toolbox for Databases\n\n[![Docs](https://img.shields.io/badge/docs-MCP_Toolbox-blue)](https://googleapis.github.io/genai-toolbox/)\n[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?style=flat&logo=discord&logoColor=white)](https://discord.gg/Dmm69peqjh)\n[![Medium](https://img.shields.io/badge/Medium-12100E?style=flat&logo=medium&logoColor=white)](https://medium.com/@mcp_toolbox)\n[![Go Report Card](https://goreportcard.com/badge/github.com/googleapis/genai-toolbox)](https://goreportcard.com/report/github.com/googleapis/genai-toolbox)\n\n> [!NOTE]\n> MCP Toolbox for Databases is currently in beta, and may see breaking\n> changes until the first stable release (v1.0).\n\nMCP Toolbox for Databases is an open source MCP server for databases. It enables\nyou to develop tools easier, faster, and more securely by handling the complexities\nsuch as connection pooling, authentication, and more.\n\nThis README provides a brief overview. For comprehensive details, see the [full\ndocumentation](https://googleapis.github.io/genai-toolbox/).\n\n> [!NOTE]\n> This solution was originally named “Gen AI Toolbox for Databases” as\n> its initial development predated MCP, but was renamed to align with recently\n> added MCP compatibility.\n\n<!-- TOC ignore:true -->\n## Table of Contents\n\n<!-- TOC -->\n\n- [Why Toolbox?](#why-toolbox)\n- [General Architecture](#general-architecture)\n- [Getting Started](#getting-started)\n  - [Installing the server](#installing-the-server)\n  - [Running the server](#running-the-server)\n  - [Integrating your application](#integrating-your-application)\n- [Configuration](#configuration)\n  - [Sources](#sources)\n  - [Tools](#tools)\n  - [Toolsets](#toolsets)\n- [Versioning](#versioning)\n- [Contributing](#contributing)\n- [Community](#community)\n\n<!-- /TOC -->\n\n## Why Toolbox?\n\nToolbox helps you build Gen AI tools that let your agents access data in your\ndatabase. Toolbox provides:\n\n- **Simplified development**: Integrate tools to your agent in less than 10\n  lines of code, reuse tools between multiple agents or frameworks, and deploy\n  new versions of tools more easily.\n- **Better performance**: Best practices such as connection pooling,\n  authentication, and more.\n- **Enhanced security**: Integrated auth for more secure access to your data\n- **End-to-end observability**: Out of the box metrics and tracing with built-in\n  support for OpenTelemetry.\n\n**⚡ Supercharge Your Workflow with an AI Database Assistant ⚡**\n\nStop context-switching and let your AI assistant become a true co-developer. By\n[connecting your IDE to your databases with MCP Toolbox][connect-ide], you can\ndelegate complex and time-consuming database tasks, allowing you to build faster\nand focus on what matters. This isn't just about code completion; it's about\ngiving your AI the context it needs to handle the entire development lifecycle.\n\nHere’s how it will save you time:\n\n- **Query in Plain English**: Interact with your data using natural language\n  right from your IDE. Ask complex questions like, *\"How many orders were\n  delivered in 2024, and what items were in them?\"* without writing any SQL.\n- **Automate Database Management**: Simply describe your data needs, and let the\n  AI assistant manage your database for you. It can handle generating queries,\n  creating tables, adding indexes, and more.\n- **Generate Context-Aware Code**: Empower your AI assistant to generate\n  application code and tests with a deep understanding of your real-time\n  database schema.  This accelerates the development cycle by ensuring the\n  generated code is directly usable.\n- **Slash Development Overhead**: Radically reduce the time spent on manual\n  setup and boilerplate. MCP Toolbox helps streamline lengthy database\n  configurations, repetitive code, and error-prone schema migrations.\n\nLearn [how to connect your AI tools (IDEs) to Toolbox using MCP][connect-ide].\n\n[connect-ide]: https://googleapis.github.io/genai-toolbox/how-to/connect-ide/\n\n## General Architecture\n\nToolbox sits between your application's orchestration framework and your\ndatabase, providing a control plane that is used to modify, distribute, or\ninvoke tools. It simplifies the management of your tools by providing you with a\ncentralized location to store and update tools, allowing you to share tools\nbetween agents and applications and update those tools without necessarily\nredeploying your application.\n\n![architecture](./docs/en/getting-started/introduction/architecture.png)\n\n## Getting Started\n\n### Installing the server\n\nFor the latest version, check the [releases page][releases] and use the\nfollowing instructions for your OS and CPU architecture.\n\n[releases]: https://github.com/googleapis/genai-toolbox/releases\n\n<details open>\n<summary>Binary</summary>\n\nTo install Toolbox as a binary:\n\n<!-- {x-release-please-start-version} -->\n```sh\n# see releases page for other versions\nexport VERSION=0.10.0\ncurl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox\nchmod +x toolbox\n```\n\n</details>\n\n<details>\n<summary>Container image</summary>\nYou can also install Toolbox as a container:\n\n```sh\n# see releases page for other versions\nexport VERSION=0.10.0\ndocker pull us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:$VERSION\n```\n\n</details>\n\n<details>\n<summary>Homebrew</summary>\n\nTo install Toolbox using Homebrew on macOS or Linux:\n\n```sh\nbrew install mcp-toolbox\n```\n\n</details>\n\n<details>\n<summary>Compile from source</summary>\n\nTo install from source, ensure you have the latest version of\n[Go installed](https://go.dev/doc/install), and then run the following command:\n\n```sh\ngo install github.com/googleapis/genai-toolbox@v0.10.0\n```\n<!-- {x-release-please-end} -->\n\n</details>\n\n### Running the server\n\n[Configure](#configuration) a `tools.yaml` to define your tools, and then\nexecute `toolbox` to start the server:\n\n```sh\n./toolbox --tools-file \"tools.yaml\"\n```\n\n> [!NOTE]\n> Toolbox enables dynamic reloading by default. To disable, use the\n> `--disable-reload` flag.\n\n#### Homebrew Users\n\nIf you installed Toolbox using Homebrew, the `toolbox` binary is available in your system path. You can start the server with the same command:\n\n```sh\ntoolbox --tools-file \"tools.yaml\"\n```\n\nYou can use `toolbox help` for a full list of flags! To stop the server, send a\nterminate signal (`ctrl+c` on most platforms).\n\nFor more detailed documentation on deploying to different environments, check\nout the resources in the [How-to\nsection](https://googleapis.github.io/genai-toolbox/how-to/)\n\n### Integrating your application\n\nOnce your server is up and running, you can load the tools into your\napplication. See below the list of Client SDKs for using various frameworks:\n\n<details open>\n  <summary>Python (<a href=\"https://github.com/googleapis/mcp-toolbox-sdk-python\">Github</a>)</summary>\n  <br>\n  <blockquote>\n\n  <details open>\n    <summary>Core</summary>\n\n1. Install [Toolbox Core SDK][toolbox-core]:\n\n    ```bash\n    pip install toolbox-core\n    ```\n\n1. Load tools:\n\n    ```python\n    from toolbox_core import ToolboxClient\n\n    # update the url to point to your server\n    async with ToolboxClient(\"http://127.0.0.1:5000\") as client:\n\n        # these tools can be passed to your application!\n        tools = await client.load_toolset(\"toolset_name\")\n    ```\n\nFor more detailed instructions on using the Toolbox Core SDK, see the\n[project's README][toolbox-core-readme].\n\n[toolbox-core]: https://pypi.org/project/toolbox-core/\n[toolbox-core-readme]: https://github.com/googleapis/mcp-toolbox-sdk-python/tree/main/packages/toolbox-core/README.md\n\n  </details>\n  <details>\n    <summary>LangChain / LangGraph</summary>\n\n1. Install [Toolbox LangChain SDK][toolbox-langchain]:\n\n    ```bash\n    pip install toolbox-langchain\n    ```\n\n1. Load tools:\n\n    ```python\n    from toolbox_langchain import ToolboxClient\n\n    # update the url to point to your server\n    async with ToolboxClient(\"http://127.0.0.1:5000\") as client:\n\n        # these tools can be passed to your application!\n        tools = client.load_toolset()\n    ```\n\n    For more detailed instructions on using the Toolbox LangChain SDK, see the\n    [project's README][toolbox-langchain-readme].\n\n    [toolbox-langchain]: https://pypi.org/project/toolbox-langchain/\n    [toolbox-langchain-readme]: https://github.com/googleapis/mcp-toolbox-sdk-python/blob/main/packages/toolbox-langchain/README.md\n\n  </details>\n  <details>\n    <summary>LlamaIndex</summary>\n\n1. Install [Toolbox Llamaindex SDK][toolbox-llamaindex]:\n\n    ```bash\n    pip install toolbox-llamaindex\n    ```\n\n1. Load tools:\n\n    ```python\n    from toolbox_llamaindex import ToolboxClient\n\n    # update the url to point to your server\n    async with ToolboxClient(\"http://127.0.0.1:5000\") as client:\n\n        # these tools can be passed to your application!\n        tools = client.load_toolset()\n    ```\n\n    For more detailed instructions on using the Toolbox Llamaindex SDK, see the\n    [project's README][toolbox-llamaindex-readme].\n\n    [toolbox-llamaindex]: https://pypi.org/project/toolbox-llamaindex/\n    [toolbox-llamaindex-readme]: https://github.com/googleapis/genai-toolbox-llamaindex-python/blob/main/README.md\n\n  </details>\n</details>\n</blockquote>\n<details>\n  <summary>Javascript/Typescript (<a href=\"https://github.com/googleapis/mcp-toolbox-sdk-js\">Github</a>)</summary>\n  <br>\n  <blockquote>\n\n  <details open>\n    <summary>Core</summary>\n\n1. Install [Toolbox Core SDK][toolbox-core-js]:\n\n    ```bash\n    npm install @toolbox-sdk/core\n    ```\n\n1. Load tools:\n\n    ```javascript\n    import { ToolboxClient } from '@toolbox-sdk/core';\n\n    // update the url to point to your server\n    const URL = 'http://127.0.0.1:5000';\n    let client = new ToolboxClient(URL);\n\n    // these tools can be passed to your application!\n    const tools = await client.loadToolset('toolsetName');\n    ```\n\n    For more detailed instructions on using the Toolbox Core SDK, see the\n    [project's README][toolbox-core-js-readme].\n\n    [toolbox-core-js]: https://www.npmjs.com/package/@toolbox-sdk/core\n    [toolbox-core-js-readme]: https://github.com/googleapis/mcp-toolbox-sdk-js/blob/main/packages/toolbox-core/README.md\n\n  </details>\n  <details>\n    <summary>LangChain / LangGraph</summary>\n\n1. Install [Toolbox Core SDK][toolbox-core-js]:\n\n    ```bash\n    npm install @toolbox-sdk/core\n    ```\n\n2. Load tools:\n\n    ```javascript\n    import { ToolboxClient } from '@toolbox-sdk/core';\n\n    // update the url to point to your server\n    const URL = 'http://127.0.0.1:5000';\n    let client = new ToolboxClient(URL);\n\n    // these tools can be passed to your application!\n    const toolboxTools = await client.loadToolset('toolsetName');\n\n    // Define the basics of the tool: name, description, schema and core logic\n    const getTool = (toolboxTool) => tool(currTool, {\n        name: toolboxTool.getName(),\n        description: toolboxTool.getDescription(),\n        schema: toolboxTool.getParamSchema()\n    });\n\n    // Use these tools in your Langchain/Langraph applications\n    const tools = toolboxTools.map(getTool);\n    ```\n\n  </details>\n  <details>\n    <summary>Genkit</summary>\n\n1. Install [Toolbox Core SDK][toolbox-core-js]:\n\n    ```bash\n    npm install @toolbox-sdk/core\n    ```\n\n2. Load tools:\n\n    ```javascript\n    import { ToolboxClient } from '@toolbox-sdk/core';\n    import { genkit } from 'genkit';\n\n    // Initialise genkit\n    const ai = genkit({\n        plugins: [\n            googleAI({\n                apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY\n            })\n        ],\n        model: googleAI.model('gemini-2.0-flash'),\n    });\n\n    // update the url to point to your server\n    const URL = 'http://127.0.0.1:5000';\n    let client = new ToolboxClient(URL);\n\n    // these tools can be passed to your application!\n    const toolboxTools = await client.loadToolset('toolsetName');\n\n    // Define the basics of the tool: name, description, schema and core logic\n    const getTool = (toolboxTool) => ai.defineTool({\n        name: toolboxTool.getName(),\n        description: toolboxTool.getDescription(),\n        schema: toolboxTool.getParamSchema()\n    }, toolboxTool)\n\n    // Use these tools in your Genkit applications\n    const tools = toolboxTools.map(getTool);\n    ```\n\n  </details>\n</details>\n</blockquote>\n<details>\n  <summary>Go (<a href=\"https://github.com/googleapis/mcp-toolbox-sdk-go\">Github</a>)</summary>\n  <br>\n  <blockquote>\n\n  <details open>\n    <summary>Core</summary>\n\n1. Install [Toolbox Go SDK][toolbox-go]:\n\n    ```bash\n    go get github.com/googleapis/mcp-toolbox-sdk-go\n    ```\n\n1. Load tools:\n\n    ```go\n    package main\n\n    import (\n      \"github.com/googleapis/mcp-toolbox-sdk-go/core\"\n      \"context\"\n    )\n\n    func main() {\n      // Make sure to add the error checks\n      // update the url to point to your server\n      URL := \"http://127.0.0.1:5000\";\n      ctx := context.Background()\n\n      client, err := core.NewToolboxClient(URL)\n\n      // Framework agnostic tools\n      tools, err := client.LoadToolset(\"toolsetName\", ctx)\n    }\n    ```\n\n    For more detailed instructions on using the Toolbox Go SDK, see the\n    [project's README][toolbox-core-go-readme].\n\n    [toolbox-go]: https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core\n    [toolbox-core-go-readme]: https://github.com/googleapis/mcp-toolbox-sdk-go/blob/main/core/README.md\n\n  </details>\n  <details>\n    <summary>LangChain Go</summary>\n\n1. Install [Toolbox Go SDK][toolbox-go]:\n\n    ```bash\n    go get github.com/googleapis/mcp-toolbox-sdk-go\n    ```\n\n2. Load tools:\n\n    ```go\n    package main\n\n    import (\n      \"context\"\n      \"encoding/json\"\n\n      \"github.com/googleapis/mcp-toolbox-sdk-go/core\"\n      \"github.com/tmc/langchaingo/llms\"\n    )\n\n    func main() {\n      // Make sure to add the error checks\n      // update the url to point to your server\n      URL := \"http://127.0.0.1:5000\"\n      ctx := context.Background()\n\n      client, err := core.NewToolboxClient(URL)\n\n      // Framework agnostic tool\n      tool, err := client.LoadTool(\"toolName\", ctx)\n\n      // Fetch the tool's input schema\n      inputschema, err := tool.InputSchema()\n\n      var paramsSchema map[string]any\n      _ = json.Unmarshal(inputschema, &paramsSchema)\n\n      // Use this tool with LangChainGo\n      langChainTool := llms.Tool{\n        Type: \"function\",\n        Function: &llms.FunctionDefinition{\n          Name:        tool.Name(),\n          Description: tool.Description(),\n          Parameters:  paramsSchema,\n        },\n      }\n    }\n\n    ```\n\n  </details>\n  <details>\n    <summary>Genkit</summary>\n\n1. Install [Toolbox Go SDK][toolbox-go]:\n\n    ```bash\n    go get github.com/googleapis/mcp-toolbox-sdk-go\n    ```\n\n2. Load tools:\n\n    ```go\n    package main\n    import (\n      \"context\"\n      \"encoding/json\"\n\n      \"github.com/firebase/genkit/go/ai\"\n      \"github.com/firebase/genkit/go/genkit\"\n      \"github.com/googleapis/mcp-toolbox-sdk-go/core\"\n      \"github.com/googleapis/mcp-toolbox-sdk-go/tbgenkit\"\n      \"github.com/invopop/jsonschema\"\n    )\n\n    func main() {\n      // Make sure to add the error checks\n      // Update the url to point to your server\n      URL := \"http://127.0.0.1:5000\"\n      ctx := context.Background()\n      g, err := genkit.Init(ctx)\n\n      client, err := core.NewToolboxClient(URL)\n\n      // Framework agnostic tool\n      tool, err := client.LoadTool(\"toolName\", ctx)\n\n      // Convert the tool using the tbgenkit package\n      // Use this tool with Genkit Go\n      genkitTool, err := tbgenkit.ToGenkitTool(tool, g)\n      if err != nil {\n        log.Fatalf(\"Failed to convert tool: %v\\n\", err)\n      }\n    }\n    ```\n\n  </details>\n  <details>\n    <summary>Go GenAI</summary>\n\n1. Install [Toolbox Go SDK][toolbox-go]:\n\n    ```bash\n    go get github.com/googleapis/mcp-toolbox-sdk-go\n    ```\n\n2. Load tools:\n\n    ```go\n    package main\n\n    import (\n      \"context\"\n      \"encoding/json\"\n\n      \"github.com/googleapis/mcp-toolbox-sdk-go/core\"\n      \"google.golang.org/genai\"\n    )\n\n    func main() {\n      // Make sure to add the error checks\n      // Update the url to point to your server\n      URL := \"http://127.0.0.1:5000\"\n      ctx := context.Background()\n\n      client, err := core.NewToolboxClient(URL)\n\n      // Framework agnostic tool\n      tool, err := client.LoadTool(\"toolName\", ctx)\n\n      // Fetch the tool's input schema\n      inputschema, err := tool.InputSchema()\n\n      var schema *genai.Schema\n      _ = json.Unmarshal(inputschema, &schema)\n\n      funcDeclaration := &genai.FunctionDeclaration{\n        Name:        tool.Name(),\n        Description: tool.Description(),\n        Parameters:  schema,\n      }\n\n      // Use this tool with Go GenAI\n      genAITool := &genai.Tool{\n        FunctionDeclarations: []*genai.FunctionDeclaration{funcDeclaration},\n      }\n    }\n    ```\n\n  </details>\n  <details>\n    <summary>OpenAI Go</summary>\n\n1. Install [Toolbox Go SDK][toolbox-go]:\n\n    ```bash\n    go get github.com/googleapis/mcp-toolbox-sdk-go\n    ```\n\n2. Load tools:\n\n    ```go\n    package main\n\n    import (\n      \"context\"\n      \"encoding/json\"\n\n      \"github.com/googleapis/mcp-toolbox-sdk-go/core\"\n      openai \"github.com/openai/openai-go\"\n    )\n\n    func main() {\n      // Make sure to add the error checks\n      // Update the url to point to your server\n      URL := \"http://127.0.0.1:5000\"\n      ctx := context.Background()\n\n      client, err := core.NewToolboxClient(URL)\n\n      // Framework agnostic tool\n      tool, err := client.LoadTool(\"toolName\", ctx)\n\n      // Fetch the tool's input schema\n      inputschema, err := tool.InputSchema()\n\n      var paramsSchema openai.FunctionParameters\n      _ = json.Unmarshal(inputschema, &paramsSchema)\n\n      // Use this tool with OpenAI Go\n      openAITool := openai.ChatCompletionToolParam{\n        Function: openai.FunctionDefinitionParam{\n          Name:        tool.Name(),\n          Description: openai.String(tool.Description()),\n          Parameters:  paramsSchema,\n        },\n      }\n\n    }\n    ```\n\n  </details>\n</details>\n</blockquote>\n</details>\n\n## Configuration\n\nThe primary way to configure Toolbox is through the `tools.yaml` file. If you\nhave multiple files, you can tell toolbox which to load with the `--tools-file\ntools.yaml` flag.\n\nYou can find more detailed reference documentation to all resource types in the\n[Resources](https://googleapis.github.io/genai-toolbox/resources/).\n\n### Sources\n\nThe `sources` section of your `tools.yaml` defines what data sources your\nToolbox should have access to. Most tools will have at least one source to\nexecute against.\n\n```yaml\nsources:\n  my-pg-source:\n    kind: postgres\n    host: 127.0.0.1\n    port: 5432\n    database: toolbox_db\n    user: toolbox_user\n    password: my-password\n```\n\nFor more details on configuring different types of sources, see the\n[Sources](https://googleapis.github.io/genai-toolbox/resources/sources).\n\n### Tools\n\nThe `tools` section of a `tools.yaml` define the actions an agent can take: what\nkind of tool it is, which source(s) it affects, what parameters it uses, etc.\n\n```yaml\ntools:\n  search-hotels-by-name:\n    kind: postgres-sql\n    source: my-pg-source\n    description: Search for hotels based on name.\n    parameters:\n      - name: name\n        type: string\n        description: The name of the hotel.\n    statement: SELECT * FROM hotels WHERE name ILIKE '%' || $1 || '%';\n```\n\nFor more details on configuring different types of tools, see the\n[Tools](https://googleapis.github.io/genai-toolbox/resources/tools).\n\n### Toolsets\n\nThe `toolsets` section of your `tools.yaml` allows you to define groups of tools\nthat you want to be able to load together. This can be useful for defining\ndifferent groups based on agent or application.\n\n```yaml\ntoolsets:\n    my_first_toolset:\n        - my_first_tool\n        - my_second_tool\n    my_second_toolset:\n        - my_second_tool\n        - my_third_tool\n```\n\nYou can load toolsets by name:\n\n```python\n# This will load all tools\nall_tools = client.load_toolset()\n\n# This will only load the tools listed in 'my_second_toolset'\nmy_second_toolset = client.load_toolset(\"my_second_toolset\")\n```\n\n## Versioning\n\nThis project uses [semantic versioning](https://semver.org/), including a\n`MAJOR.MINOR.PATCH` version number that increments with:\n\n- MAJOR version when we make incompatible API changes\n- MINOR version when we add functionality in a backward compatible manner\n- PATCH version when we make backward compatible bug fixes\n\nThe public API that this applies to is the CLI associated with Toolbox, the\ninteractions with official SDKs, and the definitions in the `tools.yaml` file.\n\n## Contributing\n\nContributions are welcome. Please, see the [CONTRIBUTING](CONTRIBUTING.md)\nto get started.\n\nPlease note that this project is released with a Contributor Code of Conduct.\nBy participating in this project you agree to abide by its terms. See\n[Contributor Code of Conduct](CODE_OF_CONDUCT.md) for more information.\n\n## Community\n\nJoin our [discord community](https://discord.gg/GQrFB3Ec3W) to connect with our developers!\n",
  "category": null,
  "qualityScore": 98,
  "githubUrl": "https://github.com/googleapis/genai-toolbox",
  "programmingLanguage": "Go",
  "gitHubOrg": "googleapis",
  "gitHubRepo": "genai-toolbox",
  "repositoryPath": null,
  "gh_stars": 8225,
  "gh_contributors": 30,
  "gh_issues": 153,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "1a5fda34b14ba7f6c2e488bccfe342350cafef88",
  "last_scraped_at": "2025-07-29T19:12:29.695Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}