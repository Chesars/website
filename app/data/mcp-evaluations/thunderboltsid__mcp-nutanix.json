{
  "name": "nutanix",
  "slug": "thunderboltsid__mcp-nutanix",
  "description": "MCP Server for Nutanix",
  "readme": "# MCP Nutanix\n\nA Model Context Protocol (MCP) server for interacting with Nutanix Prism Central APIs through Large Language Models (LLMs).\n\n## ⚠️ Disclaimer\n\n**THIS IS AN EXPERIMENTAL PROJECT**\n\nThis project was created as a personal project to explore the capabilities of the Model Context Protocol frameworks in Go. It is:\n\n- **NOT** an official Nutanix product or tool\n- **NOT** supported, endorsed, or maintained by Nutanix\n- **NOT** suitable for production environments\n- **PROVIDED AS-IS** with no warranties or guarantees\n\n**USE AT YOUR OWN RISK**: The author takes no responsibility for any issues, damages, or outages that may result from using this code.\n\n## Overview\n\nThis MCP server allows LLMs to interact with Nutanix Prism Central by:\n\n1. Connecting to a Prism Central instance with user credentials\n2. Listing various resources (VMs, Clusters, Hosts, etc.)\n3. Retrieving specific resource details via URI-based access\n\nThe implementation uses the [Prism Go Client](https://github.com/nutanix-cloud-native/prism-go-client) to communicate with Prism Central and the [MCP Go library](https://github.com/mark3labs/mcp-go) to implement the Model Context Protocol.\n\n## Getting Started\n\n### Prerequisites\n\n- Go 1.23 or higher\n- Access to a Nutanix Prism Central instance\n- Tools like `make` and `go fmt` for building\n\n### Building\n\n```bash\n# Clone the repository\ngit clone https://github.com/thunderboltsid/mcp-nutanix.git\ncd mcp-nutanix\n\n# Build the MCP server\nmake build\n```\n\n### Running\n\n```bash\n./bin/mcp-nutanix\n```\n\nThe server will start and prompt for Prism Central credentials.\n\n## Usage\n\nOnce the MCP server is running and connected to your Prism Central instance, LLMs can interact with it through the MCP protocol.\n\n### Resource Listing\n\nTo list resources, use the appropriate tool:\n\n```\nvms\nclusters\nhosts\nimages\nsubnets\n```\n\nThe LLM will receive a JSON list of resources that it can parse and analyze.\n\n### Resource Access\n\nTo access a specific resource, use a resource URI:\n\n```\nvm://{uuid}\ncluster://{uuid}\nhost://{uuid}\n```\n\nThe LLM will receive detailed JSON information about the specific resource.\n\n## Development\n\n### Project Structure\n\n```\nmcp-nutanix/\n├── bin/                  # Compiled binaries\n├── internal/             # Internal packages\n│   ├── client/           # Prism Central client handling\n│   ├── codegen/          # Code generation utilities\n│   └── json/             # JSON helpers\n├── pkg/                  # components\n│   ├── prompts/          # MCP prompt implementations\n│   ├── resources/        # Resource handlers\n│   └── tools/            # Tool handlers\n└── Makefile              # Build and utility commands\n```\n\n### Code Generation\n\nThe project uses code generation to create resource and tool handlers. To update these:\n\n```bash\nmake generate\n```\n\n## Limitations\n\n- Response size is limited by the MCP protocol\n- Some resources with large response sizes may cause errors\n- No pagination support in the current implementation\n- Only supports read operations, no create/update/delete\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- [Nutanix](https://www.nutanix.com/) for creating the Prism API\n- [Mark3Labs](https://github.com/mark3labs) for the MCP Go library\n- [Nutanix Cloud Native](https://github.com/nutanix-cloud-native) for the Prism Go Client\n\n## Contributing\n\nThis is an experimental project with no formal contribution process. Feel free to create issues or pull requests.",
  "category": null,
  "qualityScore": 68,
  "githubUrl": "https://github.com/thunderboltsid/mcp-nutanix",
  "programmingLanguage": "Go",
  "gitHubOrg": "thunderboltsid",
  "gitHubRepo": "mcp-nutanix",
  "repositoryPath": null,
  "gh_stars": 9,
  "gh_contributors": 1,
  "gh_issues": 2,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "583491a3afe022a08414e82e264fa34daeada94e",
  "last_scraped_at": "2025-07-29T19:07:48.507Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}