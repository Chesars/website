{
  "name": "developer",
  "slug": "vertexstudio__developer",
  "description": "MCP server from VertexStudio/developer",
  "readme": "# Developer MCP Server\n\nA general purpose Model Context Protocol (MCP) server that provides comprehensive developer tools for file editing, shell command execution, and screen capture capabilities. Built using the [rmcp](https://github.com/modelcontextprotocol/rmcp) crate.\n\n## üöÄ Features\n\n### üìù Text Editor\n- **View files** with language detection for markdown formatting\n- **Write/create files** with automatic directory creation\n- **String replacement** with precise matching\n- **Undo functionality** with edit history\n- **File size protection** (400KB limit for text files)\n\n### üñ•Ô∏è Shell Integration\n- **Cross-platform command execution** (PowerShell on Windows, bash/zsh on Unix)\n- **Combined stdout/stderr output** as it appears in terminal\n- **Output size protection** (400KB limit)\n- **Platform-specific optimizations**\n\n### üì∏ Screen Capture\n- **Full display screenshots** with monitor selection\n- **Window-specific capture** by title\n- **Automatic image optimization** (768px max width)\n- **Base64 encoded PNG output**\n\n### üñºÔ∏è Image Processing\n- **Image file processing** from disk\n- **Automatic resizing** while maintaining aspect ratio\n- **Format conversion** to PNG\n- **macOS screenshot filename handling**\n\n### üîÑ Workflow Management\n- **Multi-step problem solving** with sequential progression\n- **Branching workflows** for alternative solution paths\n- **Step revision** capability to update previous steps\n- **Context preservation** across complex reasoning processes\n\n### üîí Security Features\n- **Gitignore integration** - respects `.gitignore` patterns for file access control\n- **Path validation** - requires absolute paths to prevent directory traversal\n- **File size limits** - prevents memory exhaustion attacks\n- **Access pattern filtering** - blocks access to sensitive files\n\n## üìã Requirements\n\n- **Rust** 1.70+ (for building from source)\n- **Claude Desktop** or compatible MCP client\n- **Operating System**: macOS, Linux, or Windows\n\n## üõ†Ô∏è Installation\n\n### Option 1: Build from Source (Recommended)\n\n1. **Clone the repository:**\n   ```bash\n   git clone git@github.com:VertexStudio/developer.git\n   cd developer\n   ```\n\n2. **Build the project:**\n   ```bash\n   cargo build --release\n   ```\n\n3. **The binary will be available at:**\n   ```\n   target/release/developer\n   ```\n\n### Option 2: Development Build\n\nFor development/testing purposes:\n```bash\ncargo build\n# Binary at: target/debug/developer\n```\n\n## ‚öôÔ∏è Configuration\n\n### Claude Desktop Setup\n\n1. **Open Claude Desktop configuration file:**\n\n   **macOS/Linux:**\n   ```bash\n   code ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n   ```\n\n   **Windows:**\n   ```bash\n   code %APPDATA%\\Claude\\claude_desktop_config.json\n   ```\n\n2. **Add the developer server configuration:**\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"developer\": {\n         \"command\": \"/path/to/your/developer/target/release/developer\",\n         \"args\": []\n       }\n     }\n   }\n   ```\n\n   **Example configurations:**\n\n   **Development build:**\n   ```json\n   {\n     \"mcpServers\": {\n       \"developer\": {\n         \"command\": \"/Users/rozgo/vertex/developer/target/debug/developer\",\n         \"args\": []\n       }\n     }\n   }\n   ```\n\n   **Production build:**\n   ```json\n   {\n     \"mcpServers\": {\n       \"developer\": {\n         \"command\": \"/Users/rozgo/vertex/developer/target/release/developer\",\n         \"args\": []\n       }\n     }\n   }\n   ```\n\n3. **Restart Claude Desktop** to load the new configuration.\n\n### File Access Control (Optional)\n\nCreate a `.gitignore` file in your working directory to control which files the server can access:\n\n```gitignore\n# Sensitive files\n.env\n.env.*\nsecrets.*\nprivate/\n*.key\n*.pem\n\n# Build artifacts\ntarget/\nnode_modules/\ndist/\n```\n\nThe server will automatically respect these patterns and block access to matching files.\n\n## üéØ Usage Examples\n\nOnce configured, you can use these tools directly in Claude Desktop:\n\n### Text Editing\n```\n\"Can you view the contents of /path/to/my/file.rs?\"\n\n\"Please create a new file at /path/to/hello.py with a simple hello world script\"\n\n\"Replace the line 'old_function()' with 'new_function()' in /path/to/main.rs\"\n\n\"Undo the last edit to /path/to/main.rs\"\n```\n\n### Shell Commands\n```\n\"Run 'ls -la' to show me the current directory contents\"\n\n\"Execute 'cargo test' to run the test suite\"\n\n\"Run 'git status' to check the repository status\"\n```\n\n### Screen Capture\n```\n\"Take a screenshot of my main display\"\n\n\"Capture a screenshot of the window titled 'VS Code'\"\n\n\"Show me what windows are available for capture\"\n```\n\n### Image Processing\n```\n\"Process the image at /path/to/screenshot.png and show it to me\"\n\n\"Load and display the image from /Users/me/Desktop/diagram.jpg\"\n```\n\n### Workflow Management\n```\n\"Start a workflow to implement a new feature with 5 steps\"\n\n\"Create a branch from step 3 to explore an alternative approach\"\n\n\"Revise step 2 to use a different algorithm\"\n```\n\n## üèóÔ∏è Architecture\n\n```\nDeveloper MCP Server\n‚îú‚îÄ‚îÄ Text Editor     ‚Üí File viewing, editing, string replacement, undo\n‚îú‚îÄ‚îÄ Shell           ‚Üí Cross-platform command execution  \n‚îú‚îÄ‚îÄ Screen Capture  ‚Üí Display and window screenshots\n‚îú‚îÄ‚îÄ Image Processor ‚Üí File-based image processing\n‚îú‚îÄ‚îÄ Workflow        ‚Üí Multi-step problem solving with branching\n‚îî‚îÄ‚îÄ Security Layer  ‚Üí Gitignore integration, path validation\n```\n\n## üîß Tool Reference\n\n### text_editor\n- **Commands:** `view`, `write`, `str_replace`, `undo_edit`\n- **Parameters:** `path` (required), `file_text`, `old_str`, `new_str`\n- **Limits:** 400KB file size, absolute paths only\n\n### shell  \n- **Parameters:** `command` (required)\n- **Features:** Platform detection, output redirection, size limits\n- **Limits:** 400KB output size\n\n### screen_capture\n- **Parameters:** `display` (optional), `window_title` (optional)\n- **Output:** Base64 PNG image, 768px max width\n\n### list_windows\n- **Parameters:** None\n- **Output:** List of capturable window titles\n\n### image_processor\n- **Parameters:** `path` (required)\n- **Features:** Auto-resize, format conversion, macOS compatibility\n- **Limits:** 10MB file size\n\n### workflow\n- **Parameters:** `step_description`, `step_number`, `total_steps`, `next_step_needed` (required), `is_step_revision`, `revises_step`, `branch_from_step`, `branch_id`, `needs_more_steps` (optional)\n- **Features:** Sequential progression, branching, step revision\n- **Output:** JSON workflow status\n\n## üêõ Troubleshooting\n\n### Common Issues\n\n**\"Tool not found\" errors:**\n- Ensure the binary path in your configuration is correct\n- Verify the binary exists and is executable\n- Check Claude Desktop logs for detailed error messages\n\n**\"File access denied\" errors:**\n- Check if the file is blocked by `.gitignore` patterns\n- Ensure you're using absolute paths (not relative paths)\n- Verify file permissions\n\n**\"Command failed\" errors:**\n- Ensure the command exists and is in your system PATH\n- Check if the command requires special permissions\n- Verify the command syntax for your operating system\n\n### Debug Mode\n\nBuild with debug info for troubleshooting:\n```bash\ncargo build\n# Use target/debug/developer in your configuration\n```\n\n### MCP Inspector\n\nUse the official MCP inspector to debug and test tools:\n```bash\nnpx @modelcontextprotocol/inspector target/debug/developer\n```\n\nThis will open a web interface where you can:\n- Inspect available tools and their schemas\n- Test tool calls interactively\n- Debug server responses\n- Validate MCP protocol compliance\n\n### Tools Schema Export\n\nExport the tools JSON schema for debugging or integration:\n```bash\n# Save tools schema to file\ncargo run toolbox > tools.json\n\n# Pretty print tools schema\ncargo run toolbox | jq .\n```\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Add tests for new functionality\n4. Ensure all tests pass: `cargo test`\n5. Submit a pull request\n\n## üìù License\n\n[MIT](LICENSE)\n\n## üîó Related Projects\n\n- [Model Context Protocol](https://modelcontextprotocol.io/) - The protocol specification\n- [Claude Desktop](https://claude.ai/download) - Official Claude desktop application\n- [MCP Servers](https://github.com/modelcontextprotocol/servers) - Official MCP server implementations\n",
  "category": null,
  "qualityScore": 70,
  "githubUrl": "https://github.com/VertexStudio/developer",
  "programmingLanguage": "Rust",
  "gitHubOrg": "VertexStudio",
  "gitHubRepo": "developer",
  "repositoryPath": null,
  "gh_stars": 12,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "86b7ebf60428dbf6c9bdf75c92631ce3a7040049",
  "last_scraped_at": "2025-07-29T19:09:02.242Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}