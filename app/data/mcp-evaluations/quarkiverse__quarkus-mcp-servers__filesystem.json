{
  "name": "quarkus  s",
  "slug": "quarkiverse__quarkus-mcp-servers__filesystem",
  "description": "Model Context Protocol Servers in Quarkus",
  "readme": "# Model Context Protocol Servers in Quarkus/Java\n\nThis project contains [Model Context Protocol](https://modelcontextprotocol.io/) servers,\nimplemented in Java using the [Quarkus MCP server framework](https://github.com/quarkiverse/quarkus-mcp-server).\n\nThese lets you extend the capabilities of your MCP enabled LLM (Large Language Model) AI applications.\n\nThese also work in MCP enabled LLM applications, like Claude Desktop. You can find other clients on\n[Awesome MCP Clients](https://github.com/punkpeye/awesome-mcp-clients) page.\n\n## Running the servers\n\nAll of these servers are available to run with [jbang everywhere](https://jbang.dev/everywhere): Java, JavaScript, Python and more. Where it says `jbang` it can be replaced with `npx @jbangdev/jbang` or `uvx jbang` or `pipx jbang` dependent on your preference.\n\n## Servers\n\n### [jdbc](jdbc)\n\n![](jdbc/images/jdbc-trends-demo.png)\n\nThe `jdbc` server can be used to store and retrieve data from a database given just a JDBC URL. You can use any JDBC database, like Postgres, MySQL, Oracle, Sqlite, etc.\n\n```shell\njbang jdbc@quarkiverse/quarkus-mcp-servers\n```\n\nSee more in the [jdbc readme](jdbc/README.md).\n\n### [jvminsight](jvminsight)\n\n![](jvminsight/images/jvminsight-demo.png)\n\nThe `jvminsight` server is a server that can be used to inspect a running JVM process.\n\n```shell\njbang jvminsight@quarkiverse/quarkus-mcp-servers\n```\n\nSee more in the [jvminsight readme](jvminsight/README.md).\n\n### [filesystem](filesystem)\n\nThe `filesystem` server is a file system server that can be used to serve files from a file system.\n\n```shell\njbang filesystem@quarkiverse/quarkus-mcp-servers [path1] [path2] ...\n```\n\nSee more in the [filesystem readme](filesystem/README.md).\n\n### [jfx](jfx)\n\n[![](jfx/images/jfx-demo.png)](https://www.youtube.com/watch?v=Wnh_-0dAaDI)\n\nThe `jfx` server exposes a canvas that can be used to make drawings using JavaFX.\n\n```shell\njbang jfx@quarkiverse/quarkus-mcp-servers\n```\n\nSee more in the [jfx readme](jfx/README.md).\n\n\n### [kubernetes](kubernetes)\n\nThe `kubernetes` server can be used to interact with a Kubernetes cluster.\n\n```shell\njbang kubernetes@quarkiverse/quarkus-mcp-servers\n```\n\n### [containers](containers)\n\nThe 'containers' server lets you work with Docker/Podman/OCI compatible container engines.\n\n```shell\njbang containers@quarkiverse/quarkus-mcp-servers\n```\n\n![](containers/images/containers-demo.png)\n\n### [wolfram](wolfram)\n\nThe `wolfram` server can be used to perform web search optimized for use by a large language model through the Wolfram Alpha LLM API.\n\n```shell\njbang wolfram@quarkiverse/quarkus-mcp-servers\n```\n\n## Other Quarkus MCP based servers\n\n### [WildFly](https://github.com/wildfly-extras/wildfly-mcp)\n\nA WildFly MCP server that allows you to interact with WildFly running servers.\n\nYou can check this [WildFly vlog](https://youtu.be/wg1hAdOoe2w) that demonstrates its capabilities.\n\nRead more in the [WildFly MCP Server readme](https://github.com/wildfly-extras/wildfly-mcp/blob/main/wildfly-mcp-server/README.md).\n\n## Ideas for other servers\n\nIf you have ideas for other servers, feel free to contribute them to this project.\n\nIf missing ideas, then look at the reference servers at https://github.com/modelcontextprotocol/servers and see if you can implement them in this project.\n\nOther ideas:\n\n- zulip\n- jfr/java hooked to jmx/jfr\n- quarkus dev mode\n- ... \n\n## Contributing\n\nIf you have ideas for other servers, feel free to contribute them to this project.\n\nTo get started, clone the repository and build it:\n\n```bash\ngit clone https://github.com/quarkiverse/quarkus-mcp-servers\ncd quarkus-mcp-servers\nmvn clean install\n```\n\nThen run the following command to generate a new server for i.e. jfr:\n\n```shell\nmkdir jfr\ncd jfr\njbang init -t mcp jfr\n```\n\nThis will create the `jfr` directory with a Hello World MCP server.\n\nYou can then build it:\n\n```shell\nmvn clean install\n```\n\nTo wire it into the full project you need to add `<module>jfr</module>` to the root `pom.xml` file.\n\nMake sure you have added some useful content to the `README.md` file + updated the demo image.\n\nThen open a PR :)\n\n\n\n\n\n\n\n",
  "category": null,
  "qualityScore": 92,
  "githubUrl": "https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/filesystem",
  "programmingLanguage": "Java",
  "gitHubOrg": "quarkiverse",
  "gitHubRepo": "quarkus-mcp-servers",
  "repositoryPath": "filesystem",
  "gh_stars": 158,
  "gh_contributors": 9,
  "gh_issues": 22,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "d2c1caad14f71ba3995394ff2ae1e2971bad7125",
  "last_scraped_at": "2025-07-29T19:20:47.675Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}