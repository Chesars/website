{
  "name": "s2 sdk typescript",
  "slug": "s2-streamstore__s2-sdk-typescript",
  "description": "S2 TypeScript SDK",
  "readme": "# streamstore\n\nDeveloper-friendly & type-safe TypeScript SDK specifically catered to leverage *streamstore* API.\n\n<div align=\"left\">\n    <a href=\"https://www.speakeasy.com/?utm_source=streamstore&utm_campaign=typescript\"><img src=\"https://custom-icon-badges.demolab.com/badge/-Built%20By%20Speakeasy-212015?style=for-the-badge&logoColor=FBE331&logo=speakeasy&labelColor=545454\" /></a>\n    <a href=\"https://opensource.org/licenses/MIT\">\n        <img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" style=\"width: 100px; height: 28px;\" />\n    </a>\n</div>\n\n\n<br /><br />\n<!-- Start Summary [summary] -->\n## Summary\n\nS2 API: Serverless API for streaming data backed by object storage.\n<!-- End Summary [summary] -->\n\n<!-- Start Table of Contents [toc] -->\n## Table of Contents\n<!-- $toc-max-depth=2 -->\n* [streamstore](#streamstore)\n  * [SDK Installation](#sdk-installation)\n  * [Requirements](#requirements)\n  * [SDK Example Usage](#sdk-example-usage)\n  * [Authentication](#authentication)\n  * [Available Resources and Operations](#available-resources-and-operations)\n  * [Standalone functions](#standalone-functions)\n  * [Server-sent event streaming](#server-sent-event-streaming)\n  * [Pagination](#pagination)\n  * [Retries](#retries)\n  * [Error Handling](#error-handling)\n  * [Server Selection](#server-selection)\n  * [Custom HTTP Client](#custom-http-client)\n  * [Debugging](#debugging)\n* [Development](#development)\n  * [Maturity](#maturity)\n  * [Contributions](#contributions)\n\n<!-- End Table of Contents [toc] -->\n\n<!-- Start SDK Installation [installation] -->\n## SDK Installation\n\nThe SDK can be installed with either [npm](https://www.npmjs.com/), [pnpm](https://pnpm.io/), [bun](https://bun.sh/) or [yarn](https://classic.yarnpkg.com/en/) package managers.\n\n### NPM\n\n```bash\nnpm add @s2-dev/streamstore\n```\n\n### PNPM\n\n```bash\npnpm add @s2-dev/streamstore\n```\n\n### Bun\n\n```bash\nbun add @s2-dev/streamstore\n```\n\n### Yarn\n\n```bash\nyarn add @s2-dev/streamstore zod\n\n# Note that Yarn does not install peer dependencies automatically. You will need\n# to install zod as shown above.\n```\n\n> [!NOTE]\n> This package is published with CommonJS and ES Modules (ESM) support.\n\n\n### Model Context Protocol (MCP) Server\n\nThis SDK is also an installable MCP server where the various SDK methods are\nexposed as tools that can be invoked by AI applications.\n\n> Node.js v20 or greater is required to run the MCP server from npm.\n\n<details>\n<summary>Claude installation steps</summary>\n\nAdd the following server definition to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"S2\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"--package\", \"@s2-dev/streamstore\",\n        \"--\",\n        \"mcp\", \"start\",\n        \"--access-token\", \"...\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Cursor installation steps</summary>\n\nCreate a `.cursor/mcp.json` file in your project root with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"S2\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"--package\", \"@s2-dev/streamstore\",\n        \"--\",\n        \"mcp\", \"start\",\n        \"--access-token\", \"...\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\nYou can also run MCP servers as a standalone binary with no additional dependencies. You must pull these binaries from available Github releases:\n\n```bash\ncurl -L -o mcp-server \\\n    https://github.com/{org}/{repo}/releases/download/{tag}/mcp-server-bun-darwin-arm64 && \\\nchmod +x mcp-server\n```\n\nIf the repo is a private repo you must add your Github PAT to download a release `-H \"Authorization: Bearer {GITHUB_PAT}\"`.\n\n\n```json\n{\n  \"mcpServers\": {\n    \"Todos\": {\n      \"command\": \"./DOWNLOAD/PATH/mcp-server\",\n      \"args\": [\n        \"start\"\n      ]\n    }\n  }\n}\n```\n\nFor a full list of server arguments, run:\n\n```sh\nnpx -y --package @s2-dev/streamstore -- mcp start --help\n```\n<!-- End SDK Installation [installation] -->\n\n<!-- Start Requirements [requirements] -->\n## Requirements\n\nFor supported JavaScript runtimes, please consult [RUNTIMES.md](RUNTIMES.md).\n<!-- End Requirements [requirements] -->\n\n<!-- Start SDK Example Usage [usage] -->\n## SDK Example Usage\n\n### Example\n\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.accessTokens.listAccessTokens({});\n\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End SDK Example Usage [usage] -->\n\n<!-- Start Authentication [security] -->\n## Authentication\n\n### Per-Client Security Schemes\n\nThis SDK supports the following security scheme globally:\n\n| Name          | Type | Scheme      | Environment Variable |\n| ------------- | ---- | ----------- | -------------------- |\n| `accessToken` | http | HTTP Bearer | `S2_ACCESS_TOKEN`    |\n\nTo authenticate with the API the `accessToken` parameter must be set when initializing the SDK client instance. For example:\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.accessTokens.listAccessTokens({});\n\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End Authentication [security] -->\n\n<!-- Start Available Resources and Operations [operations] -->\n## Available Resources and Operations\n\n<details open>\n<summary>Available methods</summary>\n\n### [accessTokens](docs/sdks/accesstokens/README.md)\n\n* [listAccessTokens](docs/sdks/accesstokens/README.md#listaccesstokens) - List access tokens.\n* [issueAccessToken](docs/sdks/accesstokens/README.md#issueaccesstoken) - Issue a new access token.\n* [revokeAccessToken](docs/sdks/accesstokens/README.md#revokeaccesstoken) - Revoke an access token.\n\n### [basins](docs/sdks/basins/README.md)\n\n* [listBasins](docs/sdks/basins/README.md#listbasins) - List basins.\n* [createBasin](docs/sdks/basins/README.md#createbasin) - Create a basin.\n* [getBasinConfig](docs/sdks/basins/README.md#getbasinconfig) - Get basin configuration.\n* [createOrReconfigureBasin](docs/sdks/basins/README.md#createorreconfigurebasin) - Create or reconfigure a basin.\n* [deleteBasin](docs/sdks/basins/README.md#deletebasin) - Delete a basin.\n* [reconfigureBasin](docs/sdks/basins/README.md#reconfigurebasin) - Reconfigure a basin.\n\n### [metrics](docs/sdks/metrics/README.md)\n\n* [accountMetrics](docs/sdks/metrics/README.md#accountmetrics) - Account-level metrics.\n* [basinMetrics](docs/sdks/metrics/README.md#basinmetrics) - Basin-level metrics.\n* [streamMetrics](docs/sdks/metrics/README.md#streammetrics) - Stream-level metrics.\n\n### [records](docs/sdks/records/README.md)\n\n* [read](docs/sdks/records/README.md#read) - Read records.\n* [append](docs/sdks/records/README.md#append) - Append records.\n* [checkTail](docs/sdks/records/README.md#checktail) - Check the tail.\n\n\n### [streams](docs/sdks/streams/README.md)\n\n* [listStreams](docs/sdks/streams/README.md#liststreams) - List streams.\n* [createStream](docs/sdks/streams/README.md#createstream) - Create a stream.\n* [getStreamConfig](docs/sdks/streams/README.md#getstreamconfig) - Get stream configuration.\n* [createOrReconfigureStream](docs/sdks/streams/README.md#createorreconfigurestream) - Create or reconfigure a stream.\n* [deleteStream](docs/sdks/streams/README.md#deletestream) - Delete a stream.\n* [reconfigureStream](docs/sdks/streams/README.md#reconfigurestream) - Reconfigure a stream.\n\n</details>\n<!-- End Available Resources and Operations [operations] -->\n\n<!-- Start Standalone functions [standalone-funcs] -->\n## Standalone functions\n\nAll the methods listed above are available as standalone functions. These\nfunctions are ideal for use in applications running in the browser, serverless\nruntimes or other environments where application bundle size is a primary\nconcern. When using a bundler to build your application, all unused\nfunctionality will be either excluded from the final bundle or tree-shaken away.\n\nTo read more about standalone functions, check [FUNCTIONS.md](./FUNCTIONS.md).\n\n<details>\n\n<summary>Available standalone functions</summary>\n\n- [`accessTokensIssueAccessToken`](docs/sdks/accesstokens/README.md#issueaccesstoken) - Issue a new access token.\n- [`accessTokensListAccessTokens`](docs/sdks/accesstokens/README.md#listaccesstokens) - List access tokens.\n- [`accessTokensRevokeAccessToken`](docs/sdks/accesstokens/README.md#revokeaccesstoken) - Revoke an access token.\n- [`basinsCreateBasin`](docs/sdks/basins/README.md#createbasin) - Create a basin.\n- [`basinsCreateOrReconfigureBasin`](docs/sdks/basins/README.md#createorreconfigurebasin) - Create or reconfigure a basin.\n- [`basinsDeleteBasin`](docs/sdks/basins/README.md#deletebasin) - Delete a basin.\n- [`basinsGetBasinConfig`](docs/sdks/basins/README.md#getbasinconfig) - Get basin configuration.\n- [`basinsListBasins`](docs/sdks/basins/README.md#listbasins) - List basins.\n- [`basinsReconfigureBasin`](docs/sdks/basins/README.md#reconfigurebasin) - Reconfigure a basin.\n- [`metricsAccountMetrics`](docs/sdks/metrics/README.md#accountmetrics) - Account-level metrics.\n- [`metricsBasinMetrics`](docs/sdks/metrics/README.md#basinmetrics) - Basin-level metrics.\n- [`metricsStreamMetrics`](docs/sdks/metrics/README.md#streammetrics) - Stream-level metrics.\n- [`recordsAppend`](docs/sdks/records/README.md#append) - Append records.\n- [`recordsCheckTail`](docs/sdks/records/README.md#checktail) - Check the tail.\n- [`recordsRead`](docs/sdks/records/README.md#read) - Read records.\n- [`streamsCreateOrReconfigureStream`](docs/sdks/streams/README.md#createorreconfigurestream) - Create or reconfigure a stream.\n- [`streamsCreateStream`](docs/sdks/streams/README.md#createstream) - Create a stream.\n- [`streamsDeleteStream`](docs/sdks/streams/README.md#deletestream) - Delete a stream.\n- [`streamsGetStreamConfig`](docs/sdks/streams/README.md#getstreamconfig) - Get stream configuration.\n- [`streamsListStreams`](docs/sdks/streams/README.md#liststreams) - List streams.\n- [`streamsReconfigureStream`](docs/sdks/streams/README.md#reconfigurestream) - Reconfigure a stream.\n\n</details>\n<!-- End Standalone functions [standalone-funcs] -->\n\n<!-- Start Server-sent event streaming [eventstream] -->\n## Server-sent event streaming\n\n[Server-sent events][mdn-sse] are used to stream content from certain\noperations. These operations will expose the stream as an async iterable that\ncan be consumed using a [`for await...of`][mdn-for-await-of] loop. The loop will\nterminate when the server no longer has any events to send and closes the\nunderlying connection.\n\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.records.read({\n    stream: \"<value>\",\n    s2Basin: \"<value>\",\n  });\n\n  for await (const event of result) {\n    // Handle the event\n    console.log(event);\n  }\n}\n\nrun();\n\n```\n\n[mdn-sse]: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\n[mdn-for-await-of]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n<!-- End Server-sent event streaming [eventstream] -->\n\n<!-- Start Pagination [pagination] -->\n## Pagination\n\nSome of the endpoints in this SDK support pagination. To use pagination, you\nmake your SDK calls as usual, but the returned response object will also be an\nasync iterable that can be consumed using the [`for await...of`][for-await-of]\nsyntax.\n\n[for-await-of]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n\nHere's an example of one such pagination call:\n\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.basins.listBasins({});\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();\n\n```\n<!-- End Pagination [pagination] -->\n\n<!-- Start Retries [retries] -->\n## Retries\n\nSome of the endpoints in this SDK support retries.  If you use the SDK without any configuration, it will fall back to the default retry strategy provided by the API.  However, the default retry strategy can be overridden on a per-operation basis, or across the entire SDK.\n\nTo change the default retry strategy for a single API call, simply provide a retryConfig object to the call:\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.accessTokens.listAccessTokens({}, {\n    retries: {\n      strategy: \"backoff\",\n      backoff: {\n        initialInterval: 1,\n        maxInterval: 50,\n        exponent: 1.1,\n        maxElapsedTime: 100,\n      },\n      retryConnectionErrors: false,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();\n\n```\n\nIf you'd like to override the default retry strategy for all operations that support retries, you can provide a retryConfig at SDK initialization:\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  retryConfig: {\n    strategy: \"backoff\",\n    backoff: {\n      initialInterval: 1,\n      maxInterval: 50,\n      exponent: 1.1,\n      maxElapsedTime: 100,\n    },\n    retryConnectionErrors: false,\n  },\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.accessTokens.listAccessTokens({});\n\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End Retries [retries] -->\n\n<!-- Start Error Handling [errors] -->\n## Error Handling\n\n[`S2Error`](./src/models/errors/s2error.ts) is the base class for all HTTP error responses. It has the following properties:\n\n| Property            | Type       | Description                                                                             |\n| ------------------- | ---------- | --------------------------------------------------------------------------------------- |\n| `error.message`     | `string`   | Error message                                                                           |\n| `error.statusCode`  | `number`   | HTTP response status code eg `404`                                                      |\n| `error.headers`     | `Headers`  | HTTP response headers                                                                   |\n| `error.body`        | `string`   | HTTP body. Can be empty string if no body is returned.                                  |\n| `error.rawResponse` | `Response` | Raw HTTP response                                                                       |\n| `error.data$`       |            | Optional. Some errors may contain structured data. [See Error Classes](#error-classes). |\n\n### Example\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\nimport * as errors from \"@s2-dev/streamstore/models/errors\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  try {\n    const result = await s2.accessTokens.listAccessTokens({});\n\n    console.log(result);\n  } catch (error) {\n    // The base class for HTTP error responses\n    if (error instanceof errors.S2Error) {\n      console.log(error.message);\n      console.log(error.statusCode);\n      console.log(error.body);\n      console.log(error.headers);\n\n      // Depending on the method different errors may be thrown\n      if (error instanceof errors.ErrorResponse) {\n        console.log(error.data$.code); // string\n        console.log(error.data$.message); // string\n      }\n    }\n  }\n}\n\nrun();\n\n```\n\n### Error Classes\n**Primary errors:**\n* [`S2Error`](./src/models/errors/s2error.ts): The base class for HTTP error responses.\n  * [`ErrorResponse`](./src/models/errors/errorresponse.ts): .\n\n<details><summary>Less common errors (9)</summary>\n\n<br />\n\n**Network errors:**\n* [`ConnectionError`](./src/models/errors/httpclienterrors.ts): HTTP client was unable to make a request to a server.\n* [`RequestTimeoutError`](./src/models/errors/httpclienterrors.ts): HTTP request timed out due to an AbortSignal signal.\n* [`RequestAbortedError`](./src/models/errors/httpclienterrors.ts): HTTP request was aborted by the client.\n* [`InvalidRequestError`](./src/models/errors/httpclienterrors.ts): Any input used to create a request is invalid.\n* [`UnexpectedClientError`](./src/models/errors/httpclienterrors.ts): Unrecognised or unexpected error.\n\n\n**Inherit from [`S2Error`](./src/models/errors/s2error.ts)**:\n* [`FencingToken`](./src/models/errors/fencingtoken.ts): Fencing token did not match. The expected fencing token is returned. Status code `412`. Applicable to 1 of 21 methods.*\n* [`SeqNum`](./src/models/errors/seqnum.ts): Sequence number did not match the tail of the stream. The expected next sequence number is returned. Status code `412`. Applicable to 1 of 21 methods.*\n* [`TailResponse`](./src/models/errors/tailresponse.ts): . Status code `416`. Applicable to 1 of 21 methods.*\n* [`ResponseValidationError`](./src/models/errors/responsevalidationerror.ts): Type mismatch between the data returned from the server and the structure expected by the SDK. See `error.rawValue` for the raw value and `error.pretty()` for a nicely formatted multi-line string.\n\n</details>\n\n\\* Check [the method documentation](#available-resources-and-operations) to see if the error is applicable.\n<!-- End Error Handling [errors] -->\n\n<!-- Start Server Selection [server] -->\n## Server Selection\n\n### Override Server URL Per-Client\n\nThe default server can be overridden globally by passing a URL to the `serverURL: string` optional parameter when initializing the SDK client instance. For example:\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  serverURL: \"https://aws.s2.dev/v1\",\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.accessTokens.listAccessTokens({});\n\n  console.log(result);\n}\n\nrun();\n\n```\n\n### Override Server URL Per-Operation\n\nThe server URL can also be overridden on a per-operation basis, provided a server list was specified for the operation. For example:\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst s2 = new S2({\n  accessToken: process.env[\"S2_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await s2.streams.listStreams({\n    s2Basin: \"<value>\",\n  }, {\n    serverURL: \"https://.b.aws.s2.dev/v1\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();\n\n```\n<!-- End Server Selection [server] -->\n\n<!-- Start Custom HTTP Client [http-client] -->\n## Custom HTTP Client\n\nThe TypeScript SDK makes API calls using an `HTTPClient` that wraps the native\n[Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). This\nclient is a thin wrapper around `fetch` and provides the ability to attach hooks\naround the request lifecycle that can be used to modify the request or handle\nerrors and response.\n\nThe `HTTPClient` constructor takes an optional `fetcher` argument that can be\nused to integrate a third-party HTTP client or when writing tests to mock out\nthe HTTP client and feed in fixtures.\n\nThe following example shows how to use the `\"beforeRequest\"` hook to to add a\ncustom header and a timeout to requests and how to use the `\"requestError\"` hook\nto log errors:\n\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\nimport { HTTPClient } from \"@s2-dev/streamstore/lib/http\";\n\nconst httpClient = new HTTPClient({\n  // fetcher takes a function that has the same signature as native `fetch`.\n  fetcher: (request) => {\n    return fetch(request);\n  }\n});\n\nhttpClient.addHook(\"beforeRequest\", (request) => {\n  const nextRequest = new Request(request, {\n    signal: request.signal || AbortSignal.timeout(5000)\n  });\n\n  nextRequest.headers.set(\"x-custom-header\", \"custom value\");\n\n  return nextRequest;\n});\n\nhttpClient.addHook(\"requestError\", (error, request) => {\n  console.group(\"Request Error\");\n  console.log(\"Reason:\", `${error}`);\n  console.log(\"Endpoint:\", `${request.method} ${request.url}`);\n  console.groupEnd();\n});\n\nconst sdk = new S2({ httpClient });\n```\n<!-- End Custom HTTP Client [http-client] -->\n\n<!-- Start Debugging [debug] -->\n## Debugging\n\nYou can setup your SDK to emit debug logs for SDK requests and responses.\n\nYou can pass a logger that matches `console`'s interface as an SDK option.\n\n> [!WARNING]\n> Beware that debug logging will reveal secrets, like API tokens in headers, in log messages printed to a console or files. It's recommended to use this feature only during local development and not in production.\n\n```typescript\nimport { S2 } from \"@s2-dev/streamstore\";\n\nconst sdk = new S2({ debugLogger: console });\n```\n\nYou can also enable a default debug logger by setting an environment variable `S2_DEBUG` to true.\n<!-- End Debugging [debug] -->\n\n<!-- Placeholder for Future Speakeasy SDK Sections -->\n\n# Development\n\n## Maturity\n\nThis SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage\nto a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally\nlooking for the latest version.\n\n## Contributions\n\nWhile we value open-source contributions to this SDK, this library is generated programmatically. Any manual changes added to internal files will be overwritten on the next generation. \nWe look forward to hearing your feedback. Feel free to open a PR or an issue with a proof of concept and we'll do our best to include it in a future release. \n\n### SDK Created by [Speakeasy](https://www.speakeasy.com/?utm_source=streamstore&utm_campaign=)\n",
  "category": null,
  "qualityScore": 82,
  "githubUrl": "https://github.com/s2-streamstore/s2-sdk-typescript",
  "programmingLanguage": "TypeScript",
  "gitHubOrg": "s2-streamstore",
  "gitHubRepo": "s2-sdk-typescript",
  "repositoryPath": null,
  "gh_stars": 8,
  "gh_contributors": 5,
  "gh_issues": 2,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "75a840459300b903c4abf9247072d967919cfee3",
  "last_scraped_at": "2025-07-29T19:13:57.873Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}