{
  "name": "agent",
  "slug": "1mcp-app__agent",
  "description": "A unified Model Context Protocol server implementation that aggregates multiple MCP servers into one.",
  "readme": "# 1MCP - One MCP Server for All\n\nA unified Model Context Protocol server implementation that aggregates multiple MCP servers into one.\n\n[![NPM Version](https://img.shields.io/npm/v/@1mcp/agent)](https://www.npmjs.com/package/@1mcp/agent)\n[![NPM License](https://img.shields.io/npm/l/@1mcp/agent)](https://www.npmjs.com/package/@1mcp/agent)\n[![smithery badge](https://smithery.ai/badge/@1mcp-app/agent)](https://smithery.ai/server/@1mcp-app/agent)\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Quick Start](#quick-start)\n- [Prerequisites](#prerequisites)\n- [Usage](#usage)\n- [Docker](#docker)\n- [Trust Proxy Configuration](#trust-proxy-configuration)\n- [Understanding Tags](#understanding-tags)\n- [Configuration](#configuration)\n- [Authentication](#authentication)\n- [How It Works](#how-it-works)\n- [Development](#development)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Overview\n\n1MCP (One MCP) is designed to simplify the way you work with AI assistants. Instead of configuring multiple MCP servers for different clients (Claude Desktop, Cherry Studio, Cursor, Roo Code, Claude, etc.), 1MCP provides a single, unified server.\n\n## Features\n\n- **Unified Interface**: Aggregates multiple MCP servers into one.\n- **Resource Friendly**: Reduces system resource usage by eliminating redundant server instances.\n- **Simplified Configuration**: Simplifies configuration management across different AI assistants.\n- **Standardized Interaction**: Provides a standardized way for AI models to interact with external tools and resources.\n- **Dynamic Configuration**: Supports dynamic configuration reloading without server restart.\n- **Graceful Shutdown**: Handles graceful shutdown and resource cleanup.\n- **Secure**: Includes comprehensive authentication and security features.\n- **Optimized**: Supports advanced filtering, pagination, and request optimization.\n\n## Quick Start\n\nTo enable Cursor to use existing MCP servers already configured in Claude Desktop, follow these steps:\n\n1. Run the 1MCP server with the Claude Desktop config file:\n\n```bash\nnpx -y @1mcp/agent --config ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n2. Add the 1MCP server to your Cursor config file (`~/.cursor/mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"1mcp\": {\n      \"type\": \"http\",\n      \"url\": \"http://localhost:3050/sse\"\n    }\n  }\n}\n```\n\n3. Enjoy it!\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) (version 21 or higher)\n- [pnpm](https://pnpm.io/)\n\n## Usage\n\nYou can run the server directly using `npx`:\n\n```bash\n# Basic usage (starts server with SSE transport)\nnpx -y @1mcp/agent\n\n# Use existing Claude Desktop config\nnpx -y @1mcp/agent --config ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\n# Use stdio transport instead of SSE\nnpx -y @1mcp/agent --transport stdio\n\n# Use external URL for reverse proxy setup (nginx, etc.)\nnpx -y @1mcp/agent --external-url https://example.com\n\n# Configure trust proxy for reverse proxy setup\nnpx -y @1mcp/agent --trust-proxy=192.168.1.1\n\n# Show all available options\nnpx -y @1mcp/agent --help\n```\n\nAvailable options:\n\n| Option (CLI)                 | Environment Variable               | Description                                                                   |  Default   |\n| :--------------------------- | :--------------------------------- | :---------------------------------------------------------------------------- | :--------: |\n| `--transport`, `-t`          | `ONE_MCP_TRANSPORT`                | Choose transport type (\"stdio\", \"http\", or \"sse\")                             |   \"http\"   |\n| `--config`, `-c`             | `ONE_MCP_CONFIG`                   | Use a specific config file                                                    |            |\n| `--port`, `-P`               | `ONE_MCP_PORT`                     | Change HTTP port                                                              |    3050    |\n| `--host`, `-H`               | `ONE_MCP_HOST`                     | Change HTTP host                                                              | localhost  |\n| `--external-url`, `-u`       | `ONE_MCP_EXTERNAL_URL`             | External URL for OAuth callbacks and public URLs (e.g., https://example.com)  |            |\n| `--trust-proxy`              | `ONE_MCP_TRUST_PROXY`              | Trust proxy configuration for client IP detection (boolean, IP, CIDR, preset) | \"loopback\" |\n| `--tags`, `-g`               | `ONE_MCP_TAGS`                     | Filter servers by tags                                                        |            |\n| `--pagination`, `-p`         | `ONE_MCP_PAGINATION`               | Enable pagination for client/server lists (boolean)                           |   false    |\n| `--enable-auth`              | `ONE_MCP_ENABLE_AUTH`              | Enable authentication (OAuth 2.1)                                             |   false    |\n| `--enable-scope-validation`  | `ONE_MCP_ENABLE_SCOPE_VALIDATION`  | Enable tag-based scope validation (boolean)                                   |    true    |\n| `--enable-enhanced-security` | `ONE_MCP_ENABLE_ENHANCED_SECURITY` | Enable enhanced security middleware (boolean)                                 |   false    |\n| `--session-ttl`              | `ONE_MCP_SESSION_TTL`              | Session expiry time in minutes (number)                                       |    1440    |\n| `--session-storage-path`     | `ONE_MCP_SESSION_STORAGE_PATH`     | Custom session storage directory path (string)                                |            |\n| `--rate-limit-window`        | `ONE_MCP_RATE_LIMIT_WINDOW`        | OAuth rate limit window in minutes (number)                                   |     15     |\n| `--rate-limit-max`           | `ONE_MCP_RATE_LIMIT_MAX`           | Maximum requests per OAuth rate limit window (number)                         |    100     |\n| `--help`, `-h`               |                                    | Show help                                                                     |            |\n\n## Docker\n\nYou can also run 1MCP using Docker:\n\n```bash\n# Pull the latest image\ndocker pull ghcr.io/1mcp-app/agent:latest\n\n# Run with HTTP transport (default)\ndocker run -p 3050:3050 ghcr.io/1mcp-app/agent\n\n# Run with a custom config file\ndocker run -p 3050:3050 -v /path/to/config.json:/config.json ghcr.io/1mcp-app/agent --config /config.json\n\n# Run with stdio transport\ndocker run -i ghcr.io/1mcp-app/agent --transport stdio\n```\n\nAvailable image tags:\n\n- `latest`: Latest stable release\n- `vX.Y.Z`: Specific version (e.g. `v1.0.0`)\n- `sha-<commit>`: Specific commit\n\nExamples:\n\n```bash\n# Custom port and tags\ndocker run -p 3051:3051 \\\n  -e ONE_MCP_PORT=3051 \\\n  -e ONE_MCP_TAGS=network,filesystem \\\n  ghcr.io/1mcp-app/agent\n\n# With external URL for reverse proxy\ndocker run -p 3050:3050 \\\n  -e ONE_MCP_EXTERNAL_URL=https://mcp.example.com \\\n  -e ONE_MCP_TRUST_PROXY=true \\\n  ghcr.io/1mcp-app/agent\n```\n\n## Trust Proxy Configuration\n\nWhen running 1MCP behind a reverse proxy, configure trust proxy settings for proper client IP detection:\n\n```bash\n# Default (safe for local development)\nnpx -y @1mcp/agent --trust-proxy=loopback\n\n# Behind reverse proxy\nnpx -y @1mcp/agent --trust-proxy=192.168.1.1\n\n# Behind CDN/Cloudflare\nnpx -y @1mcp/agent --trust-proxy=true\n```\n\nSee [docs/TRUST_PROXY.md](docs/TRUST_PROXY.md) for detailed configuration options, security considerations, and reverse proxy setup examples.\n\n## Understanding Tags\n\nTags help you control which MCP servers are available to different clients. Think of tags as labels that describe what each server can do.\n\n### How to Use Tags\n\n1. **In your server config**: Add tags to each server to describe its capabilities\n\n```json\n{\n  \"mcpServers\": {\n    \"web-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-fetch\"],\n      \"tags\": [\"network\", \"web\"],\n      \"disabled\": false\n    },\n    \"file-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"~/Downloads\"],\n      \"tags\": [\"filesystem\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n2. **When starting 1MCP in stdio mode**: You can filter servers by tags\n\n```bash\n# Only start servers with the \"network\" tag\nnpx -y @1mcp/agent --transport stdio --tags \"network\"\n\n# Start servers with either \"network\" or \"filesystem\" tags\nnpx -y @1mcp/agent --transport stdio --tags \"network,filesystem\"\n```\n\n3. **When using SSE transport**: Clients can request servers with specific tags\n\n```json\n{\n  \"mcpServers\": {\n    \"1mcp\": {\n      \"type\": \"http\",\n      \"url\": \"http://localhost:3050/sse?tags=network\" // Only connect to network-capable servers\n    }\n  }\n}\n```\n\nExample tags:\n\n- `network`: For servers that make web requests\n- `filesystem`: For servers that handle file operations\n- `memory`: For servers that provide memory/storage\n- `shell`: For servers that run shell commands\n- `db`: For servers that handle database operations\n\n## Configuration\n\n### Global Configuration\n\nThe server automatically manages configuration in a global location:\n\n- macOS/Linux: `~/.config/1mcp/mcp.json`\n- Windows: `%APPDATA%/1mcp/mcp.json`\n\n### Configuration File Format\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-fetch\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-fetch\"],\n      \"disabled\": false\n    },\n    \"server-memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n## Authentication\n\n1MCP supports OAuth 2.1 for secure authentication. To enable it, use the `--enable-auth` flag. The `--auth` flag is deprecated and will be removed in a future version.\n\nWhen authentication is enabled, 1MCP acts as an OAuth 2.1 provider, allowing client applications to securely connect. This ensures that only authorized clients can access the MCP servers.\n\n## How It Works\n\n1MCP acts as a proxy, managing and aggregating multiple MCP servers. It starts and stops these servers as subprocesses and forwards requests from AI assistants to the appropriate server. This architecture allows for a single point of entry for all MCP traffic, simplifying management and reducing overhead.\n\n### System Architecture\n\n```mermaid\ngraph TB\n    subgraph \"AI Assistants\"\n        A1[Claude Desktop]\n        A2[Cursor]\n        A3[Cherry Studio]\n        A4[Roo Code]\n    end\n\n    subgraph \"1MCP Server\"\n        MCP[1MCP Agent]\n    end\n\n    subgraph \"MCP Servers\"\n        S1[Server 1]\n        S2[Server 2]\n        S3[Server 3]\n    end\n\n    A1 -->|http| MCP\n    A2 -->|http| MCP\n    A3 -->|http| MCP\n    A4 -->|http| MCP\n\n    MCP --> |http| S1\n    MCP --> |stdio| S2\n    MCP --> |stdio| S3\n```\n\n### Request Flow\n\n```mermaid\nsequenceDiagram\n    participant Client as AI Assistant\n    participant 1MCP as 1MCP Server\n    participant MCP as MCP Servers\n\n    Client->>1MCP: Send MCP Request\n    activate 1MCP\n\n    1MCP->>1MCP: Validate Request\n    1MCP->>1MCP: Load Config\n    1MCP->>MCP: Forward Request\n    activate MCP\n\n    MCP-->>1MCP: Response\n    deactivate MCP\n\n    1MCP-->>Client: Forward Response\n    deactivate 1MCP\n```\n\n## Development\n\nInstall dependencies:\n\n```bash\npnpm install\n```\n\nBuild the server:\n\n```bash\npnpm build\n```\n\nFor development with auto-rebuild:\n\n```bash\npnpm watch\n```\n\nRun the server:\n\n```bash\npnpm dev\n```\n\n### Debugging\n\nUsing the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\npnpm inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n### Debugging & Source Maps\n\nThis project uses [source-map-support](https://www.npmjs.com/package/source-map-support) to enhance stack traces. When you run the server, stack traces will reference the original TypeScript source files instead of the compiled JavaScript. This makes debugging much easier, as error locations and line numbers will match your source code.\n\nNo extra setup is required—this is enabled by default. If you see a stack trace, it will point to `.ts` files and the correct line numbers. 🗺️\n\n## Contributing\n\nContributions are welcome! Please read our [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## License\n\nThis project is licensed under the Apache License 2.0. See the [LICENSE](LICENSE) file for details.\n",
  "category": null,
  "qualityScore": 84,
  "githubUrl": "https://github.com/1mcp-app/agent",
  "programmingLanguage": "TypeScript",
  "gitHubOrg": "1mcp-app",
  "gitHubRepo": "agent",
  "repositoryPath": null,
  "gh_stars": 53,
  "gh_contributors": 3,
  "gh_issues": 1,
  "gh_releases": true,
  "gh_ci_cd": true,
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}