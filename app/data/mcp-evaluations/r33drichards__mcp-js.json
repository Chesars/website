{
  "name": "js",
  "slug": "r33drichards__mcp-js",
  "description": "A Rust-based Model Context Protocol (MCP) server that exposes a V8 JavaScript runtime as a tool for AI agents like Claude and Cursor. Supports persistent heap snapshots via S3 or local filesystem, and is ready for integration with modern AI development environments.",
  "readme": "# mcp-v8: V8 JavaScript MCP Server\n\nA Rust-based Model Context Protocol (MCP) server that exposes a V8 JavaScript runtime as a tool for AI agents like Claude and Cursor. Supports persistent heap snapshots via S3 or local filesystem, and is ready for integration with modern AI development environments.\n\n## Features\n\n- **V8 JavaScript Execution**: Run arbitrary JavaScript code in a secure, isolated V8 engine.\n- **Heap Snapshots**: Persist and restore V8 heap state between runs, supporting both S3 and local file storage.\n- **MCP Protocol**: Implements the Model Context Protocol for seamless tool integration with Claude, Cursor, and other MCP clients.\n- **Configurable Storage**: Choose between S3 or local directory for heap storage at runtime.\n\n## Installation\n\nInstall `mcp-v8` using the provided install script:\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/r33drichards/mcp-js/main/install.sh | sudo bash\n```\n\nThis will automatically download and install the latest release for your platform to `/usr/local/bin/mcp-v8` (you may be prompted for your password).\n\n---\n\n*Advanced users: If you prefer to build from source, see the [Build from Source](#build-from-source) section at the end of this document.*\n\n## Command Line Arguments\n\n`mcp-v8` supports the following command line arguments:\n\n- `--s3-bucket <bucket>`: Use AWS S3 for heap snapshots. Specify the S3 bucket name. (Conflicts with `--directory-path`)\n- `--directory-path <path>`: Use a local directory for heap snapshots. Specify the directory path. (Conflicts with `--s3-bucket`)\n\n**Note:** You must specify either `--s3-bucket` or `--directory-path`. If neither is provided, the server defaults to S3 with the bucket name `test-mcp-js-bucket`.\n\n## Quick Start\n\nAfter installation, you can run the server directly. Choose one of the following options:\n\n```bash\n# Use S3 for heap storage (recommended for cloud/persistent use)\nmcp-v8 --s3-bucket my-bucket-name\n\n# Use local filesystem directory for heap storage (recommended for local development)\nmcp-v8 --directory-path /tmp/mcp-v8-heaps\n```\n\n## Integration\n\n### Claude for Desktop\n\n1. Install the server as above.\n2. Open Claude Desktop → Settings → Developer → Edit Config.\n3. Add your server to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"js\": {\n      \"command\": \"/usr/local/bin/mcp-v8 --s3-bucket my-bucket-name\"\n    }\n  }\n}\n```\n\n4. Restart Claude Desktop. The new tools will appear under the hammer icon.\n\n### Cursor\n\n1. Install the server as above.\n2. Create or edit `.cursor/mcp.json` in your project root:\n\n```json\n{\n  \"mcpServers\": {\n    \"js\": {\n      \"command\": \"/usr/local/bin/mcp-v8 --directory-path /tmp/mcp-v8-heaps\"\n    }\n  }\n}\n```\n\n3. Restart Cursor. The MCP tools will be available in the UI.\n\n## Example Usage\n\n- Ask Claude or Cursor: \"Run this JavaScript: `1 + 2`\"\n- Use heap snapshots to persist state between runs.\n\n## Heap Storage Options\n\nYou can configure heap storage using the following command line arguments:\n\n- **S3**: `--s3-bucket <bucket>`\n  - Example: `mcp-v8 --s3-bucket my-bucket-name`\n  - Requires AWS credentials in your environment.\n- **Filesystem**: `--directory-path <path>`\n  - Example: `mcp-v8 --directory-path /tmp/mcp-v8-heaps`\n\n**Note:** Only one storage backend can be used at a time. If both are provided, the server will return an error.\n\n## Limitations\n\nWhile `mcp-v8` provides a powerful and persistent JavaScript execution environment, there are limitations to its runtime. \n\n- **No `async`/`await` or Promises**: Asynchronous JavaScript is not supported. All code must be synchronous.\n- **No `fetch` or network access**: There is no built-in way to make HTTP requests or access the network.\n- **No `console.log` or standard output**: Output from `console.log` or similar functions will not appear. To return results, ensure the value you want is the last line of your code.\n- **No file system access**: The runtime does not provide access to the local file system or environment variables.\n- **No `npm install` or external packages**: You cannot install or import npm packages. Only standard JavaScript (ECMAScript) built-ins are available.\n- **No timers**: Functions like `setTimeout` and `setInterval` are not available.\n- **No DOM or browser APIs**: This is not a browser environment; there is no access to `window`, `document`, or other browser-specific objects.\n\n---\n\n## Build from Source (Advanced)\n\nIf you prefer to build from source instead of using the install script:\n\n### Prerequisites\n- Rust (nightly toolchain recommended)\n- (Optional) AWS credentials for S3 storage\n\n### Build the Server\n\n```bash\ncd server\ncargo build --release\n```\n\nThe built binary will be located at `server/target/release/server`. You can use this path in the integration steps above instead of `/usr/local/bin/mcp-v8` if desired.\n",
  "category": null,
  "qualityScore": 82,
  "githubUrl": "https://github.com/r33drichards/mcp-js",
  "programmingLanguage": "Rust",
  "gitHubOrg": "r33drichards",
  "gitHubRepo": "mcp-js",
  "repositoryPath": null,
  "gh_stars": 15,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "6ef27e91ad0afa3c8bc0d35955adf1c7de43e3bf",
  "last_scraped_at": "2025-07-29T19:08:27.068Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}