{
  "name": "jupyter",
  "slug": "datalayer__jupyter-mcp-server",
  "description": "ü™ê ‚ú® Model Context Protocol (MCP) Server for Jupyter.",
  "readme": "<!--\n  ~ Copyright (c) 2023-2024 Datalayer, Inc.\n  ~\n  ~ BSD 3-Clause License\n-->\n\n[![Datalayer](https://assets.datalayer.tech/datalayer-25.svg)](https://datalayer.io)\n\n[![Become a Sponsor](https://img.shields.io/static/v1?label=Become%20a%20Sponsor&message=%E2%9D%A4&logo=GitHub&style=flat&color=1ABC9C)](https://github.com/sponsors/datalayer)\n\n# ü™ê‚ú® Jupyter MCP Server\n\n[![PyPI - Version](https://img.shields.io/pypi/v/jupyter-mcp-server)](https://pypi.org/project/jupyter-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@datalayer/jupyter-mcp-server)](https://smithery.ai/server/@datalayer/jupyter-mcp-server)\n<a href=\"https://mseep.ai/app/datalayer-jupyter-mcp-server\">\n<img src=\"https://mseep.net/pr/datalayer-jupyter-mcp-server-badge.png\" alt=\"MseeP.ai Security Assessment Badge\" width=\"100\" />\n</a>\n\n> üö® **BREAKING CHANGE**\n> Since version `0.6.0`, the configuration has changed.\n> [Read more in the release notes.](https://jupyter-mcp-server.datalayer.tech/releases)\n\n**Jupyter MCP Server** is a [Model Context Protocol](https://modelcontextprotocol.io) (MCP) server implementation that enables **real-time** interaction with üìì Jupyter Notebooks, allowing AI to edit, document and execute code for data analysis, visualization etc.\n\nCompatible with any Jupyter deployment (local, JupyterHub, ...) and with [Datalayer](https://datalayer.ai/) hosted Notebooks.\n\n## üöÄ Key Features\n\n- ‚ö° **Real-time control:** Instantly view notebook changes as they happen.\n- üîÅ **Smart execution:** Automatically adjusts when a cell run fails thanks to cell output feedback.\n- ü§ù **MCP-Compatible:** Works with any MCP client, such as Claude Desktop, Cursor, Windsurf, and more.\n\n![Jupyter MCP Server Demo](https://assets.datalayer.tech/jupyter-mcp/jupyter-mcp-server-claude-demo.gif)\n\nüõ†Ô∏è This MCP offers multiple tools such as `insert_execute_code_cell`, `append_markdown_cell`, `get_notebook_info`, `read_cell`, and more, enabling advanced interactions with Jupyter notebooks. Explore our [tools documentation](https://jupyter-mcp-server.datalayer.tech/tools) to learn about all the tools powering Jupyter MCP Server.\n\n## üèÅ Getting Started\n\nFor comprehensive setup instructions‚Äîincluding `Streamable HTTP` transport and advanced configuration‚Äîcheck out [our documentation](https://jupyter-mcp-server.datalayer.tech/). Or, get started quickly with `JupyterLab` and `stdio` transport here below.\n\n### 1. Set Up Your Environment\n\n```bash\npip install jupyterlab==4.4.1 jupyter-collaboration==4.0.2 ipykernel\npip uninstall -y pycrdt datalayer_pycrdt\npip install datalayer_pycrdt==0.12.17\n```\n\n### 2. Start JupyterLab\n\n```bash\n# make jupyterlab\njupyter lab --port 8888 --IdentityProvider.token MY_TOKEN --ip 0.0.0.0\n```\n\n### 3. Configure Your Preferred MCP Client\n\n> [!NOTE]\n>\n> Ensure the `port` of the `ROOM_URL` and `RUNTIME_URL` match those used in the `jupyter lab` command.\n>\n> The `ROOM_ID` which is the path to the notebook you want to connect to, should be relative to the directory where JupyterLab was started.\n>\n> In a basic setup, `ROOM_URL` and `RUNTIME_URL` are the same. `ROOM_TOKEN`, and `RUNTIME_TOKEN` are also the same.\n\n#### MacOS and Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"jupyter\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"ROOM_URL\",\n        \"-e\",\n        \"ROOM_TOKEN\",\n        \"-e\",\n        \"ROOM_ID\",\n        \"-e\",\n        \"RUNTIME_URL\",\n        \"-e\",\n        \"RUNTIME_TOKEN\",\n        \"datalayer/jupyter-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"ROOM_URL\": \"http://host.docker.internal:8888\",\n        \"ROOM_TOKEN\": \"MY_TOKEN\",\n        \"ROOM_ID\": \"notebook.ipynb\",\n        \"RUNTIME_URL\": \"http://host.docker.internal:8888\",\n        \"RUNTIME_TOKEN\": \"MY_TOKEN\"\n      }\n    }\n  }\n}\n```\n\n#### Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"jupyter\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"ROOM_URL\",\n        \"-e\",\n        \"ROOM_TOKEN\",\n        \"-e\",\n        \"ROOM_ID\",\n        \"-e\",\n        \"RUNTIME_URL\",\n        \"-e\",\n        \"RUNTIME_TOKEN\",\n        \"--network=host\",\n        \"datalayer/jupyter-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"ROOM_URL\": \"http://localhost:8888\",\n        \"ROOM_TOKEN\": \"MY_TOKEN\",\n        \"ROOM_ID\": \"notebook.ipynb\",\n        \"RUNTIME_URL\": \"http://localhost:8888\",\n        \"RUNTIME_TOKEN\": \"MY_TOKEN\"\n      }\n    }\n  }\n}\n```\n\nFor detailed instructions on configuring various MCP clients‚Äîincluding [Claude Desktop](https://jupyter-mcp-server.datalayer.tech/clients/claude_desktop), [VS Code](https://jupyter-mcp-server.datalayer.tech/clients/vscode), [Cursor](https://jupyter-mcp-server.datalayer.tech/clients/cursor), [Cline](https://jupyter-mcp-server.datalayer.tech/clients/cline), and [Windsurf](https://jupyter-mcp-server.datalayer.tech/clients/windsurf) ‚Äî see the [Clients documentation](https://jupyter-mcp-server.datalayer.tech/clients).\n\n## üìö Resources\n\nLooking for blog posts, videos, or other materials about Jupyter MCP Server?\n\nüëâ Visit the [Resources section](https://jupyter-mcp-server.datalayer.tech/resources).\n",
  "category": null,
  "qualityScore": 87,
  "githubUrl": "https://github.com/datalayer/jupyter-mcp-server",
  "programmingLanguage": "Python",
  "gitHubOrg": "datalayer",
  "gitHubRepo": "jupyter-mcp-server",
  "repositoryPath": null,
  "gh_stars": 542,
  "gh_contributors": 8,
  "gh_issues": 12,
  "gh_releases": false,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "2b2b0485e4ecd67824973c3d9182cfd1072edb1c",
  "last_scraped_at": "2025-07-29T19:19:57.633Z",
  "implementing_tools": null,
  "implementing_prompts": null,
  "implementing_resources": null,
  "implementing_sampling": null,
  "implementing_roots": null,
  "implementing_logging": null,
  "implementing_stdio": null,
  "implementing_streamable_http": null,
  "implementing_oauth2": null
}